
#include "project_optimization.h"
COMPILER_LEXER_OPTIMIZATION_PUSH()

#include "lexsubtokenizer.h"
#include "semantic_id.h"
#include "lexlib.h"
#include "sql_syntaxer_bison.h"


namespace Sm {

// <Sql>(?i:FUNCTION)/{FIN}  { BEGIN StateId1; KEYWORD_RETURN(FUNCTION) }
// <Sql>(?i:PROCEDURE)/{FIN} { BEGIN StateId1; KEYWORD_RETURN(PROCEDURE) }
// <Sql>(foo)                { KEYWORD_RETURN(foo_token) }

#define TOK(tokenValue) { #tokenValue, yy::parser::token::tokenValue }

#define CFG(tokenValue) { toLower(#tokenValue), yy::parser::token::cfg_ ## tokenValue }

Sm::LexSubtokenizer::TokensTable Sm::LexSubtokenizer::getOraTokensTable() {
  TokensTable tbl = {
    TOK(ADD), TOK(ALL), TOK(AND), TOK(ANY), TOK(AS ), TOK(ASC), TOK(AT ), TOK(BY ), TOK(DAY), TOK(DBA), TOK(DDL),
    TOK(END), TOK(FOR), TOK(IF ), TOK(IN ), TOK(IS ), TOK(LOB), TOK(MAP),           TOK(NEW), TOK(NOT), TOK(OF ),
    TOK(OID), TOK(ON ), TOK(OR ), TOK(OUT), TOK(RAW), TOK(REF), TOK(ROW), TOK(SCN), TOK(SET), TOK(SQL), TOK(THE),
    TOK(TO ), TOK(UID), TOK(USE), TOK(XML), TOK(MODEL),

    TOK(ADMIN), TOK(AFTER),             TOK(ALTER), TOK(ARRAY), TOK(AUDIT),             TOK(BULK ), TOK(CACHE),
    TOK(CALL ), TOK(CASE ), TOK(CAST ), TOK(CHECK), TOK(CHUNK), TOK(CLOSE), TOK(CROSS), TOK(CUBE ), TOK(CYCLE),
    TOK(DATE ), TOK(DESC ), TOK(DROP ), TOK(EACH ), TOK(ELSE ), TOK(ELSIF), TOK(EMPTY), TOK(EXIT ), TOK(FETCH),
    TOK(FINAL), TOK(FLOAT), TOK(FORCE), TOK(FOUND), TOK(FROM ), TOK(GRANT), TOK(GROUP), TOK(HASH ), TOK(HEAP ),
    TOK(INDEX), TOK(INTO ), TOK(JAVA ), TOK(JOIN ), TOK(LESS ), TOK(LEVEL), TOK(LIKE ), TOK(LIKE2), TOK(LIKE4),
    TOK(LIKEC), TOK(LIST ), TOK(LOCAL), TOK(LOCK ), TOK(LOGON), TOK(LOOP ),             TOK(MERGE), TOK(MINUS),
    TOK(MODE ),             TOK(MONTH), TOK(NONE ), TOK(NULLS), TOK(ONLY ), TOK(OPEN ), TOK(ORDER), TOK(PIPE ),
    TOK(PIVOT), TOK(PRIOR), TOK(QUOTA), TOK(RAISE), TOK(RANGE), TOK(READ ), TOK(READS), TOK(REKEY), TOK(RELY ),
    TOK(RNDS ), TOK(RNPS ), TOK(ROWID), TOK(RULES), TOK(SALT ), TOK(SCOPE), TOK(SEED ), TOK(SELF ),
    TOK(SHARE), TOK(SHOW ), TOK(SOME ), TOK(SORT ), TOK(START), TOK(STORE), TOK(TABLE), TOK(THAN ), TOK(THEN ),
    TOK(TRUST), TOK(TYPE ), TOK(UNDER), TOK(UNION), TOK(UNTIL), TOK(USING), TOK(WAIT ), TOK(WHEN ), TOK(WHERE),
    TOK(WHILE), TOK(WITH ), TOK(WNDS ), TOK(WNPS ), TOK(YEAR ), TOK(ZONE ),

                  TOK(ALWAYS ), TOK(ANALYZE), TOK(AUTHID ), TOK(BEFORE ), TOK(BETWEEN), TOK(CASCADE), TOK(CLUSTER),
    TOK(COLLECT), TOK(COLUMN ), TOK(COLUMNS), TOK(COMMENT), TOK(COMMIT ), TOK(COMPUTE), TOK(CONNECT), TOK(CREATE ),
    TOK(CURRENT), TOK(CURSOR ), TOK(DECIMAL), TOK(DECLARE), TOK(DEFAULT), TOK(DEFINER), TOK(DELETE ), TOK(DISABLE),
    TOK(ELEMENT), TOK(ENABLE ), TOK(ENCRYPT), TOK(ESCAPE ), TOK(EXCEPT ), TOK(EXCLUDE), TOK(EXECUTE), TOK(EXISTS ),
    TOK(EXTEND ), TOK(FORALL ), TOK(HAVING ),               TOK(INCLUDE), TOK(INSERT ), TOK(INSTEAD), TOK(INTVAL ),
    TOK(ISOPEN ), TOK(ITERATE), TOK(LIBRARY),               TOK(LOGGING), TOK(LOGOFF ), TOK(MAPPING), TOK(MEMBER ),
    TOK(MODIFY ), TOK(NATURAL), TOK(NESTED ), TOK(NOAUDIT), TOK(NOCACHE), TOK(NOCOPY ), TOK(NOCYCLE), TOK(NOORDER),
    TOK(NORELY ), TOK(NOWAIT ), TOK(NUMBER ), TOK(OBJECT ), TOK(ONLINE ), TOK(OPTION ), TOK(OTHERS ), TOK(OraData),
                  TOK(PCTFREE), TOK(PCTUSED), TOK(PRAGMA ), TOK(PROFILE), TOK(RECORD ), TOK(RENAME ), TOK(RETURN ),
    TOK(REVERSE), TOK(REVOKE ), TOK(ROLLUP ), TOK(ROWNUM ), TOK(SAMPLE ), TOK(SCHEMA ), TOK(SECOND ), TOK(SELECT ),
    TOK(SINGLE ), TOK(SQLData), TOK(STARTUP), TOK(STATIC ), TOK(STORAGE), TOK(SUBTYPE), TOK(SUSPEND), TOK(THROUGH),
    TOK(UNIQUE ), TOK(UNLOCK ), TOK(UNPIVOT), TOK(UPDATE ), TOK(UPDATED), TOK(UPGRADE), TOK(UPSERT ), TOK(VALUES ),
    TOK(VARCHAR), TOK(VARRAY ), TOK(VARYING), TOK(XMLTYPE), TOK(OPAQUE),

    TOK(AGGREGATE), TOK(ASSOCIATE), TOK(AUTOMATIC), TOK(COMMITED ), TOK(COMPRESS ), TOK(CONSTANT ), TOK(DECREMENT),
    TOK(DEFERRED ), TOK(DIMENSION), TOK(DIRECTORY), TOK(DISTINCT ), TOK(EXCEPTION), TOK(EXCLUSIVE), TOK(EXTERNAL ),
    TOK(FREEPOOLS), TOK(FUNCTION ), TOK(GLOBALLY ), TOK(HIERARCHY), TOK(IMMEDIATE), TOK(INCLUDING),
    TOK(INCREMENT), TOK(INDICATOR), TOK(INFINITE ), TOK(INITIALLY), TOK(INITRANS ), TOK(INTERSECT), TOK(ISOLATION),
    TOK(LANGUAGE ), TOK(MAXTRANS ), TOK(MAXVALUE ), TOK(MEASURES ), TOK(MINIMIZE ), TOK(MINVALUE ), TOK(MOVEMENT ),
    TOK(MULTISET ), TOK(NOLOGGING), TOK(NOMAPPING), TOK(NOTFOUND ), TOK(OIDINDEX ), TOK(PARALLEL ), TOK(PARTITION),
    TOK(PIPELINED), TOK(PRESERVE ), TOK(PROCEDURE), TOK(REFERENCE), TOK(REQUIRED ), TOK(RETENTION), TOK(RETURNING),
    TOK(ROLLBACK ), TOK(ROWID_tok), TOK(SAVEPOINT), TOK(SEQUENCE ), TOK(SEQUENTAL), TOK(SHUTDOWN ), TOK(SIBLINGS ),
    TOK(SMALLINT ), TOK(TIMESTAMP), TOK(TIMEZONE ), TOK(TRIGGERS ), TOK(TRUNCATE ), TOK(VALIDATE ), TOK(VARCHAR2 ),
    TOK(XMLSCHEMA),

    TOK(CONSTRAINT  ), TOK(CURRENT_USER), TOK(CustomDatum ), TOK(DBTIMEZONE  ), TOK(DEFFERABLE  ), TOK(DIRECT_LOAD ),
    TOK(DISASSOCIATE), TOK(EQUALS_PATH ), TOK(INSTANTIABLE), TOK(MAXEXTENTS  ), TOK(MONITORING  ), TOK(NOCOMPRESS  ),
    TOK(NOMAXVALUE  ), TOK(NOMINIMIZE  ), TOK(NOMINVALUE  ), TOK(NOMONITORING), TOK(NOPARALLEL  ), TOK(NOVALIDATE  ),
    TOK(OPERATIONS  ), TOK(OVERRIDING  ), TOK(PARTITIONS  ), TOK(PCTTHRESHOLD), TOK(PCTVERSION  ), TOK(PRIVILEGES  ),
    TOK(REFERENCES  ), TOK(REFERENCING ), TOK(REGEXP_LIKE ), TOK(RELATIONAL  ), TOK(RESULT_CACHE), TOK(SERIALIZABLE),
    TOK(SERVERERROR ), TOK(STATISTICS  ), TOK(SUBMULTISET ), TOK(SUBPARTITION), TOK(TABLESPACE  ), TOK(TRANSACTION ),
    TOK(UNDER_PATH  ),

    TOK(AUTHENTICATION    ), TOK(AUTONOMOUS_TRANSACTION), TOK(BULK_ROWCOUNT      ), TOK(DB_ROLE_CHANGE     ),
    TOK(DETERMINISTIC     ), TOK(NOROWDEPENDENCIES     ), TOK(PARALLEL_ENABLE    ), TOK(RESTRICT_REFERENCES),
    TOK(ROWDEPENDENCIES   ), TOK(SERIALLY_REUSABLE     ), TOK(SESSIONTIMEZONE    ), TOK(SUBPARTITIONS      ),
    TOK(XMLSchema_URL     ),
    TOK(_CONSTRUCT_EXPR   ),
    TOK(_CONSTRUCT_PL_EXPR),
    TOK(_DECLTYPE_CURSOR  ),
    TOK(_DECL_NAMESPACE   ),
    TOK(_DYN_TAIL         ),
    TOK(_DYN_EXPR         ),
    TOK(_DYN_FIELD        ),
    TOK(_DYN_SUBQUERY     ),
    TOK(_DYN_TR_FUN       ),
    TOK(_DYN_TR_CALL_SIGNATURE),
    TOK(_DYN_BLOCK_TAIL ),
    TOK(_DYN_TABLE      ),
    TOK(_DYN_WHERE      ),
    TOK(__DYN_LEN__     ),
    TOK(__STR_TAIL__    ),
    TOK(__BOOL_TAIL__   ),
    TOK(__NUM_TAIL__    ),
    TOK(_DYN_PLSQL_BLOCK),
    TOK(_DYN_BLOCK_TAIL ),
    TOK(CONCAT          ),
    TOK(GLOBAL_CURSOR   ),
    TOK(SAVE_SUBQUERY   ),
    TOK(SEGMENT         ),
    TOK(CREATION        ),
    TOK(MOD),
    TOK(TOK_TRANSFORM_SENTENCE),

    { "BEGIN"       , yy::parser::token::BEGINk     },
    { "BYTE"        , yy::parser::token::BYTE_tok   },
    { "CHARACTER"   , yy::parser::token::CHARtok    },
    { "CHAR"        , yy::parser::token::CHARtok    },
    { "NAN"         , yy::parser::token::NAN_token  },
    { "NOSORT"      , yy::parser::token::NOSORT_tok },
    { "NULL"        , yy::parser::token::NULLk      },
    { "OVERFLOW"    , yy::parser::token::OVERFLOWk  },
    { "REJECT"      , yy::parser::token::REJECTk    },
    { "FILE"        , yy::parser::token::FILEtok    },
    { "INITIAL"     , yy::parser::token::INITIALtok },
    { "INTEGER"     , yy::parser::token::INTEGERtok },
    { "LONG"        , yy::parser::token::LONGtok    }
  };
  return tbl;
}

static string toLower(const string &src) {
  string res = src;
  for_each(res.begin(), res.end(), ::tolower);
  return res;
}



LexSubtokenizer::TokensTable LexSubtokenizer::getConfigTokensTable() {
  TokensTable tbl = {
    CFG(BASE              ), CFG(CREATE_ALL_MODEL  ), CFG(CREATE_CHECKS      ), CFG(CREATE_FOREIGN_KEYS),
    CFG(CREATE_GLOBAL_VARS), CFG(CREATE_INDICES    ), CFG(CREATE_INITIALIZERS), CFG(CREATE_IN_DB       ),
    CFG(CREATE_KEYS       ), CFG(CREATE_OTHERS_KEYS), CFG(CREATE_PRIMARY_KEYS), CFG(CREATE_PROC        ),
    CFG(CREATE_SEQUENCES  ), CFG(CREATE_SYNONYM    ), CFG(CREATE_TABLES      ), CFG(CREATE_TRIGGERS    ),
    CFG(CREATE_UNIQUE_KEYS), CFG(CREATE_USERS      ), CFG(CREATE_VIEWS       ), CFG(DELETE_FROM_TABLES ),
    CFG(DROP_FOREIGN_KEYS ), CFG(DROP_INDICES      ), CFG(DROP_KEYS          ), CFG(DROP_TABLES        ),
    CFG(DROP_TRIGGERS     ), CFG(DUMP_DB           ), CFG(DUMP_OUT_FILE      ), CFG(DUMP_SPLIT_FILES   ),
    CFG(ERRORSE_FILE      ), CFG(ERRORS_FILE       ), CFG(INITIALIZERS_FILE  ), CFG(JOIN               ),
    CFG(LINTER_NODENAME   ), CFG(LINTER_PASSWORD   ), CFG(LINTER_USERNAME    ), CFG(OUT_ACTOR_USER     ),
    CFG(OUT_FILE          ), CFG(REFERENCES        ), CFG(SKIP_ERRORS        ), CFG(SYSDEPS            ),
    CFG(TABLES_ROWCOUNT   ), CFG(TABLES_SIZE       ), CFG(USER_EXCEPTIONS   ),

    CFG(CREATE_CODEBLOCK_BRANCH    ), CFG(CREATE_INITIALIZERS_DEPENDENCIES ), CFG(CREATE_PRIMARY_TO_FOREIGN_REFERENCES),
    CFG(CREATE_PUBLIC_SYNONYM      ), CFG(EXISTED_ENTITY_QUERIES           ), CFG(FILTER_ENTITIES_BY_LINTER_EXISTS    ),
    CFG(GENERATE_ALL_ENTITIES      ), CFG(INITIALIZERS_DEPENDENCIES_FILE   ), CFG(NOT_FILTER_ENTITIES_IN_DB           ),
    CFG(NO_REPLACE_STATEMENTS      ), CFG(PRINT_EXISTED_ENTITIES           ), CFG(PRINT_EXISTED_LINTER_PROCEDURES     ),
    CFG(PRINT_EXISTED_LINTER_TABLES), CFG(PRINT_EXISTED_LINTER_TRIGGERS    ), CFG(PRINT_EXISTED_LINTER_VARIABLES      ),
    CFG(PRINT_EXISTED_LINTER_VIEWS ), CFG(REQUEST_ENTITIES_BY_LINTER_EXISTS), CFG(START_LINTER_COMMAND                ),
    CFG(STOP_LINTER_COMMAND        ), CFG(SUPRESS_UNRESOLVED_PRINTING      ), CFG(DATE_TO_CHAR_DEFAULT_LENGTH         ),
    CFG(TRANSLATE_REFERENCES       ), CFG(PRINT_CURSOR_VARIABLES           ), CFG(UNWRAP_STRUCTURED_FIELDS            ),
    CFG(MARK_AS_AUTOGENERATED      ), 
    CFG(CODEGEN_SORT_CMD           ),
    CFG(CONVERTER_REPOSITORY_PATH  ),
    CFG(MODEL_SRC_REPOSITORY_PATH  ),
    CFG(IMPORT                     ),
    CFG(SOURCES                    ),
    CFG(JOIN),
    CFG(DIFFGEN_ENABLE),
    CFG(EMULATE_ERRORS_IN_CALL_INTERFACE),
    CFG(VIRTUAL_ERRORS),
    CFG(SORTED_ERROR_LOG_BASE),
    CFG(ENTITY_FOR_DEPEND_FIND),
    CFG(DEPENDENCY_ANALYZER_OUTFILE),
    CFG(DEPEND_ENTITIES_LINTER),
    CFG(TEMPORARY_PATH),
    CFG(DUMP_DATE_ONLY),
    CFG(USERS_EXCEPTIONS_LIST),
    CFG(TABLES_SIZES_LIST),
    CFG(TABLES_ROWCOUNT_LIST),
    CFG(DEBUG_TOKEN_LOCATION),
    CFG(LINTER_RESERVED_KEYWORDS),
    CFG(DEPENDENCIESSTRUCT_REPR),
    CFG(DEPENDENCY_ANALYZER_OUT_DEP_GRAPH),
    CFG(SKIP_CODEGENERATION),
    CFG(DUMP_ENTITY_LIST),
    CFG(GENERATE_PYTHON_REPR),
    CFG(TRANSFORM_SENTENCE),
    CFG(MANUAL_ENTITIES),
    CFG(MANUAL_ENTITIES_FILENAME),
    CFG(FULL_RECORDS_REPORT),
    CFG(GENERATE_FULL_STATISTIC),
    CFG(TEMPORARY_SPACER_FILE),
    CFG(CHECK_LEXER_LOCATIONS),
    CFG(CODEGEN_ENTITIES_BYTELOCATION),
    CFG(NEED_TABLE_PROPERTIES),
    CFG(EXPORT_ENTITIES_LOCATION),
    CFG(EXPORT_ENTITIES_LOCATION_FILE),
    CFG(EXPORT_SKIPPED_SYNTAX),
    CFG(EXPORT_SKIPPED_SYNTAX_FILE),
    CFG(DESCR_ERRORS_ENTITIES_RESOLVE)
  };

  return tbl;
}







}

COMPILER_LEXER_OPTIMIZATION_POP()
