"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
import sys
from pathlib import Path
from dotenv import load_dotenv

__ENVFILE = [x for x in sys.argv if x[: len('--envfile')] == '--envfile']
__ENVFILE = __ENVFILE[0][len('--envfile') + 1:] if __ENVFILE else None
load_dotenv(os.path.join('.', __ENVFILE if __ENVFILE else '.env.local'))


def boolean_cfg(s):
    cfg_val = os.getenv(s)
    return int(cfg_val) != 0 if cfg_val else False


def int_cfg(s, defaultValue):
    cfg_val = os.getenv(s)
    if cfg_val is None:
        return defaultValue
    return int(cfg_val)


DEBUG = boolean_cfg('DJANGO_DEBUG')


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.getcwd()  # Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '68$%t@l-3&t!tc&r0^-)&8w8*gj!d+k*9@08u=ebyzk_yf6o28'

# SECURITY WARNING: don't run with debug turned on in production!
USE_SQLITE = boolean_cfg('USE_SQLITE')

ALLOWED_HOSTS = ['*']

ADMINS = [
    ('admin', 'yerkin.ko@gmail.com'),
    ('admin2', 'z0r-el@yandex.ru')
]

GRAPHENE = {
    'SCHEMA': 'ptc_deco.main.schema.schema',
    'MIDDLEWARE': [
        'graphql_jwt.middleware.JSONWebTokenMiddleware',
    ],
    'RELAY_CONNECTION_MAX_LIMIT': int_cfg('RELAY_CONNECTION_MAX_LIMIT', 100),
}

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTHENTICATION_BACKENDS = [
    'axes.backends.AxesBackend',
    'graphql_jwt.backends.JSONWebTokenBackend',
    'django.contrib.auth.backends.ModelBackend',
    'graphql_auth.backends.GraphQLAuthBackend',
]

GRAPHQL_JWT = {
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_LONG_RUNNING_REFRESH_TOKEN': True,
    'JWT_ALLOW_ANY_CLASSES': [
        'graphql_auth.mutations.Register',
        'graphql_auth.mutations.VerifyAccount',
        'graphql_auth.mutations.ObtainJSONWebToken',
        'graphql_auth.mutations.ResendActivationEmail',
        'graphql_auth.mutations.SendPasswordResetEmail',
        'graphql_auth.mutations.PasswordReset',
        'graphql_auth.mutations.VerifyToken',
        'graphql_auth.mutations.RefreshToken',
        'graphql_auth.mutations.RevokeToken',
        'graphql_auth.mutations.VerifySecondaryEmail',
    ],
}

GRAPHQL_AUTH = {
    'LOGIN_ALLOWED_FIELDS': ['email', 'username'],
}

UPDATE_MUTATION_FIELDS = ['first_name', 'last_name', 'test']

USER_NODE_FILTER_FIELDS = {
    'email': [
        'exact',
    ],
    'username': ['exact', 'icontains', 'istartswith'],
    'is_active': ['exact'],
    'status__archived': ['exact'],
    'status__verified': ['exact'],
    'status__secondary_email': ['exact'],
}

AUTH_USER_MODEL = 'api.CustomUser'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_LOGIN')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_PORT = 587
EMAIL_USE_TLS = True

DATALOGGER_DATABASE = 'project_01'

DATALOGGER_EXCLUDE_FIELDS = ('version', 'modified')

DATALOGGER_EVENT_CODE = {
    'CRITICAL_CHANGE': ('cc', u'Критичное изменение'),
}

DATALOGGER_SYSTEMS_ENUM = {
    'APPLICATION': ('app', u'Основное приложение'),
    'SCHEDULER': ('sch', u'Задачи вызыванные планировщиком'),
}

DATALOGGER_EVENT_TYPE = {
    'SYSTEM_EVENT': ('se', u'Системное событие'),
    'LEGALLY_EVENT': ('le', u'Юридически важное событие'),
}
# end kkatnikov

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'graphene_django',
    'graphql_jwt.refresh_token.apps.RefreshTokenConfig',
    'graphql_auth',
    'django_filters',
    'django_extensions',
    'ptc_deco.api.apps.ApiConfig',
    'ptc_deco.logger',
    'rest_framework',
    'psqlextra',
    'axes',
    # 'silk',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'axes.middleware.AxesMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'ptc_deco.logger.middleware.LoggedInUserMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django_currentuser.middleware.ThreadLocalUserMiddleware',
    # "django_cprofile_middleware.middleware.ProfilerMiddleware",
    # 'silk.middleware.SilkyMiddleware',
]

SILKY_PYTHON_PROFILER = True

# CORS_ORIGIN_WHITELIST = [
#     'http://localhost:3000',
#     'https://localhost:3000',
#     'http://127.0.0.1:3000',
#     'https://127.0.0.1:3000',
# ]


CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = 'ptc_deco.main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ptc_deco.main.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'ENGINE': 'psqlextra.backend',
        'NAME': os.getenv('PG_DBNAME'),
        'USER': os.getenv('PG_USER'),
        'PASSWORD': os.getenv('PG_PASSWORD'),
        'HOST': os.getenv('PG_HOST'),
        'PORT': os.getenv('PG_PORT'),
    }
}

# print(DATABASES)

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    {
        'NAME': 'ptc_deco.validators.password_validation.LowercaseLetterValidator',
    },
    {
        'NAME': 'ptc_deco.validators.password_validation.DigitValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')
MEDIA_URL = '/media/'

if boolean_cfg('PG_LOGGING'):
    LOGGING = {
        'version': 1,
        'filters': {
            'require_debug_true': {
                '()': 'django.utils.log.RequireDebugTrue',
            }
        },
        'handlers': {
            'console': {
                'level': 'DEBUG',
                'filters': ['require_debug_true'],
                'class': 'logging.StreamHandler',
            }
        },
        'loggers': {
            'django.db.backends': {
                'level': 'DEBUG',
                'handlers': ['console'],
            }
        },
    }

RECORD_HISTORY = os.getenv('RECORD_HISTORY', True)

# If is set to True -> all queries and mutations will not require authorization or permissions
DISABLE_GQL_AUTH_CONTROL = boolean_cfg('DISABLE_GQL_AUTH_CONTROL')
# in case when used String "ALL" -> compare with all passwords user have used
PREVENT_PASSWORD_REUSE = 'ALL'

AXES_ENABLED = boolean_cfg('AXES_ENABLED')
AXES_RESET_ON_SUCCESS = boolean_cfg('AXES_RESET_ON_SUCCESS')
AXES_FAILURE_LIMIT = int_cfg('AXES_FAILURE_LIMIT', 42)


try:
    from .settings_local import *
except ImportError:
    pass