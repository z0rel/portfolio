# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

"An object with an ID"
interface Node {
  "The ID of the object."
  id: ID!
}

type AddEstimateItemToAppendix {
  ok: Boolean
}

"Бронирование с данными монтажа"
type AnswerMountingProjectCardField {
  "Задачи по дополнительному дневному фотоотчету"
  additionalPhotoDay: [MountingProjectCardMountingTaskItem]
  "Задачи по дополнительному дневному фотоотчету - длина списка"
  additionalPhotoDayTotal: Int
  "Задачи по дополнительному ночному фотоотчету"
  additionalPhotoNight: [MountingProjectCardMountingTaskItem]
  "Задачи по дополнительному ночному фотоотчету - длина списка"
  additionalPhotoNightTotal: Int
  "Комментарии"
  comments: String
  "Данные конструкции и стороны конструкции"
  constructionSideInfo: ConstructionSideInfo
  "Экипажи"
  crews: String
  "Текущий дизайн"
  currentDesign: MountingDesignProjectCard
  "Идентификатор бронирования"
  id: ID
  "Наиболее поздняя дата монтажа"
  maxDateMounting: DateTime
  "Наиболее поздняя дата демонтажа"
  maxDateUnmounting: DateTime
  "Наиболее ранняя дата монтажа"
  minDateMounting: DateTime
  "Наиболее ранняя дата демонтажа"
  minDateUnmounting: DateTime
  "Наиболее ранняя дата дневного фотоотчета"
  minPhotoAdditionalDayDate: DateTime
  "Наиболее ранняя дата ночного фотоотчета"
  minPhotoAdditionalNightDate: DateTime
  "Наиболее ранняя дата фотоотчета"
  minPhotoDate: DateTime
  "Задачи по монтажу/демонтажу"
  mountingTasks: [MountingProjectCardMountingTaskItem]
  "Задачи по монтажу/демонтажу - длина списка"
  mountingTasksTotal: Int
  "Предыдущий дизайн"
  previousDesign: MountingDesignProjectCard
  "Наличие брендинга в бронировании"
  reservation_Branding: Boolean
  "Начало бронирования"
  reservation_DateFrom: DateTime
  "Окончание бронирования"
  reservation_DateTo: DateTime
  "Демонтируемый дизайн"
  unmountingDesign: MountingDesignProjectCard
}

type AppendixType {
  "Идентификатор приложения к договору"
  id: ID
}

"""

Archive account and revoke refresh tokens.

User must be verified and confirm password.
"""
type ArchiveAccount {
  errors: ExpectedErrorType
  success: Boolean
}

type BatchAddConstructionSidesToPackage {
  "Количество сторон, не добавленных в пакет"
  countOfOccupiedSides: Int
  "Стороны, не добавленные в пакет"
  occupiedSides: [ID]
  ok: Boolean
}

"Данные конструкции и стороны конструкции"
type ConstructionSideInfo {
  "Адрес конструкции"
  address: String
  "Название типа рекламной стороны конструкции"
  advertisingSide: String
  "Код рекламной стороны конструкции"
  advertisingSideCode: String
  "Город конструкции"
  city: String
  "Код стороны конструкции либо код конструкции"
  code: String
  "Идентификатор конструкции"
  constructionId: String
  "Район конструкции"
  district: String
  "Семейство конструкции"
  family: String
  "Формат конструкции"
  format: String
  "РТС / НОН РТС"
  isNonRts: Boolean
  "Модель конструкции"
  model: String
  "Наименование владельца"
  ownerTitle: String
  "Почтовый код конструкции"
  postcode: String
  "Название типа стороны конструкции"
  side: String
  "Код стороны конструкции"
  sideCode: String
  "Размер стороны конструкции"
  size: String
  "Наличие освещения"
  statusConnection: Boolean
  "Подсемейство конструкции"
  underfamily: String
}

"BASE64-закодированное сообщение с данными и информацей о пагинации"
type ContentFieldConnection {
  "base64-закодированное protobuf-сообщение с данными"
  content: String
  "Данные пагинации"
  pageInfo: PageInfoApi
}

"JSON-закодированное сообщение с данными и информацей о пагинации"
type ContentJSONFieldConnection {
  "json-закодированное сообщение с данными"
  content: String
  "Данные пагинации"
  pageInfo: PageInfoApi
}

type ContractType {
  "Идентификатор договора"
  id: ID
}

type CountOfMountings {
  "Количество незавершенных общих задач"
  countOfCommonTasks: Int
  "Количество незавершенных монтажей"
  countOfMountings: Int
}

"Создать Рекламную сторону"
type CreateAdvertisingsideMutation {
  advertisingSide: VAdvertisingSideNode
}

"Создать Рекламную промо-компания"
type CreateAdvertpromocompanyMutation {
  advertPromoCompany: VAdvertPromoCompanyOptimizedNode
}

"Создать Агентскую комиссия"
type CreateAgencycommissionMutation {
  agencyCommission: VAgencyCommissionNode
}

"Создать Приложение к договору"
type CreateAppendixMutation {
  appendix: VAppendixOptimizedNode
}

"Создать Бренд"
type CreateBrandMutation {
  brand: VBrandOptimizedNode
}

"Создать Изображение бренда"
type CreateBrandimageMutation {
  brandImage: VBrandImageNode
}

"Создать Город"
type CreateCityMutation {
  city: VCityNode
}

"Создать Тип клиента"
type CreateClienttypeMutation {
  clientType: VClientTypeNode
}

"Создать Конструкцию"
type CreateConstructionMutation {
  construction: VConstructionOptimizedNode
}

"Создать Construction notification"
type CreateConstructionnotificationMutation {
  constructionNotification: VConstructionNotificationOptimizedNode
}

"Создать Сторону конструкции"
type CreateConstructionsideMutation {
  constructionSide: VConstructionSideOptimizedNode
}

"Создать Контактное лицо"
type CreateContactpersonMutation {
  contactPerson: VContactPersonNode
}

"Создать Договор"
type CreateContractMutation {
  contract: VContractOptimizedNode
}

"Создать Тип договора"
type CreateContracttypeMutation {
  contractType: VContractTypeNode
}

"Создать Страну"
type CreateCountryMutation {
  country: VCountryNode
}

"Создать Экипаж"
type CreateCrewMutation {
  crew: VCrewOptimizedNode
}

"Создать Дизайн"
type CreateDesignMutation {
  design: VDesignNode
}

"Создать Район"
type CreateDistrictMutation {
  district: VDistrictNode
}

"Создать Должность"
type CreateEmployeepositionMutation {
  employeePosition: VEmployeePositionNode
}

"Создать Семейство конструкции"
type CreateFamilyconstructionMutation {
  familyConstruction: VFamilyConstructionNode
}

"Создать Формат"
type CreateFormatMutation {
  format: VFormatNode
}

"Создать Адресного справочник"
type CreateLocaddressMutation {
  addresses: VAddressesNode
}

"Создать Местоположение"
type CreateLocationMutation {
  location: VLocationOptimizedNode
}

"Создать Модель конструкции"
type CreateModelconstructionMutation {
  modelConstruction: VModelConstructionNode
}

"Создать Монтаж"
type CreateMountingMutation {
  mounting: VMountingNode
}

type CreateMountingTasksForProject {
  "Созданные монтажные задачи"
  ids: [ID]
  "Количество бронирований, для которых уже существуют монтажные задачи"
  skippedReservationsCount: Int
}

"Создать Фотоотчёт о монтаже"
type CreateMountingphotoMutation {
  mountingPhoto: VMountingPhotoNode
}

"Создать Ремонтно-монтажную работу"
type CreateMountingtaskMutation {
  mountingTask: VMountingTaskNode
}

"Создать Уведомление"
type CreateNotificationMutation {
  notification: VNotificationOptimizedNode
}

"Создать Помеху"
type CreateObstructionMutation {
  obstruction: VObstructionNode
}

type CreateOrUpdateReservation {
  "Идентификаторы броней, которые не удалось изменить"
  badReservations: [ID]
  "Идентификаторы сторон для которых бронь создать не удалось"
  badSides: [ID]
  "Идентификатор обновленного приложения"
  changedAppendix: ID
  "Идентификатор обновленного проекта"
  changedProject: ID
  "Идентификаторы созданных броней"
  createdReservations: [ID]
  ok: Boolean
  "Идентификаторы обновленных броней"
  updatedReservations: [ID]
}

"Создать Контрагента"
type CreatePartnerMutation {
  partner: VPartnerOptimizedNode
}

"Создать Тип контрагента"
type CreatePartnertypeMutation {
  partnerType: VPartnerTypeNode
}

"Создать Почтовый индекс"
type CreatePostcodeMutation {
  postcode: VPostcodeNode
}

"Создать Проект"
type CreateProjectMutation {
  project: VProjectNode
}

"Создать Назначение стороны"
type CreatePurposesideMutation {
  purposeSide: VPurposeSideNode
}

"Создать Бронирование"
type CreateReservationMutation {
  reservation: VReservationOptimizedNode
}

type CreateReservationPackage {
  "Стороны, для которых не установлена бронь"
  badSides: [ID]
  "Количество сторон, для которых не установлена бронь"
  badSidesCount: Int
  "Идентификаторы созданных броней"
  createdReservations: [ID]
  ok: Boolean
  "Идентификатор брони пакета"
  reservationId: ID
}

"Создать Вид бронирования"
type CreateReservationtypeMutation {
  reservationType: VReservationTypeNode
}

"Создать Дополнительные расходы (РТС)"
type CreateSalesadditionalcostMutation {
  additionalCosts: VAdditionalCostsNode
}

"Создать Счёт"
type CreateSalesinvoiceMutation {
  invoice: VInvoiceNode
}

"Создать Дополнительный расход НОН РТС"
type CreateSalesnonrtsMutation {
  estimateNonRts: VEstimateNonRtsNode
}

"Создать Стоимость рекламного размещения по прайсу"
type CreateSalesplacementpriceMutation {
  placementPrice: VPlacementPriceNode
}

"Создать Сторону"
type CreateSideMutation {
  side: VSideNode
}

"Создать Статические, конфигурационные доп. расходы"
type CreateStaticadditionalcostsMutation {
  staticAdditionalCosts: VStaticAdditionalCostsNode
}

"Создать Техническую проблему"
type CreateTechproblemMutation {
  techProblems: VTechProblemsNode
}

"Создать Подсемейство конструкции"
type CreateUnderfamilyconstructionMutation {
  underFamilyConstruction: VUnderFamilyConstructionNode
}

"Создать Пользователя"
type CreateUserMutation {
  customUser: VCustomUserNode
}

"Создать Группу"
type CreateUsergroupMutation {
  group: VGroupNode
}

"Создать Право"
type CreateUserpermissionMutation {
  permission: VPermissionNode
}

"Создать Сектор деятельности"
type CreateWorkingsectorMutation {
  workingSector: VWorkingSectorNode
}

"Создать пакетно Рекламную сторону"
type CreatebatchAdvertisingsideMutation {
  advertisingSides: [VAdvertisingSideNode]
}

"Создать пакетно Рекламную промо-компания"
type CreatebatchAdvertpromocompanyMutation {
  advertPromoCompanys: [VAdvertPromoCompanyOptimizedNode]
}

"Создать пакетно Агентскую комиссия"
type CreatebatchAgencycommissionMutation {
  agencyCommissions: [VAgencyCommissionNode]
}

"Создать пакетно Приложение к договору"
type CreatebatchAppendixMutation {
  appendixs: [VAppendixOptimizedNode]
}

"Создать пакетно Бренд"
type CreatebatchBrandMutation {
  brands: [VBrandOptimizedNode]
}

"Создать пакетно Изображение бренда"
type CreatebatchBrandimageMutation {
  brandImages: [VBrandImageNode]
}

"Создать пакетно Город"
type CreatebatchCityMutation {
  citys: [VCityNode]
}

"Создать пакетно Тип клиента"
type CreatebatchClienttypeMutation {
  clientTypes: [VClientTypeNode]
}

"Создать пакетно Конструкцию"
type CreatebatchConstructionMutation {
  constructions: [VConstructionOptimizedNode]
}

"Создать пакетно Construction notification"
type CreatebatchConstructionnotificationMutation {
  constructionNotifications: [VConstructionNotificationOptimizedNode]
}

"Создать пакетно Сторону конструкции"
type CreatebatchConstructionsideMutation {
  constructionSides: [VConstructionSideOptimizedNode]
}

"Создать пакетно Контактное лицо"
type CreatebatchContactpersonMutation {
  contactPersons: [VContactPersonNode]
}

"Создать пакетно Договор"
type CreatebatchContractMutation {
  contracts: [VContractOptimizedNode]
}

"Создать пакетно Тип договора"
type CreatebatchContracttypeMutation {
  contractTypes: [VContractTypeNode]
}

"Создать пакетно Страну"
type CreatebatchCountryMutation {
  countrys: [VCountryNode]
}

"Создать пакетно Экипаж"
type CreatebatchCrewMutation {
  crews: [VCrewOptimizedNode]
}

"Создать пакетно Дизайн"
type CreatebatchDesignMutation {
  designs: [VDesignNode]
}

"Создать пакетно Район"
type CreatebatchDistrictMutation {
  districts: [VDistrictNode]
}

"Создать пакетно Должность"
type CreatebatchEmployeepositionMutation {
  employeePositions: [VEmployeePositionNode]
}

"Создать пакетно Семейство конструкции"
type CreatebatchFamilyconstructionMutation {
  familyConstructions: [VFamilyConstructionNode]
}

"Создать пакетно Формат"
type CreatebatchFormatMutation {
  formats: [VFormatNode]
}

"Создать пакетно Адресного справочник"
type CreatebatchLocaddressMutation {
  addressess: [VAddressesNode]
}

"Создать пакетно Местоположение"
type CreatebatchLocationMutation {
  locations: [VLocationOptimizedNode]
}

"Создать пакетно Модель конструкции"
type CreatebatchModelconstructionMutation {
  modelConstructions: [VModelConstructionNode]
}

"Создать пакетно Монтаж"
type CreatebatchMountingMutation {
  mountings: [VMountingNode]
}

"Создать пакетно Фотоотчёт о монтаже"
type CreatebatchMountingphotoMutation {
  mountingPhotos: [VMountingPhotoNode]
}

"Создать пакетно Ремонтно-монтажную работу"
type CreatebatchMountingtaskMutation {
  mountingTasks: [VMountingTaskNode]
}

"Создать пакетно Уведомление"
type CreatebatchNotificationMutation {
  notifications: [VNotificationOptimizedNode]
}

"Создать пакетно Помеху"
type CreatebatchObstructionMutation {
  obstructions: [VObstructionNode]
}

"Создать пакетно Контрагента"
type CreatebatchPartnerMutation {
  partners: [VPartnerOptimizedNode]
}

"Создать пакетно Тип контрагента"
type CreatebatchPartnertypeMutation {
  partnerTypes: [VPartnerTypeNode]
}

"Создать пакетно Почтовый индекс"
type CreatebatchPostcodeMutation {
  postcodes: [VPostcodeNode]
}

"Создать пакетно Проект"
type CreatebatchProjectMutation {
  projects: [VProjectNode]
}

"Создать пакетно Назначение стороны"
type CreatebatchPurposesideMutation {
  purposeSides: [VPurposeSideNode]
}

"Создать пакетно Бронирование"
type CreatebatchReservationMutation {
  reservations: [VReservationOptimizedNode]
}

"Создать пакетно Вид бронирования"
type CreatebatchReservationtypeMutation {
  reservationTypes: [VReservationTypeNode]
}

"Создать пакетно Дополнительные расходы (РТС)"
type CreatebatchSalesadditionalcostMutation {
  additionalCostss: [VAdditionalCostsNode]
}

"Создать пакетно Счёт"
type CreatebatchSalesinvoiceMutation {
  invoices: [VInvoiceNode]
}

"Создать пакетно Дополнительный расход НОН РТС"
type CreatebatchSalesnonrtsMutation {
  estimateNonRtss: [VEstimateNonRtsNode]
}

"Создать пакетно Стоимость рекламного размещения по прайсу"
type CreatebatchSalesplacementpriceMutation {
  placementPrices: [VPlacementPriceNode]
}

"Создать пакетно Сторону"
type CreatebatchSideMutation {
  sides: [VSideNode]
}

"Создать пакетно Статические, конфигурационные доп. расходы"
type CreatebatchStaticadditionalcostsMutation {
  staticAdditionalCostss: [VStaticAdditionalCostsNode]
}

"Создать пакетно Техническую проблему"
type CreatebatchTechproblemMutation {
  techProblemss: [VTechProblemsNode]
}

"Создать пакетно Подсемейство конструкции"
type CreatebatchUnderfamilyconstructionMutation {
  underFamilyConstructions: [VUnderFamilyConstructionNode]
}

"Создать пакетно Пользователя"
type CreatebatchUserMutation {
  customUsers: [VCustomUserNode]
}

"Создать пакетно Группу"
type CreatebatchUsergroupMutation {
  groups: [VGroupNode]
}

"Создать пакетно Право"
type CreatebatchUserpermissionMutation {
  permissions: [VPermissionNode]
}

"Создать пакетно Сектор деятельности"
type CreatebatchWorkingsectorMutation {
  workingSectors: [VWorkingSectorNode]
}

"""

Delete account permanently or make `user.is_active=False`.

The behavior is defined on settings.
Anyway user refresh tokens are revoked.

User must be verified and confirm password.
"""
type DeleteAccount {
  errors: ExpectedErrorType
  success: Boolean
}

"Удалить Рекламную сторону"
type DeleteAdvertisingsideMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Рекламную промо-компания"
type DeleteAdvertpromocompanyMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Агентскую комиссия"
type DeleteAgencycommissionMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Приложение к договору"
type DeleteAppendixMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Бренд"
type DeleteBrandMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Изображение бренда"
type DeleteBrandimageMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Город"
type DeleteCityMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Тип клиента"
type DeleteClienttypeMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Конструкцию"
type DeleteConstructionMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Construction notification"
type DeleteConstructionnotificationMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Сторону конструкции"
type DeleteConstructionsideMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Контактное лицо"
type DeleteContactpersonMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Договор"
type DeleteContractMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Тип договора"
type DeleteContracttypeMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Страну"
type DeleteCountryMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Экипаж"
type DeleteCrewMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Дизайн"
type DeleteDesignMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Район"
type DeleteDistrictMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Должность"
type DeleteEmployeepositionMutation {
  deletedId: ID
  found: Boolean
}

type DeleteEstimateItem {
  ok: Boolean
}

"Удалить Семейство конструкции"
type DeleteFamilyconstructionMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Формат"
type DeleteFormatMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Адресного справочник"
type DeleteLocaddressMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Местоположение"
type DeleteLocationMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Модель конструкции"
type DeleteModelconstructionMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Монтаж"
type DeleteMountingMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Фотоотчёт о монтаже"
type DeleteMountingphotoMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Ремонтно-монтажную работу"
type DeleteMountingtaskMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Уведомление"
type DeleteNotificationMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Помеху"
type DeleteObstructionMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Контрагента"
type DeletePartnerMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Тип контрагента"
type DeletePartnertypeMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Почтовый индекс"
type DeletePostcodeMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Проект"
type DeleteProjectMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Назначение стороны"
type DeletePurposesideMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Бронирование"
type DeleteReservationMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Вид бронирования"
type DeleteReservationtypeMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Дополнительные расходы (РТС)"
type DeleteSalesadditionalcostMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Счёт"
type DeleteSalesinvoiceMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Дополнительный расход НОН РТС"
type DeleteSalesnonrtsMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Стоимость рекламного размещения по прайсу"
type DeleteSalesplacementpriceMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Сторону"
type DeleteSideMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Статические, конфигурационные доп. расходы"
type DeleteStaticadditionalcostsMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Техническую проблему"
type DeleteTechproblemMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Подсемейство конструкции"
type DeleteUnderfamilyconstructionMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Пользователя"
type DeleteUserMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Группу"
type DeleteUsergroupMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Право"
type DeleteUserpermissionMutation {
  deletedId: ID
  found: Boolean
}

"Удалить Сектор деятельности"
type DeleteWorkingsectorMutation {
  deletedId: ID
  found: Boolean
}

"Удалить пакетно Рекламную сторону"
type DeletebatchAdvertisingsideMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Рекламную промо-компания"
type DeletebatchAdvertpromocompanyMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Агентскую комиссия"
type DeletebatchAgencycommissionMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Приложение к договору"
type DeletebatchAppendixMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Бренд"
type DeletebatchBrandMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Изображение бренда"
type DeletebatchBrandimageMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Город"
type DeletebatchCityMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Тип клиента"
type DeletebatchClienttypeMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Конструкцию"
type DeletebatchConstructionMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Construction notification"
type DeletebatchConstructionnotificationMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Сторону конструкции"
type DeletebatchConstructionsideMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Контактное лицо"
type DeletebatchContactpersonMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Договор"
type DeletebatchContractMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Тип договора"
type DeletebatchContracttypeMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Страну"
type DeletebatchCountryMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Экипаж"
type DeletebatchCrewMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Дизайн"
type DeletebatchDesignMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Район"
type DeletebatchDistrictMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Должность"
type DeletebatchEmployeepositionMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Семейство конструкции"
type DeletebatchFamilyconstructionMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Формат"
type DeletebatchFormatMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Адресного справочник"
type DeletebatchLocaddressMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Местоположение"
type DeletebatchLocationMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Модель конструкции"
type DeletebatchModelconstructionMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Монтаж"
type DeletebatchMountingMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Фотоотчёт о монтаже"
type DeletebatchMountingphotoMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Ремонтно-монтажную работу"
type DeletebatchMountingtaskMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Уведомление"
type DeletebatchNotificationMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Помеху"
type DeletebatchObstructionMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Контрагента"
type DeletebatchPartnerMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Тип контрагента"
type DeletebatchPartnertypeMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Почтовый индекс"
type DeletebatchPostcodeMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Проект"
type DeletebatchProjectMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Назначение стороны"
type DeletebatchPurposesideMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Бронирование"
type DeletebatchReservationMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Вид бронирования"
type DeletebatchReservationtypeMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Дополнительные расходы (РТС)"
type DeletebatchSalesadditionalcostMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Счёт"
type DeletebatchSalesinvoiceMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Дополнительный расход НОН РТС"
type DeletebatchSalesnonrtsMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Стоимость рекламного размещения по прайсу"
type DeletebatchSalesplacementpriceMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Сторону"
type DeletebatchSideMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Статические, конфигурационные доп. расходы"
type DeletebatchStaticadditionalcostsMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Техническую проблему"
type DeletebatchTechproblemMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Подсемейство конструкции"
type DeletebatchUnderfamilyconstructionMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Пользователя"
type DeletebatchUserMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Группу"
type DeletebatchUsergroupMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Право"
type DeletebatchUserpermissionMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

"Удалить пакетно Сектор деятельности"
type DeletebatchWorkingsectorMutation {
  deletedIds: [ID]
  deletionCount: Int
  missedIds: [ID]
}

type DownloadAdvertisingSidesAndAppendicesInfo {
  "Файл *.xlsx в кодировке Base64"
  file: String
  ok: Boolean
}

type DownloadAdvertisingSidesInfo {
  "Файл *.xlsx в кодировке Base64"
  file: String
  ok: Boolean
}

type DownloadAppendicesInfo {
  "Файл *.xlsx в кодировке Base64"
  file: String
  ok: Boolean
}

type DownloadBrandsInfo {
  "Файл *.xlsx в кодировке Base64"
  file: String
  ok: Boolean
}

type DownloadConstractsInfo {
  "Файл *.xlsx в кодировке Base64"
  file: String
  ok: Boolean
}

type DownloadConstructionsInfo {
  "Файл *.xlsx в кодировке Base64"
  file: String
  ok: Boolean
}

type DownloadEstimateReportInfo {
  "Файл *.xlsx в кодировке Base64"
  file: String
  ok: Boolean
}

type DownloadMProjectsInfo {
  "Файл *.xlsx в кодировке Base64"
  file: String
  ok: Boolean
}

type DownloadMountingsInfo {
  "Файл *.xlsx в кодировке Base64"
  file: String
  ok: Boolean
}

type DownloadPackagesInfo {
  "Файл *.xlsx в кодировке Base64"
  file: String
  ok: Boolean
}

type DownloadPartnersInfo {
  "Файл *.xlsx в кодировке Base64"
  file: String
  ok: Boolean
}

type DownloadProjectsInfo {
  "Файл *.xlsx в кодировке Base64"
  file: String
  ok: Boolean
}

type DownloadReservationsInfo {
  "Файл *.xlsx в кодировке Base64"
  file: String
  ok: Boolean
}

type EditNonRtsItems {
  ok: Boolean
}

type FormatTitleConnection {
  count: Int
  "Contains the nodes in this connection."
  edges: [FormatTitleEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `FormatTitle` and its cursor."
type FormatTitleEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: FormatTitleType
}

type FormatTitleQuery {
  formatTitles(after: String, before: String, first: Int, last: Int): FormatTitleConnection
}

type FormatTitleType implements Node {
  code: String
  "The ID of the object."
  id: ID!
  title: String
}

type GenerateAppendixDocx {
  "base64-закодированное protobuf-сообщение с данными"
  content: String
}

"Экипаж, заданный для монтажной задачи"
type MountingCrewField {
  "Город экипажа"
  city: String
  "Имя монтажника"
  name: String
  "Номер экипажа"
  num: String
  "Номер телефона монтажника"
  phone: String
}

"Дизайн, заданный для монтажной задачи"
type MountingDesignField {
  "Идентификатор дизайна"
  id: ID
  "URL-адрес изображения дизайна монтажа"
  img: String
  "Дата начала действия дизайна"
  startedAt: DateTime
  "Название дизайна"
  title: String
}

"Дизайн, заданный для монтажной задачи (экран проекта монтажей)"
type MountingDesignProjectCard {
  "Идентификатор дизайна"
  id: ID
  "URL-адрес изображения дизайна монтажа"
  img: String
  "Дата начала действия дизайна"
  startedAt: DateTime
  "Название дизайна"
  title: String
}

"Ремонтно-монтажная задача"
type MountingField {
  "Архивная задача"
  archived: Boolean
  "Комментарий"
  comment: String
  "Тип общей задачи, null если монтажная задача"
  commonTaskType: String
  "Данные конструкции и стороны конструкции"
  constructionSideInfo: ConstructionSideInfo
  "Экипаж"
  crew: MountingCrewField
  "Монтируемый дизайн"
  design: MountingDesignField
  "Выгружено ранее"
  downloadedEarly: DateTime
  "Дата демонтажа"
  endMounting: DateTime
  "Идентификатор задачи"
  id: ID
  "true - задача является общей, false - задача является монтажем"
  isCommonTask: Boolean
  "Монтаж выполнен"
  mountingDone: Boolean
  "Приоритет монтажа"
  mountingRange: EnumMountingRange
  "Название монтажной задачи"
  name: String
  "Фотографии фотоотчета"
  photos: [MountingPhotos]
  "Проект"
  project: MountingProjectField
  "Дата монтажа"
  startMounting: DateTime
  "Подключено / Не подключено"
  statusConnection: Boolean
  "Демонтируемый дизайн"
  unmountingDesign: MountingDesignField
  "Демонтаж выполнен"
  unmountingDone: Boolean
}

"Ремонтно-монтажные задачи"
type MountingFieldConnection {
  "Ремонтно-монтажные задачи"
  content: [MountingField]
  "Данные пагинации"
  pageInfo: PageInfoApi
}

"Фотоотчеты"
type MountingPhotos {
  "URL фотографии фотоотчета"
  photo: String
  "Дата фотографии"
  photoDate: DateTime
  "Номер фото"
  photoNumber: String
}

"Список рекламных компаний в проекте"
type MountingProjectCardCompanies {
  "Дизайнов в архиве"
  archivedDesigns: Int
  "Идентификатор города"
  cityId: ID
  "Наименование города"
  cityTitle: ID
  "Идентификатор рекламной компании"
  id: ID
  "Идентификатор проекта"
  projectId: ID
  "Дата начала рекламной компании"
  start: DateTime
  "Наименование рекламной компании"
  title: String
  "Дизайнов всего"
  totalDesigns: Int
}

"Список рекламных компаний для экрана проекта монтажа"
type MountingProjectCardCompaniesFieldConnection {
  "Список рекламных компаний для экрана проекта монтажа"
  content: [MountingProjectCardCompanies]
  "Данные пагинации"
  pageInfo: PageInfoApi
}

"Бронирование с данными о монтаже"
type MountingProjectCardFieldConnection {
  "Бронирование с данными о монтаже"
  content: [AnswerMountingProjectCardField]
  "Данные пагинации"
  pageInfo: PageInfoApi
}

"Монтажная задача"
type MountingProjectCardMountingTaskItem {
  "Архивная задача"
  archived: Boolean
  "Комментарий"
  comment: String
  "Экипаж"
  crew: MountingCrewField
  "Монтируемый дизайн"
  design: MountingDesignField
  "Выгружено ранее"
  downloadedEarly: DateTime
  "Дата демонтажа"
  endMounting: DateTime
  "Идентификатор задачи"
  id: ID
  "Монтаж выполнен"
  mountingDone: Boolean
  "Приоритет монтажа"
  mountingRange: EnumMountingRange
  "Название типа задачи"
  mountingTaskTitle: String
  "Фотографии фотоотчета"
  photos: [MountingPhotos]
  "Дата монтажа"
  startMounting: DateTime
  "Демонтируемый дизайн"
  unmountingDesign: MountingDesignField
  "Демонтаж выполнен"
  unmountingDone: Boolean
}

"Проект и приложение, для которых создана монтажная задача"
type MountingProjectField {
  "Код приложения к проекту"
  appendixCode: String
  "Код проекта"
  code: String
  "Название проекта"
  title: String
}

"Список проектов на монтаж"
type MountingProjectsField {
  "Наименование бренда"
  brandTitle: String
  "Идентификатор города"
  cityId: ID
  "Наименование города"
  cityTitle: String
  "Наименование клиента"
  clientTitle: String
  "Код проекта"
  code: String
  "Идентификатор проекта"
  id: ID
  "Номер в году"
  numInYear: Int
  "Всего сторон"
  sidesAll: Int
  "Распределенных сторон"
  sidesDistributed: Int
  "Нераспределенных сторон"
  sidesNondistributed: Int
  "Проданных сторон"
  sidesSaled: Int
  "Дата начала"
  startDate: DateTime
  "Название проекта"
  title: String
}

"Список проектов в разрезе монтажных задач"
type MountingProjectsFieldConnection {
  "Список проектов для карточки монтажей"
  content: [MountingProjectsField]
  "Данные пагинации"
  pageInfo: PageInfoApi
}

type Mutation {
  "Добавить строки из сметы проекта в смету приложения"
  addEstimateItemToAppendix(
    "Идентификатор приложения"
    appendixId: ID!,
    "Раздел сметы (бронирования, доп. расходы РТС, НОНРТС)"
    estimateSection: String!,
    "Идентификаторы элементов"
    ids: [ID],
    "Добавить все элементы"
    isAll: Boolean,
    "Идентификатор проекта"
    projectId: ID!
  ): AddEstimateItemToAppendix
  """

  Archive account and revoke refresh tokens.

  User must be verified and confirm password.
  """
  archiveAccount(password: String!): ArchiveAccount
  "Добавить стороны конструкций в пакет"
  batchAddConstructionSidesToPackage(
    "Список идентификаторов сторон конструкций добавляемых в пакет"
    constructionSidesIds: [ID]!,
    "Идентификатор пакета"
    id: ID!
  ): BatchAddConstructionSidesToPackage
  "Создать Рекламную промо-компания"
  createAdvertPromoCompany(input: CreateAdvertPromoCompanyInput!): CreateAdvertpromocompanyMutation
  "Создать Рекламную сторону"
  createAdvertisingSide(input: CreateAdvertisingSideInput!): CreateAdvertisingsideMutation
  "Создать Агентскую комиссия"
  createAgencyCommission(input: CreateAgencyCommissionInput!): CreateAgencycommissionMutation
  "Создать Приложение к договору"
  createAppendix(input: CreateAppendixInput!): CreateAppendixMutation
  "Создать пакетно Рекламную промо-компания"
  createBatchAdvertPromoCompany(input: [BatchCreateAdvertPromoCompanyInput]!): CreatebatchAdvertpromocompanyMutation
  "Создать пакетно Рекламную сторону"
  createBatchAdvertisingSide(input: [BatchCreateAdvertisingSideInput]!): CreatebatchAdvertisingsideMutation
  "Создать пакетно Агентскую комиссия"
  createBatchAgencyCommission(input: [BatchCreateAgencyCommissionInput]!): CreatebatchAgencycommissionMutation
  "Создать пакетно Приложение к договору"
  createBatchAppendix(input: [BatchCreateAppendixInput]!): CreatebatchAppendixMutation
  "Создать пакетно Бренд"
  createBatchBrand(input: [BatchCreateBrandInput]!): CreatebatchBrandMutation
  "Создать пакетно Изображение бренда"
  createBatchBrandImage(input: [BatchCreateBrandImageInput]!): CreatebatchBrandimageMutation
  "Создать пакетно Город"
  createBatchCity(input: [BatchCreateCityInput]!): CreatebatchCityMutation
  "Создать пакетно Тип клиента"
  createBatchClientType(input: [BatchCreateClientTypeInput]!): CreatebatchClienttypeMutation
  "Создать пакетно Конструкцию"
  createBatchConstruction(input: [BatchCreateConstructionInput]!): CreatebatchConstructionMutation
  "Создать пакетно Construction notification"
  createBatchConstructionNotification(input: [BatchCreateConstructionNotificationInput]!): CreatebatchConstructionnotificationMutation
  "Создать пакетно Сторону конструкции"
  createBatchConstructionSide(input: [BatchCreateConstructionSideInput]!): CreatebatchConstructionsideMutation
  "Создать пакетно Контактное лицо"
  createBatchContactPerson(input: [BatchCreateContactPersonInput]!): CreatebatchContactpersonMutation
  "Создать пакетно Договор"
  createBatchContract(input: [BatchCreateContractInput]!): CreatebatchContractMutation
  "Создать пакетно Тип договора"
  createBatchContractType(input: [BatchCreateContractTypeInput]!): CreatebatchContracttypeMutation
  "Создать пакетно Страну"
  createBatchCountry(input: [BatchCreateCountryInput]!): CreatebatchCountryMutation
  "Создать пакетно Экипаж"
  createBatchCrew(input: [BatchCreateCrewInput]!): CreatebatchCrewMutation
  "Создать пакетно Дизайн"
  createBatchDesign(input: [BatchCreateDesignInput]!): CreatebatchDesignMutation
  "Создать пакетно Район"
  createBatchDistrict(input: [BatchCreateDistrictInput]!): CreatebatchDistrictMutation
  "Создать пакетно Должность"
  createBatchEmployeePosition(input: [BatchCreateEmployeePositionInput]!): CreatebatchEmployeepositionMutation
  "Создать пакетно Семейство конструкции"
  createBatchFamilyConstruction(input: [BatchCreateFamilyConstructionInput]!): CreatebatchFamilyconstructionMutation
  "Создать пакетно Формат"
  createBatchFormat(input: [BatchCreateFormatInput]!): CreatebatchFormatMutation
  "Создать пакетно Адресного справочник"
  createBatchLocAddress(input: [BatchCreateAddressesInput]!): CreatebatchLocaddressMutation
  "Создать пакетно Местоположение"
  createBatchLocation(input: [BatchCreateLocationInput]!): CreatebatchLocationMutation
  "Создать пакетно Модель конструкции"
  createBatchModelConstruction(input: [BatchCreateModelConstructionInput]!): CreatebatchModelconstructionMutation
  "Создать пакетно Монтаж"
  createBatchMounting(input: [BatchCreateMountingInput]!): CreatebatchMountingMutation
  "Создать пакетно Фотоотчёт о монтаже"
  createBatchMountingPhoto(input: [BatchCreateMountingPhotoInput]!): CreatebatchMountingphotoMutation
  "Создать пакетно Ремонтно-монтажную работу"
  createBatchMountingTask(input: [BatchCreateMountingTaskInput]!): CreatebatchMountingtaskMutation
  "Создать пакетно Уведомление"
  createBatchNotification(input: [BatchCreateNotificationInput]!): CreatebatchNotificationMutation
  "Создать пакетно Помеху"
  createBatchObstruction(input: [BatchCreateObstructionInput]!): CreatebatchObstructionMutation
  "Создать пакетно Контрагента"
  createBatchPartner(input: [BatchCreatePartnerInput]!): CreatebatchPartnerMutation
  "Создать пакетно Тип контрагента"
  createBatchPartnerType(input: [BatchCreatePartnerTypeInput]!): CreatebatchPartnertypeMutation
  "Создать пакетно Почтовый индекс"
  createBatchPostcode(input: [BatchCreatePostcodeInput]!): CreatebatchPostcodeMutation
  "Создать пакетно Проект"
  createBatchProject(input: [BatchCreateProjectInput]!): CreatebatchProjectMutation
  "Создать пакетно Назначение стороны"
  createBatchPurposeSide(input: [BatchCreatePurposeSideInput]!): CreatebatchPurposesideMutation
  "Создать пакетно Бронирование"
  createBatchReservation(input: [BatchCreateReservationInput]!): CreatebatchReservationMutation
  "Создать пакетно Вид бронирования"
  createBatchReservationType(input: [BatchCreateReservationTypeInput]!): CreatebatchReservationtypeMutation
  "Создать пакетно Дополнительные расходы (РТС)"
  createBatchSalesAdditionalCost(input: [BatchCreateAdditionalCostsInput]!): CreatebatchSalesadditionalcostMutation
  "Создать пакетно Счёт"
  createBatchSalesInvoice(input: [BatchCreateInvoiceInput]!): CreatebatchSalesinvoiceMutation
  "Создать пакетно Дополнительный расход НОН РТС"
  createBatchSalesNonrts(input: [BatchCreateEstimateNonRtsInput]!): CreatebatchSalesnonrtsMutation
  "Создать пакетно Стоимость рекламного размещения по прайсу"
  createBatchSalesPlacementPrice(input: [BatchCreatePlacementPriceInput]!): CreatebatchSalesplacementpriceMutation
  "Создать пакетно Сторону"
  createBatchSide(input: [BatchCreateSideInput]!): CreatebatchSideMutation
  "Создать пакетно Статические, конфигурационные доп. расходы"
  createBatchStaticAdditionalCosts(input: [BatchCreateStaticAdditionalCostsInput]!): CreatebatchStaticadditionalcostsMutation
  "Создать пакетно Техническую проблему"
  createBatchTechProblem(input: [BatchCreateTechProblemsInput]!): CreatebatchTechproblemMutation
  "Создать пакетно Подсемейство конструкции"
  createBatchUnderFamilyConstruction(input: [BatchCreateUnderFamilyConstructionInput]!): CreatebatchUnderfamilyconstructionMutation
  "Создать пакетно Пользователя"
  createBatchUser(input: [BatchCreateCustomUserInput]!): CreatebatchUserMutation
  "Создать пакетно Группу"
  createBatchUserGroup(input: [BatchCreateGroupInput]!): CreatebatchUsergroupMutation
  "Создать пакетно Право"
  createBatchUserPermission(input: [BatchCreatePermissionInput]!): CreatebatchUserpermissionMutation
  "Создать пакетно Сектор деятельности"
  createBatchWorkingSector(input: [BatchCreateWorkingSectorInput]!): CreatebatchWorkingsectorMutation
  "Создать Бренд"
  createBrand(input: CreateBrandInput!): CreateBrandMutation
  "Создать Изображение бренда"
  createBrandImage(input: CreateBrandImageInput!): CreateBrandimageMutation
  "Создать Город"
  createCity(input: CreateCityInput!): CreateCityMutation
  "Создать Тип клиента"
  createClientType(input: CreateClientTypeInput!): CreateClienttypeMutation
  "Создать Конструкцию"
  createConstruction(input: CreateConstructionInput!): CreateConstructionMutation
  "Создать Construction notification"
  createConstructionNotification(input: CreateConstructionNotificationInput!): CreateConstructionnotificationMutation
  "Создать Сторону конструкции"
  createConstructionSide(input: CreateConstructionSideInput!): CreateConstructionsideMutation
  "Создать Контактное лицо"
  createContactPerson(input: CreateContactPersonInput!): CreateContactpersonMutation
  "Создать Договор"
  createContract(input: CreateContractInput!): CreateContractMutation
  "Создать Тип договора"
  createContractType(input: CreateContractTypeInput!): CreateContracttypeMutation
  "Создать Страну"
  createCountry(input: CreateCountryInput!): CreateCountryMutation
  "Создать Экипаж"
  createCrew(input: CreateCrewInput!): CreateCrewMutation
  "Создать Дизайн"
  createDesign(input: CreateDesignInput!): CreateDesignMutation
  "Создать Район"
  createDistrict(input: CreateDistrictInput!): CreateDistrictMutation
  "Создать Должность"
  createEmployeePosition(input: CreateEmployeePositionInput!): CreateEmployeepositionMutation
  "Создать Семейство конструкции"
  createFamilyConstruction(input: CreateFamilyConstructionInput!): CreateFamilyconstructionMutation
  "Создать Формат"
  createFormat(input: CreateFormatInput!): CreateFormatMutation
  "Создать Адресного справочник"
  createLocAddress(input: CreateAddressesInput!): CreateLocaddressMutation
  "Создать Местоположение"
  createLocation(input: CreateLocationInput!): CreateLocationMutation
  "Создать Модель конструкции"
  createModelConstruction(input: CreateModelConstructionInput!): CreateModelconstructionMutation
  "Создать Монтаж"
  createMounting(input: CreateMountingInput!): CreateMountingMutation
  "Создать Фотоотчёт о монтаже"
  createMountingPhoto(input: CreateMountingPhotoInput!): CreateMountingphotoMutation
  "Создать Ремонтно-монтажную работу"
  createMountingTask(input: CreateMountingTaskInput!): CreateMountingtaskMutation
  "Создать монтажные задачи для всего проекта"
  createMountingTasksForProject(
    "Дизайн"
    designId: ID!,
    "Дата демонтажа"
    endMounting: DateTime,
    "Идентификатор проекта"
    id: ID!,
    "Дата монтажа"
    startMounting: DateTime
  ): CreateMountingTasksForProject
  "Создать Уведомление"
  createNotification(input: CreateNotificationInput!): CreateNotificationMutation
  "Создать Помеху"
  createObstruction(input: CreateObstructionInput!): CreateObstructionMutation
  "Добавить или обновить список бронирований"
  createOrUpdateReservation(
    "Идентификатор приложения"
    appendix: ID,
    "Нужен ли брендинг или нет"
    branding: Boolean,
    "Дата начала бронирования"
    dateFrom: DateTime!,
    "Дата окончания бронирования"
    dateTo: DateTime!,
    "Идентификаторы бронирований "
    ids: [ID],
    "Идентификатор проекта"
    project: ID!,
    "Тип бронирования"
    reservationType: ID,
    "Идентификаторы сторон конструкций"
    sidesIds: [ID]
  ): CreateOrUpdateReservation
  "Забронировать пакет"
  createPackageReservation(
    "Идентификатор приложения к договору"
    appendixId: ID,
    "Брендинг"
    branding: Boolean!,
    "Дата начала"
    dateFrom: DateTime!,
    "Дата окончания"
    dateTo: DateTime!,
    "Идентификатор пакета"
    id: ID!,
    "Идентификатор проекта"
    projectId: ID!,
    "Идентификатор типа резервирования"
    reservationTypeId: ID!
  ): CreateReservationPackage
  "Создать Контрагента"
  createPartner(input: CreatePartnerInput!): CreatePartnerMutation
  "Создать Тип контрагента"
  createPartnerType(input: CreatePartnerTypeInput!): CreatePartnertypeMutation
  "Создать Почтовый индекс"
  createPostcode(input: CreatePostcodeInput!): CreatePostcodeMutation
  "Создать Проект"
  createProject(input: CreateProjectInput!): CreateProjectMutation
  "Создать Назначение стороны"
  createPurposeSide(input: CreatePurposeSideInput!): CreatePurposesideMutation
  "Создать Бронирование"
  createReservation(input: CreateReservationInput!): CreateReservationMutation
  "Создать Вид бронирования"
  createReservationType(input: CreateReservationTypeInput!): CreateReservationtypeMutation
  "Создать Дополнительные расходы (РТС)"
  createSalesAdditionalCost(input: CreateAdditionalCostsInput!): CreateSalesadditionalcostMutation
  "Создать Счёт"
  createSalesInvoice(input: CreateInvoiceInput!): CreateSalesinvoiceMutation
  "Создать Дополнительный расход НОН РТС"
  createSalesNonrts(input: CreateEstimateNonRtsInput!): CreateSalesnonrtsMutation
  "Создать Стоимость рекламного размещения по прайсу"
  createSalesPlacementPrice(input: CreatePlacementPriceInput!): CreateSalesplacementpriceMutation
  "Создать Сторону"
  createSide(input: CreateSideInput!): CreateSideMutation
  "Создать Статические, конфигурационные доп. расходы"
  createStaticAdditionalCosts(input: CreateStaticAdditionalCostsInput!): CreateStaticadditionalcostsMutation
  "Создать Техническую проблему"
  createTechProblem(input: CreateTechProblemsInput!): CreateTechproblemMutation
  "Создать Подсемейство конструкции"
  createUnderFamilyConstruction(input: CreateUnderFamilyConstructionInput!): CreateUnderfamilyconstructionMutation
  "Создать Пользователя"
  createUser(input: CreateCustomUserInput!): CreateUserMutation
  "Создать Группу"
  createUserGroup(input: CreateGroupInput!): CreateUsergroupMutation
  "Создать Право"
  createUserPermission(input: CreatePermissionInput!): CreateUserpermissionMutation
  "Создать Сектор деятельности"
  createWorkingSector(input: CreateWorkingSectorInput!): CreateWorkingsectorMutation
  """

  Delete account permanently or make `user.is_active=False`.

  The behavior is defined on settings.
  Anyway user refresh tokens are revoked.

  User must be verified and confirm password.
  """
  deleteAccount(password: String!): DeleteAccount
  "Удалить Рекламную промо-компания"
  deleteAdvertPromoCompany(id: ID!): DeleteAdvertpromocompanyMutation
  "Удалить Рекламную сторону"
  deleteAdvertisingSide(id: ID!): DeleteAdvertisingsideMutation
  "Удалить Агентскую комиссия"
  deleteAgencyCommission(id: ID!): DeleteAgencycommissionMutation
  "Удалить Приложение к договору"
  deleteAppendix(id: ID!): DeleteAppendixMutation
  "Удалить пакетно Рекламную промо-компания"
  deleteBatchAdvertPromoCompany(ids: [ID]!): DeletebatchAdvertpromocompanyMutation
  "Удалить пакетно Рекламную сторону"
  deleteBatchAdvertisingSide(ids: [ID]!): DeletebatchAdvertisingsideMutation
  "Удалить пакетно Агентскую комиссия"
  deleteBatchAgencyCommission(ids: [ID]!): DeletebatchAgencycommissionMutation
  "Удалить пакетно Приложение к договору"
  deleteBatchAppendix(ids: [ID]!): DeletebatchAppendixMutation
  "Удалить пакетно Бренд"
  deleteBatchBrand(ids: [ID]!): DeletebatchBrandMutation
  "Удалить пакетно Изображение бренда"
  deleteBatchBrandImage(ids: [ID]!): DeletebatchBrandimageMutation
  "Удалить пакетно Город"
  deleteBatchCity(ids: [ID]!): DeletebatchCityMutation
  "Удалить пакетно Тип клиента"
  deleteBatchClientType(ids: [ID]!): DeletebatchClienttypeMutation
  "Удалить пакетно Конструкцию"
  deleteBatchConstruction(ids: [ID]!): DeletebatchConstructionMutation
  "Удалить пакетно Construction notification"
  deleteBatchConstructionNotification(ids: [ID]!): DeletebatchConstructionnotificationMutation
  "Удалить пакетно Сторону конструкции"
  deleteBatchConstructionSide(ids: [ID]!): DeletebatchConstructionsideMutation
  "Удалить пакетно Контактное лицо"
  deleteBatchContactPerson(ids: [ID]!): DeletebatchContactpersonMutation
  "Удалить пакетно Договор"
  deleteBatchContract(ids: [ID]!): DeletebatchContractMutation
  "Удалить пакетно Тип договора"
  deleteBatchContractType(ids: [ID]!): DeletebatchContracttypeMutation
  "Удалить пакетно Страну"
  deleteBatchCountry(ids: [ID]!): DeletebatchCountryMutation
  "Удалить пакетно Экипаж"
  deleteBatchCrew(ids: [ID]!): DeletebatchCrewMutation
  "Удалить пакетно Дизайн"
  deleteBatchDesign(ids: [ID]!): DeletebatchDesignMutation
  "Удалить пакетно Район"
  deleteBatchDistrict(ids: [ID]!): DeletebatchDistrictMutation
  "Удалить пакетно Должность"
  deleteBatchEmployeePosition(ids: [ID]!): DeletebatchEmployeepositionMutation
  "Удалить пакетно Семейство конструкции"
  deleteBatchFamilyConstruction(ids: [ID]!): DeletebatchFamilyconstructionMutation
  "Удалить пакетно Формат"
  deleteBatchFormat(ids: [ID]!): DeletebatchFormatMutation
  "Удалить пакетно Адресного справочник"
  deleteBatchLocAddress(ids: [ID]!): DeletebatchLocaddressMutation
  "Удалить пакетно Местоположение"
  deleteBatchLocation(ids: [ID]!): DeletebatchLocationMutation
  "Удалить пакетно Модель конструкции"
  deleteBatchModelConstruction(ids: [ID]!): DeletebatchModelconstructionMutation
  "Удалить пакетно Монтаж"
  deleteBatchMounting(ids: [ID]!): DeletebatchMountingMutation
  "Удалить пакетно Фотоотчёт о монтаже"
  deleteBatchMountingPhoto(ids: [ID]!): DeletebatchMountingphotoMutation
  "Удалить пакетно Ремонтно-монтажную работу"
  deleteBatchMountingTask(ids: [ID]!): DeletebatchMountingtaskMutation
  "Удалить пакетно Уведомление"
  deleteBatchNotification(ids: [ID]!): DeletebatchNotificationMutation
  "Удалить пакетно Помеху"
  deleteBatchObstruction(ids: [ID]!): DeletebatchObstructionMutation
  "Удалить пакетно Контрагента"
  deleteBatchPartner(ids: [ID]!): DeletebatchPartnerMutation
  "Удалить пакетно Тип контрагента"
  deleteBatchPartnerType(ids: [ID]!): DeletebatchPartnertypeMutation
  "Удалить пакетно Почтовый индекс"
  deleteBatchPostcode(ids: [ID]!): DeletebatchPostcodeMutation
  "Удалить пакетно Проект"
  deleteBatchProject(ids: [ID]!): DeletebatchProjectMutation
  "Удалить пакетно Назначение стороны"
  deleteBatchPurposeSide(ids: [ID]!): DeletebatchPurposesideMutation
  "Удалить пакетно Бронирование"
  deleteBatchReservation(ids: [ID]!): DeletebatchReservationMutation
  "Удалить пакетно Вид бронирования"
  deleteBatchReservationType(ids: [ID]!): DeletebatchReservationtypeMutation
  "Удалить пакетно Дополнительные расходы (РТС)"
  deleteBatchSalesAdditionalCost(ids: [ID]!): DeletebatchSalesadditionalcostMutation
  "Удалить пакетно Счёт"
  deleteBatchSalesInvoice(ids: [ID]!): DeletebatchSalesinvoiceMutation
  "Удалить пакетно Дополнительный расход НОН РТС"
  deleteBatchSalesNonrts(ids: [ID]!): DeletebatchSalesnonrtsMutation
  "Удалить пакетно Стоимость рекламного размещения по прайсу"
  deleteBatchSalesPlacementPrice(ids: [ID]!): DeletebatchSalesplacementpriceMutation
  "Удалить пакетно Сторону"
  deleteBatchSide(ids: [ID]!): DeletebatchSideMutation
  "Удалить пакетно Статические, конфигурационные доп. расходы"
  deleteBatchStaticAdditionalCosts(ids: [ID]!): DeletebatchStaticadditionalcostsMutation
  "Удалить пакетно Техническую проблему"
  deleteBatchTechProblem(ids: [ID]!): DeletebatchTechproblemMutation
  "Удалить пакетно Подсемейство конструкции"
  deleteBatchUnderFamilyConstruction(ids: [ID]!): DeletebatchUnderfamilyconstructionMutation
  "Удалить пакетно Пользователя"
  deleteBatchUser(ids: [ID]!): DeletebatchUserMutation
  "Удалить пакетно Группу"
  deleteBatchUserGroup(ids: [ID]!): DeletebatchUsergroupMutation
  "Удалить пакетно Право"
  deleteBatchUserPermission(ids: [ID]!): DeletebatchUserpermissionMutation
  "Удалить пакетно Сектор деятельности"
  deleteBatchWorkingSector(ids: [ID]!): DeletebatchWorkingsectorMutation
  "Удалить Бренд"
  deleteBrand(id: ID!): DeleteBrandMutation
  "Удалить Изображение бренда"
  deleteBrandImage(id: ID!): DeleteBrandimageMutation
  "Удалить Город"
  deleteCity(id: ID!): DeleteCityMutation
  "Удалить Тип клиента"
  deleteClientType(id: ID!): DeleteClienttypeMutation
  "Удалить Конструкцию"
  deleteConstruction(id: ID!): DeleteConstructionMutation
  "Удалить Construction notification"
  deleteConstructionNotification(id: ID!): DeleteConstructionnotificationMutation
  "Удалить Сторону конструкции"
  deleteConstructionSide(id: ID!): DeleteConstructionsideMutation
  "Удалить Контактное лицо"
  deleteContactPerson(id: ID!): DeleteContactpersonMutation
  "Удалить Договор"
  deleteContract(id: ID!): DeleteContractMutation
  "Удалить Тип договора"
  deleteContractType(id: ID!): DeleteContracttypeMutation
  "Удалить Страну"
  deleteCountry(id: ID!): DeleteCountryMutation
  "Удалить Экипаж"
  deleteCrew(id: ID!): DeleteCrewMutation
  "Удалить Дизайн"
  deleteDesign(id: ID!): DeleteDesignMutation
  "Удалить Район"
  deleteDistrict(id: ID!): DeleteDistrictMutation
  "Удалить Должность"
  deleteEmployeePosition(id: ID!): DeleteEmployeepositionMutation
  "Удалить элемент сметы проекта или приложения"
  deleteEstimateItem(
    "Идентификатор приложения"
    appendixId: ID,
    "Идентификатор удаляемого элемента сметы"
    id: ID!
  ): DeleteEstimateItem
  "Удалить Семейство конструкции"
  deleteFamilyConstruction(id: ID!): DeleteFamilyconstructionMutation
  "Удалить Формат"
  deleteFormat(id: ID!): DeleteFormatMutation
  "Удалить Адресного справочник"
  deleteLocAddress(id: ID!): DeleteLocaddressMutation
  "Удалить Местоположение"
  deleteLocation(id: ID!): DeleteLocationMutation
  "Удалить Модель конструкции"
  deleteModelConstruction(id: ID!): DeleteModelconstructionMutation
  "Удалить Монтаж"
  deleteMounting(id: ID!): DeleteMountingMutation
  "Удалить Фотоотчёт о монтаже"
  deleteMountingPhoto(id: ID!): DeleteMountingphotoMutation
  "Удалить Ремонтно-монтажную работу"
  deleteMountingTask(id: ID!): DeleteMountingtaskMutation
  "Удалить Уведомление"
  deleteNotification(id: ID!): DeleteNotificationMutation
  "Удалить Помеху"
  deleteObstruction(id: ID!): DeleteObstructionMutation
  "Удалить Контрагента"
  deletePartner(id: ID!): DeletePartnerMutation
  "Удалить Тип контрагента"
  deletePartnerType(id: ID!): DeletePartnertypeMutation
  "Удалить Почтовый индекс"
  deletePostcode(id: ID!): DeletePostcodeMutation
  "Удалить Проект"
  deleteProject(id: ID!): DeleteProjectMutation
  "Удалить Назначение стороны"
  deletePurposeSide(id: ID!): DeletePurposesideMutation
  "Удалить Бронирование"
  deleteReservation(id: ID!): DeleteReservationMutation
  "Удалить Вид бронирования"
  deleteReservationType(id: ID!): DeleteReservationtypeMutation
  "Удалить Дополнительные расходы (РТС)"
  deleteSalesAdditionalCost(id: ID!): DeleteSalesadditionalcostMutation
  "Удалить Счёт"
  deleteSalesInvoice(id: ID!): DeleteSalesinvoiceMutation
  "Удалить Дополнительный расход НОН РТС"
  deleteSalesNonrts(id: ID!): DeleteSalesnonrtsMutation
  "Удалить Стоимость рекламного размещения по прайсу"
  deleteSalesPlacementPrice(id: ID!): DeleteSalesplacementpriceMutation
  "Удалить Сторону"
  deleteSide(id: ID!): DeleteSideMutation
  "Удалить Статические, конфигурационные доп. расходы"
  deleteStaticAdditionalCosts(id: ID!): DeleteStaticadditionalcostsMutation
  "Удалить Техническую проблему"
  deleteTechProblem(id: ID!): DeleteTechproblemMutation
  "Удалить Подсемейство конструкции"
  deleteUnderFamilyConstruction(id: ID!): DeleteUnderfamilyconstructionMutation
  "Удалить Пользователя"
  deleteUser(id: ID!): DeleteUserMutation
  "Удалить Группу"
  deleteUserGroup(id: ID!): DeleteUsergroupMutation
  "Удалить Право"
  deleteUserPermission(id: ID!): DeleteUserpermissionMutation
  "Удалить Сектор деятельности"
  deleteWorkingSector(id: ID!): DeleteWorkingsectorMutation
  "Загрузить информацию о рекламных сторонах"
  downloadAdvertisingSides(includeFields: [String], queryParameters: JSONString): DownloadAdvertisingSidesInfo
  "Выгрузить информацию о рекламных сторонах и приложениях"
  downloadAdvertisingSidesAndAppendices(includeFieldsAdvSides: [String], includeFieldsAppendices: [String], queryParameters: JSONString): DownloadAdvertisingSidesAndAppendicesInfo
  "Загрузить информацию о приложениях"
  downloadAppendices(includeFields: [String], queryParameters: JSONString): DownloadAppendicesInfo
  "Загрузить информацию о брендах"
  downloadBrands(includeFields: [String], queryParameters: JSONString): DownloadBrandsInfo
  "Загрузить информацию о конструкциях"
  downloadConstructions(includeFields: [String], queryParameters: JSONString): DownloadConstructionsInfo
  "Загрузить информацию о договорах"
  downloadContracts(includeFields: [String], queryParameters: JSONString): DownloadConstractsInfo
  "Загрузить смету"
  downloadEstimateReportInfo(appendixId: ID, projectId: ID): DownloadEstimateReportInfo
  "Загрузить информацию о подаче разнарядки"
  downloadMProjectsInfo(includeFields: [String], queryParameters: JSONString): DownloadMProjectsInfo
  "Выгрузить информацию о монтажах"
  downloadMountingsInfo(includeFields: [String], queryParameters: JSONString): DownloadMountingsInfo
  "Загрузить информацию по пакетам"
  downloadPackagesInfo(
    "Дата начала периода. Указанный день включается в выборку [date_from:date_to)"
    dateFrom: Date,
    "Дата конца периода. Указанный день не включается в выборку [date_from:date_to)"
    dateTo: Date,
    "Список идентификаторов пакетов"
    packagesIds: [ID]!,
    "Период, за который производится выборка. Если указан тип CUSTOM, фильтрует в диапазоне [date_from, date_to]"
    period: Period,
    "Единица времени, по которой производится агрегация"
    unitOfTime: UnitOfTime
  ): DownloadPackagesInfo
  "Загрузить информацию о контрагентах"
  downloadPartners(includeFields: [String], queryParameters: JSONString): DownloadPartnersInfo
  "Загрузить информацию о проектах"
  downloadProjects(includeFields: [String], queryParameters: JSONString): DownloadProjectsInfo
  "Загрузить информацию о забронированных сторонах"
  downloadReservations(includeFields: [String], queryParameters: JSONString): DownloadReservationsInfo
  "Изменить значения полей строк сметы"
  editEstimateItem(
    "Идентификаторы элементов сметы"
    ids: [ID],
    "Изменить все строки"
    isAll: Boolean,
    "Пакетное изменени"
    isPackage: Boolean,
    "Параметр редактирования элементов сметы НОН РТС"
    nonRts: EstimateNonrtsArgument,
    "Выполняется ли пакетное редактирование"
    packageEditing: Boolean,
    "Идентификатор проекта"
    projectId: ID,
    "Параметр редактирования элементов сметы РТС - Доп. расходы"
    rtsAdditional: EstimateRtsAdditionalArgument,
    "Параметр редактирования элементов сметы РТС - Бронирования РТС"
    rtsReservations: EstimateRtsReservation
  ): EditNonRtsItems
  "Сгенерировать docx приложения к Договору"
  generateAppendixDocx(
    "Идентификатор приложения"
    appendixId: ID
  ): GenerateAppendixDocx
  """

  Change account password when user knows the old password.

  A new token and refresh token are sent. User must be verified.
  """
  passwordChange(newPassword1: String!, newPassword2: String!, oldPassword: String!): PasswordChange
  """

  Change user password without old password.

  Receive the token that was sent by email.

  If token and new passwords are valid, update
  user password and in case of using refresh
  tokens, revoke all of them.

  Also, if user has not been verified yet, verify it.
  """
  passwordReset(newPassword1: String!, newPassword2: String!, token: String!): PasswordReset
  "Same as `grapgql_jwt` implementation, with standard output."
  refreshToken(refreshToken: String!): RefreshToken
  """

  Register user with fields defined in the settings.

  If the email field of the user model is part of the
  registration fields (default), check if there is
  no user with that email or as a secondary email.

  If it exists, it does not register the user,
  even if the email field is not defined as unique
  (default of the default django user model).

  When creating the user, it also creates a `UserStatus`
  related to that user, making it possible to track
  if the user is archived, verified and has a secondary
  email.

  Send account verification email.

  If allowed to not verified users login, return token.
  """
  register(email: String!, password1: String!, password2: String!, username: String!): Register
  """

  Sends activation email.

  It is called resend because theoretically
  the first activation email was sent when
  the user registered.

  If there is no user with the requested email,
  a successful response is returned.
  """
  resendActivationEmail(email: String!): ResendActivationEmail
  "Same as `grapgql_jwt` implementation, with standard output."
  revokeToken(refreshToken: String!): RevokeToken
  """

  Send password reset email.

  For non verified users, send an activation
  email instead.

  Accepts both primary and secondary email.

  If there is no user with the requested email,
  a successful response is returned.
  """
  sendPasswordResetEmail(email: String!): SendPasswordResetEmail
  """

  Send activation to secondary email.

  User must be verified and confirm password.
  """
  sendSecondaryEmailActivation(email: String!, password: String!): SendSecondaryEmailActivation
  """

  Swap between primary and secondary emails.

  Require password confirmation.
  """
  swapEmails(password: String!): SwapEmails
  """

  Obtain JSON web token for given user.

  Allow to perform login with different fields,
  and secondary email if set. The fields are
  defined on settings.

  Not verified users can login by default. This
  can be changes on settings.

  If user is archived, make it unarchive and
  return `unarchiving=True` on output.
  """
  tokenAuth(email: String, password: String!, username: String): ObtainJSONWebToken
  """

  Update user model fields, defined on settings.

  User must be verified.
  """
  updateAccount(firstName: String, lastName: String): UpdateAccount
  "Обновить Рекламную промо-компания. Все NOT NULL поля - обязательные"
  updateAdvertPromoCompany(id: ID!, input: UpdateAdvertPromoCompanyInput!): UpdateAdvertpromocompanyMutation
  "Обновить Рекламную сторону. Все NOT NULL поля - обязательные"
  updateAdvertisingSide(id: ID!, input: UpdateAdvertisingSideInput!): UpdateAdvertisingsideMutation
  "Обновить Агентскую комиссия. Все NOT NULL поля - обязательные"
  updateAgencyCommission(id: ID!, input: UpdateAgencyCommissionInput!): UpdateAgencycommissionMutation
  "Обновить Приложение к договору. Все NOT NULL поля - обязательные"
  updateAppendix(id: ID!, input: UpdateAppendixInput!): UpdateAppendixMutation
  "Обновить пакетно Рекламную промо-компания. Все NOT NULL поля - обязательные"
  updateBatchAdvertPromoCompany(input: [BatchUpdateAdvertPromoCompanyInput]!): UpdatebatchAdvertpromocompanyMutation
  "Обновить пакетно Рекламную сторону. Все NOT NULL поля - обязательные"
  updateBatchAdvertisingSide(input: [BatchUpdateAdvertisingSideInput]!): UpdatebatchAdvertisingsideMutation
  "Обновить пакетно Агентскую комиссия. Все NOT NULL поля - обязательные"
  updateBatchAgencyCommission(input: [BatchUpdateAgencyCommissionInput]!): UpdatebatchAgencycommissionMutation
  "Обновить пакетно Приложение к договору. Все NOT NULL поля - обязательные"
  updateBatchAppendix(input: [BatchUpdateAppendixInput]!): UpdatebatchAppendixMutation
  "Обновить пакетно Бренд. Все NOT NULL поля - обязательные"
  updateBatchBrand(input: [BatchUpdateBrandInput]!): UpdatebatchBrandMutation
  "Обновить пакетно Изображение бренда. Все NOT NULL поля - обязательные"
  updateBatchBrandImage(input: [BatchUpdateBrandImageInput]!): UpdatebatchBrandimageMutation
  "Обновить пакетно Город. Все NOT NULL поля - обязательные"
  updateBatchCity(input: [BatchUpdateCityInput]!): UpdatebatchCityMutation
  "Обновить пакетно Тип клиента. Все NOT NULL поля - обязательные"
  updateBatchClientType(input: [BatchUpdateClientTypeInput]!): UpdatebatchClienttypeMutation
  "Обновить пакетно Конструкцию. Все NOT NULL поля - обязательные"
  updateBatchConstruction(input: [BatchUpdateConstructionInput]!): UpdatebatchConstructionMutation
  "Обновить пакетно Construction notification. Все NOT NULL поля - обязательные"
  updateBatchConstructionNotification(input: [BatchUpdateConstructionNotificationInput]!): UpdatebatchConstructionnotificationMutation
  "Обновить пакетно Сторону конструкции. Все NOT NULL поля - обязательные"
  updateBatchConstructionSide(input: [BatchUpdateConstructionSideInput]!): UpdatebatchConstructionsideMutation
  "Обновить пакетно Контактное лицо. Все NOT NULL поля - обязательные"
  updateBatchContactPerson(input: [BatchUpdateContactPersonInput]!): UpdatebatchContactpersonMutation
  "Обновить пакетно Договор. Все NOT NULL поля - обязательные"
  updateBatchContract(input: [BatchUpdateContractInput]!): UpdatebatchContractMutation
  "Обновить пакетно Тип договора. Все NOT NULL поля - обязательные"
  updateBatchContractType(input: [BatchUpdateContractTypeInput]!): UpdatebatchContracttypeMutation
  "Обновить пакетно Страну. Все NOT NULL поля - обязательные"
  updateBatchCountry(input: [BatchUpdateCountryInput]!): UpdatebatchCountryMutation
  "Обновить пакетно Экипаж. Все NOT NULL поля - обязательные"
  updateBatchCrew(input: [BatchUpdateCrewInput]!): UpdatebatchCrewMutation
  "Обновить пакетно Дизайн. Все NOT NULL поля - обязательные"
  updateBatchDesign(input: [BatchUpdateDesignInput]!): UpdatebatchDesignMutation
  "Обновить пакетно Район. Все NOT NULL поля - обязательные"
  updateBatchDistrict(input: [BatchUpdateDistrictInput]!): UpdatebatchDistrictMutation
  "Обновить пакетно Должность. Все NOT NULL поля - обязательные"
  updateBatchEmployeePosition(input: [BatchUpdateEmployeePositionInput]!): UpdatebatchEmployeepositionMutation
  "Обновить пакетно Семейство конструкции. Все NOT NULL поля - обязательные"
  updateBatchFamilyConstruction(input: [BatchUpdateFamilyConstructionInput]!): UpdatebatchFamilyconstructionMutation
  "Обновить пакетно Формат. Все NOT NULL поля - обязательные"
  updateBatchFormat(input: [BatchUpdateFormatInput]!): UpdatebatchFormatMutation
  "Обновить пакетно Адресного справочник. Все NOT NULL поля - обязательные"
  updateBatchLocAddress(input: [BatchUpdateAddressesInput]!): UpdatebatchLocaddressMutation
  "Обновить пакетно Местоположение. Все NOT NULL поля - обязательные"
  updateBatchLocation(input: [BatchUpdateLocationInput]!): UpdatebatchLocationMutation
  "Обновить пакетно Модель конструкции. Все NOT NULL поля - обязательные"
  updateBatchModelConstruction(input: [BatchUpdateModelConstructionInput]!): UpdatebatchModelconstructionMutation
  "Обновить пакетно Монтаж. Все NOT NULL поля - обязательные"
  updateBatchMounting(input: [BatchUpdateMountingInput]!): UpdatebatchMountingMutation
  "Обновить пакетно Фотоотчёт о монтаже. Все NOT NULL поля - обязательные"
  updateBatchMountingPhoto(input: [BatchUpdateMountingPhotoInput]!): UpdatebatchMountingphotoMutation
  "Обновить пакетно Ремонтно-монтажную работу. Все NOT NULL поля - обязательные"
  updateBatchMountingTask(input: [BatchUpdateMountingTaskInput]!): UpdatebatchMountingtaskMutation
  "Обновить пакетно Уведомление. Все NOT NULL поля - обязательные"
  updateBatchNotification(input: [BatchUpdateNotificationInput]!): UpdatebatchNotificationMutation
  "Обновить пакетно Помеху. Все NOT NULL поля - обязательные"
  updateBatchObstruction(input: [BatchUpdateObstructionInput]!): UpdatebatchObstructionMutation
  "Обновить пакетно Контрагента. Все NOT NULL поля - обязательные"
  updateBatchPartner(input: [BatchUpdatePartnerInput]!): UpdatebatchPartnerMutation
  "Обновить пакетно Тип контрагента. Все NOT NULL поля - обязательные"
  updateBatchPartnerType(input: [BatchUpdatePartnerTypeInput]!): UpdatebatchPartnertypeMutation
  "Обновить пакетно Рекламную промо-компания. Все поля - необязательные"
  updateBatchPatchAdvertPromoCompany(input: [BatchPatchAdvertPromoCompanyInput]!): UpdatebatchpatchAdvertpromocompanyMutation
  "Обновить пакетно Рекламную сторону. Все поля - необязательные"
  updateBatchPatchAdvertisingSide(input: [BatchPatchAdvertisingSideInput]!): UpdatebatchpatchAdvertisingsideMutation
  "Обновить пакетно Агентскую комиссия. Все поля - необязательные"
  updateBatchPatchAgencyCommission(input: [BatchPatchAgencyCommissionInput]!): UpdatebatchpatchAgencycommissionMutation
  "Обновить пакетно Приложение к договору. Все поля - необязательные"
  updateBatchPatchAppendix(input: [BatchPatchAppendixInput]!): UpdatebatchpatchAppendixMutation
  "Обновить пакетно Бренд. Все поля - необязательные"
  updateBatchPatchBrand(input: [BatchPatchBrandInput]!): UpdatebatchpatchBrandMutation
  "Обновить пакетно Изображение бренда. Все поля - необязательные"
  updateBatchPatchBrandImage(input: [BatchPatchBrandImageInput]!): UpdatebatchpatchBrandimageMutation
  "Обновить пакетно Город. Все поля - необязательные"
  updateBatchPatchCity(input: [BatchPatchCityInput]!): UpdatebatchpatchCityMutation
  "Обновить пакетно Тип клиента. Все поля - необязательные"
  updateBatchPatchClientType(input: [BatchPatchClientTypeInput]!): UpdatebatchpatchClienttypeMutation
  "Обновить пакетно Конструкцию. Все поля - необязательные"
  updateBatchPatchConstruction(input: [BatchPatchConstructionInput]!): UpdatebatchpatchConstructionMutation
  "Обновить пакетно Construction notification. Все поля - необязательные"
  updateBatchPatchConstructionNotification(input: [BatchPatchConstructionNotificationInput]!): UpdatebatchpatchConstructionnotificationMutation
  "Обновить пакетно Сторону конструкции. Все поля - необязательные"
  updateBatchPatchConstructionSide(input: [BatchPatchConstructionSideInput]!): UpdatebatchpatchConstructionsideMutation
  "Обновить пакетно Контактное лицо. Все поля - необязательные"
  updateBatchPatchContactPerson(input: [BatchPatchContactPersonInput]!): UpdatebatchpatchContactpersonMutation
  "Обновить пакетно Договор. Все поля - необязательные"
  updateBatchPatchContract(input: [BatchPatchContractInput]!): UpdatebatchpatchContractMutation
  "Обновить пакетно Тип договора. Все поля - необязательные"
  updateBatchPatchContractType(input: [BatchPatchContractTypeInput]!): UpdatebatchpatchContracttypeMutation
  "Обновить пакетно Страну. Все поля - необязательные"
  updateBatchPatchCountry(input: [BatchPatchCountryInput]!): UpdatebatchpatchCountryMutation
  "Обновить пакетно Экипаж. Все поля - необязательные"
  updateBatchPatchCrew(input: [BatchPatchCrewInput]!): UpdatebatchpatchCrewMutation
  "Обновить пакетно Дизайн. Все поля - необязательные"
  updateBatchPatchDesign(input: [BatchPatchDesignInput]!): UpdatebatchpatchDesignMutation
  "Обновить пакетно Район. Все поля - необязательные"
  updateBatchPatchDistrict(input: [BatchPatchDistrictInput]!): UpdatebatchpatchDistrictMutation
  "Обновить пакетно Должность. Все поля - необязательные"
  updateBatchPatchEmployeePosition(input: [BatchPatchEmployeePositionInput]!): UpdatebatchpatchEmployeepositionMutation
  "Обновить пакетно Семейство конструкции. Все поля - необязательные"
  updateBatchPatchFamilyConstruction(input: [BatchPatchFamilyConstructionInput]!): UpdatebatchpatchFamilyconstructionMutation
  "Обновить пакетно Формат. Все поля - необязательные"
  updateBatchPatchFormat(input: [BatchPatchFormatInput]!): UpdatebatchpatchFormatMutation
  "Обновить пакетно Адресного справочник. Все поля - необязательные"
  updateBatchPatchLocAddress(input: [BatchPatchAddressesInput]!): UpdatebatchpatchLocaddressMutation
  "Обновить пакетно Местоположение. Все поля - необязательные"
  updateBatchPatchLocation(input: [BatchPatchLocationInput]!): UpdatebatchpatchLocationMutation
  "Обновить пакетно Модель конструкции. Все поля - необязательные"
  updateBatchPatchModelConstruction(input: [BatchPatchModelConstructionInput]!): UpdatebatchpatchModelconstructionMutation
  "Обновить пакетно Монтаж. Все поля - необязательные"
  updateBatchPatchMounting(input: [BatchPatchMountingInput]!): UpdatebatchpatchMountingMutation
  "Обновить пакетно Фотоотчёт о монтаже. Все поля - необязательные"
  updateBatchPatchMountingPhoto(input: [BatchPatchMountingPhotoInput]!): UpdatebatchpatchMountingphotoMutation
  "Обновить пакетно Ремонтно-монтажную работу. Все поля - необязательные"
  updateBatchPatchMountingTask(input: [BatchPatchMountingTaskInput]!): UpdatebatchpatchMountingtaskMutation
  "Обновить пакетно Уведомление. Все поля - необязательные"
  updateBatchPatchNotification(input: [BatchPatchNotificationInput]!): UpdatebatchpatchNotificationMutation
  "Обновить пакетно Помеху. Все поля - необязательные"
  updateBatchPatchObstruction(input: [BatchPatchObstructionInput]!): UpdatebatchpatchObstructionMutation
  "Обновить пакетно Контрагента. Все поля - необязательные"
  updateBatchPatchPartner(input: [BatchPatchPartnerInput]!): UpdatebatchpatchPartnerMutation
  "Обновить пакетно Тип контрагента. Все поля - необязательные"
  updateBatchPatchPartnerType(input: [BatchPatchPartnerTypeInput]!): UpdatebatchpatchPartnertypeMutation
  "Обновить пакетно Почтовый индекс. Все поля - необязательные"
  updateBatchPatchPostcode(input: [BatchPatchPostcodeInput]!): UpdatebatchpatchPostcodeMutation
  "Обновить пакетно Проект. Все поля - необязательные"
  updateBatchPatchProject(input: [BatchPatchProjectInput]!): UpdatebatchpatchProjectMutation
  "Обновить пакетно Назначение стороны. Все поля - необязательные"
  updateBatchPatchPurposeSide(input: [BatchPatchPurposeSideInput]!): UpdatebatchpatchPurposesideMutation
  "Обновить пакетно Бронирование. Все поля - необязательные"
  updateBatchPatchReservation(input: [BatchPatchReservationInput]!): UpdatebatchpatchReservationMutation
  "Обновить пакетно Вид бронирования. Все поля - необязательные"
  updateBatchPatchReservationType(input: [BatchPatchReservationTypeInput]!): UpdatebatchpatchReservationtypeMutation
  "Обновить пакетно Дополнительные расходы (РТС). Все поля - необязательные"
  updateBatchPatchSalesAdditionalCost(input: [BatchPatchAdditionalCostsInput]!): UpdatebatchpatchSalesadditionalcostMutation
  "Обновить пакетно Счёт. Все поля - необязательные"
  updateBatchPatchSalesInvoice(input: [BatchPatchInvoiceInput]!): UpdatebatchpatchSalesinvoiceMutation
  "Обновить пакетно Дополнительный расход НОН РТС. Все поля - необязательные"
  updateBatchPatchSalesNonrts(input: [BatchPatchEstimateNonRtsInput]!): UpdatebatchpatchSalesnonrtsMutation
  "Обновить пакетно Стоимость рекламного размещения по прайсу. Все поля - необязательные"
  updateBatchPatchSalesPlacementPrice(input: [BatchPatchPlacementPriceInput]!): UpdatebatchpatchSalesplacementpriceMutation
  "Обновить пакетно Сторону. Все поля - необязательные"
  updateBatchPatchSide(input: [BatchPatchSideInput]!): UpdatebatchpatchSideMutation
  "Обновить пакетно Статические, конфигурационные доп. расходы. Все поля - необязательные"
  updateBatchPatchStaticAdditionalCosts(input: [BatchPatchStaticAdditionalCostsInput]!): UpdatebatchpatchStaticadditionalcostsMutation
  "Обновить пакетно Техническую проблему. Все поля - необязательные"
  updateBatchPatchTechProblem(input: [BatchPatchTechProblemsInput]!): UpdatebatchpatchTechproblemMutation
  "Обновить пакетно Подсемейство конструкции. Все поля - необязательные"
  updateBatchPatchUnderFamilyConstruction(input: [BatchPatchUnderFamilyConstructionInput]!): UpdatebatchpatchUnderfamilyconstructionMutation
  "Обновить пакетно Пользователя. Все поля - необязательные"
  updateBatchPatchUser(input: [BatchPatchCustomUserInput]!): UpdatebatchpatchUserMutation
  "Обновить пакетно Группу. Все поля - необязательные"
  updateBatchPatchUserGroup(input: [BatchPatchGroupInput]!): UpdatebatchpatchUsergroupMutation
  "Обновить пакетно Право. Все поля - необязательные"
  updateBatchPatchUserPermission(input: [BatchPatchPermissionInput]!): UpdatebatchpatchUserpermissionMutation
  "Обновить пакетно Сектор деятельности. Все поля - необязательные"
  updateBatchPatchWorkingSector(input: [BatchPatchWorkingSectorInput]!): UpdatebatchpatchWorkingsectorMutation
  "Обновить пакетно Почтовый индекс. Все NOT NULL поля - обязательные"
  updateBatchPostcode(input: [BatchUpdatePostcodeInput]!): UpdatebatchPostcodeMutation
  "Обновить пакетно Проект. Все NOT NULL поля - обязательные"
  updateBatchProject(input: [BatchUpdateProjectInput]!): UpdatebatchProjectMutation
  "Обновить пакетно Назначение стороны. Все NOT NULL поля - обязательные"
  updateBatchPurposeSide(input: [BatchUpdatePurposeSideInput]!): UpdatebatchPurposesideMutation
  "Обновить пакетно Бронирование. Все NOT NULL поля - обязательные"
  updateBatchReservation(input: [BatchUpdateReservationInput]!): UpdatebatchReservationMutation
  "Обновить пакетно Вид бронирования. Все NOT NULL поля - обязательные"
  updateBatchReservationType(input: [BatchUpdateReservationTypeInput]!): UpdatebatchReservationtypeMutation
  "Обновить пакетно Дополнительные расходы (РТС). Все NOT NULL поля - обязательные"
  updateBatchSalesAdditionalCost(input: [BatchUpdateAdditionalCostsInput]!): UpdatebatchSalesadditionalcostMutation
  "Обновить пакетно Счёт. Все NOT NULL поля - обязательные"
  updateBatchSalesInvoice(input: [BatchUpdateInvoiceInput]!): UpdatebatchSalesinvoiceMutation
  "Обновить пакетно Дополнительный расход НОН РТС. Все NOT NULL поля - обязательные"
  updateBatchSalesNonrts(input: [BatchUpdateEstimateNonRtsInput]!): UpdatebatchSalesnonrtsMutation
  "Обновить пакетно Стоимость рекламного размещения по прайсу. Все NOT NULL поля - обязательные"
  updateBatchSalesPlacementPrice(input: [BatchUpdatePlacementPriceInput]!): UpdatebatchSalesplacementpriceMutation
  "Обновить пакетно Сторону. Все NOT NULL поля - обязательные"
  updateBatchSide(input: [BatchUpdateSideInput]!): UpdatebatchSideMutation
  "Обновить пакетно Статические, конфигурационные доп. расходы. Все NOT NULL поля - обязательные"
  updateBatchStaticAdditionalCosts(input: [BatchUpdateStaticAdditionalCostsInput]!): UpdatebatchStaticadditionalcostsMutation
  "Обновить пакетно Техническую проблему. Все NOT NULL поля - обязательные"
  updateBatchTechProblem(input: [BatchUpdateTechProblemsInput]!): UpdatebatchTechproblemMutation
  "Обновить пакетно Подсемейство конструкции. Все NOT NULL поля - обязательные"
  updateBatchUnderFamilyConstruction(input: [BatchUpdateUnderFamilyConstructionInput]!): UpdatebatchUnderfamilyconstructionMutation
  "Обновить пакетно Пользователя. Все NOT NULL поля - обязательные"
  updateBatchUser(input: [BatchUpdateCustomUserInput]!): UpdatebatchUserMutation
  "Обновить пакетно Группу. Все NOT NULL поля - обязательные"
  updateBatchUserGroup(input: [BatchUpdateGroupInput]!): UpdatebatchUsergroupMutation
  "Обновить пакетно Право. Все NOT NULL поля - обязательные"
  updateBatchUserPermission(input: [BatchUpdatePermissionInput]!): UpdatebatchUserpermissionMutation
  "Обновить пакетно Сектор деятельности. Все NOT NULL поля - обязательные"
  updateBatchWorkingSector(input: [BatchUpdateWorkingSectorInput]!): UpdatebatchWorkingsectorMutation
  "Обновить Бренд. Все NOT NULL поля - обязательные"
  updateBrand(id: ID!, input: UpdateBrandInput!): UpdateBrandMutation
  "Обновить Изображение бренда. Все NOT NULL поля - обязательные"
  updateBrandImage(id: ID!, input: UpdateBrandImageInput!): UpdateBrandimageMutation
  "Обновить Город. Все NOT NULL поля - обязательные"
  updateCity(id: ID!, input: UpdateCityInput!): UpdateCityMutation
  "Обновить Тип клиента. Все NOT NULL поля - обязательные"
  updateClientType(id: ID!, input: UpdateClientTypeInput!): UpdateClienttypeMutation
  "Обновить Конструкцию. Все NOT NULL поля - обязательные"
  updateConstruction(id: ID!, input: UpdateConstructionInput!): UpdateConstructionMutation
  "Обновить Construction notification. Все NOT NULL поля - обязательные"
  updateConstructionNotification(id: ID!, input: UpdateConstructionNotificationInput!): UpdateConstructionnotificationMutation
  "Обновить Сторону конструкции. Все NOT NULL поля - обязательные"
  updateConstructionSide(id: ID!, input: UpdateConstructionSideInput!): UpdateConstructionsideMutation
  "Обновить Контактное лицо. Все NOT NULL поля - обязательные"
  updateContactPerson(id: ID!, input: UpdateContactPersonInput!): UpdateContactpersonMutation
  "Обновить Договор. Все NOT NULL поля - обязательные"
  updateContract(id: ID!, input: UpdateContractInput!): UpdateContractMutation
  "Обновить Тип договора. Все NOT NULL поля - обязательные"
  updateContractType(id: ID!, input: UpdateContractTypeInput!): UpdateContracttypeMutation
  "Обновить Страну. Все NOT NULL поля - обязательные"
  updateCountry(id: ID!, input: UpdateCountryInput!): UpdateCountryMutation
  "Обновить Экипаж. Все NOT NULL поля - обязательные"
  updateCrew(id: ID!, input: UpdateCrewInput!): UpdateCrewMutation
  "Обновить Дизайн. Все NOT NULL поля - обязательные"
  updateDesign(id: ID!, input: UpdateDesignInput!): UpdateDesignMutation
  "Обновить Район. Все NOT NULL поля - обязательные"
  updateDistrict(id: ID!, input: UpdateDistrictInput!): UpdateDistrictMutation
  "Обновить Должность. Все NOT NULL поля - обязательные"
  updateEmployeePosition(id: ID!, input: UpdateEmployeePositionInput!): UpdateEmployeepositionMutation
  "Обновить Семейство конструкции. Все NOT NULL поля - обязательные"
  updateFamilyConstruction(id: ID!, input: UpdateFamilyConstructionInput!): UpdateFamilyconstructionMutation
  "Обновить Формат. Все NOT NULL поля - обязательные"
  updateFormat(id: ID!, input: UpdateFormatInput!): UpdateFormatMutation
  "Обновить Адресного справочник. Все NOT NULL поля - обязательные"
  updateLocAddress(id: ID!, input: UpdateAddressesInput!): UpdateLocaddressMutation
  "Обновить Местоположение. Все NOT NULL поля - обязательные"
  updateLocation(id: ID!, input: UpdateLocationInput!): UpdateLocationMutation
  "Обновить Модель конструкции. Все NOT NULL поля - обязательные"
  updateModelConstruction(id: ID!, input: UpdateModelConstructionInput!): UpdateModelconstructionMutation
  "Обновить Монтаж. Все NOT NULL поля - обязательные"
  updateMounting(id: ID!, input: UpdateMountingInput!): UpdateMountingMutation
  "Обновить Фотоотчёт о монтаже. Все NOT NULL поля - обязательные"
  updateMountingPhoto(id: ID!, input: UpdateMountingPhotoInput!): UpdateMountingphotoMutation
  "Обновить Ремонтно-монтажную работу. Все NOT NULL поля - обязательные"
  updateMountingTask(id: ID!, input: UpdateMountingTaskInput!): UpdateMountingtaskMutation
  "Обновить Уведомление. Все NOT NULL поля - обязательные"
  updateNotification(id: ID!, input: UpdateNotificationInput!): UpdateNotificationMutation
  "Обновить Помеху. Все NOT NULL поля - обязательные"
  updateObstruction(id: ID!, input: UpdateObstructionInput!): UpdateObstructionMutation
  "Изменить тип брони пакета"
  updatePackageReservationType(
    "Идентификатор брони пакета"
    id: ID,
    "Идентификатор типа бронирования"
    reservationTypeId: ID
  ): UpdatePackageReservationType
  "Обновить Контрагента. Все NOT NULL поля - обязательные"
  updatePartner(id: ID!, input: UpdatePartnerInput!): UpdatePartnerMutation
  "Обновить Тип контрагента. Все NOT NULL поля - обязательные"
  updatePartnerType(id: ID!, input: UpdatePartnerTypeInput!): UpdatePartnertypeMutation
  "Обновить Рекламную промо-компания. Все поля - необязательные"
  updatePatchAdvertPromoCompany(id: ID!, input: PatchAdvertPromoCompanyInput!): UpdatepatchAdvertpromocompanyMutation
  "Обновить Рекламную сторону. Все поля - необязательные"
  updatePatchAdvertisingSide(id: ID!, input: PatchAdvertisingSideInput!): UpdatepatchAdvertisingsideMutation
  "Обновить Агентскую комиссия. Все поля - необязательные"
  updatePatchAgencyCommission(id: ID!, input: PatchAgencyCommissionInput!): UpdatepatchAgencycommissionMutation
  "Обновить Приложение к договору. Все поля - необязательные"
  updatePatchAppendix(id: ID!, input: PatchAppendixInput!): UpdatepatchAppendixMutation
  "Обновить Бренд. Все поля - необязательные"
  updatePatchBrand(id: ID!, input: PatchBrandInput!): UpdatepatchBrandMutation
  "Обновить Изображение бренда. Все поля - необязательные"
  updatePatchBrandImage(id: ID!, input: PatchBrandImageInput!): UpdatepatchBrandimageMutation
  "Обновить Город. Все поля - необязательные"
  updatePatchCity(id: ID!, input: PatchCityInput!): UpdatepatchCityMutation
  "Обновить Тип клиента. Все поля - необязательные"
  updatePatchClientType(id: ID!, input: PatchClientTypeInput!): UpdatepatchClienttypeMutation
  "Обновить Конструкцию. Все поля - необязательные"
  updatePatchConstruction(id: ID!, input: PatchConstructionInput!): UpdatepatchConstructionMutation
  "Обновить Construction notification. Все поля - необязательные"
  updatePatchConstructionNotification(id: ID!, input: PatchConstructionNotificationInput!): UpdatepatchConstructionnotificationMutation
  "Обновить Сторону конструкции. Все поля - необязательные"
  updatePatchConstructionSide(id: ID!, input: PatchConstructionSideInput!): UpdatepatchConstructionsideMutation
  "Обновить Контактное лицо. Все поля - необязательные"
  updatePatchContactPerson(id: ID!, input: PatchContactPersonInput!): UpdatepatchContactpersonMutation
  "Обновить Договор. Все поля - необязательные"
  updatePatchContract(id: ID!, input: PatchContractInput!): UpdatepatchContractMutation
  "Обновить Тип договора. Все поля - необязательные"
  updatePatchContractType(id: ID!, input: PatchContractTypeInput!): UpdatepatchContracttypeMutation
  "Обновить Страну. Все поля - необязательные"
  updatePatchCountry(id: ID!, input: PatchCountryInput!): UpdatepatchCountryMutation
  "Обновить Экипаж. Все поля - необязательные"
  updatePatchCrew(id: ID!, input: PatchCrewInput!): UpdatepatchCrewMutation
  "Обновить Дизайн. Все поля - необязательные"
  updatePatchDesign(id: ID!, input: PatchDesignInput!): UpdatepatchDesignMutation
  "Обновить Район. Все поля - необязательные"
  updatePatchDistrict(id: ID!, input: PatchDistrictInput!): UpdatepatchDistrictMutation
  "Обновить Должность. Все поля - необязательные"
  updatePatchEmployeePosition(id: ID!, input: PatchEmployeePositionInput!): UpdatepatchEmployeepositionMutation
  "Обновить Семейство конструкции. Все поля - необязательные"
  updatePatchFamilyConstruction(id: ID!, input: PatchFamilyConstructionInput!): UpdatepatchFamilyconstructionMutation
  "Обновить Формат. Все поля - необязательные"
  updatePatchFormat(id: ID!, input: PatchFormatInput!): UpdatepatchFormatMutation
  "Обновить Адресного справочник. Все поля - необязательные"
  updatePatchLocAddress(id: ID!, input: PatchAddressesInput!): UpdatepatchLocaddressMutation
  "Обновить Местоположение. Все поля - необязательные"
  updatePatchLocation(id: ID!, input: PatchLocationInput!): UpdatepatchLocationMutation
  "Обновить Модель конструкции. Все поля - необязательные"
  updatePatchModelConstruction(id: ID!, input: PatchModelConstructionInput!): UpdatepatchModelconstructionMutation
  "Обновить Монтаж. Все поля - необязательные"
  updatePatchMounting(id: ID!, input: PatchMountingInput!): UpdatepatchMountingMutation
  "Обновить Фотоотчёт о монтаже. Все поля - необязательные"
  updatePatchMountingPhoto(id: ID!, input: PatchMountingPhotoInput!): UpdatepatchMountingphotoMutation
  "Обновить Ремонтно-монтажную работу. Все поля - необязательные"
  updatePatchMountingTask(id: ID!, input: PatchMountingTaskInput!): UpdatepatchMountingtaskMutation
  "Обновить Уведомление. Все поля - необязательные"
  updatePatchNotification(id: ID!, input: PatchNotificationInput!): UpdatepatchNotificationMutation
  "Обновить Помеху. Все поля - необязательные"
  updatePatchObstruction(id: ID!, input: PatchObstructionInput!): UpdatepatchObstructionMutation
  "Обновить Контрагента. Все поля - необязательные"
  updatePatchPartner(id: ID!, input: PatchPartnerInput!): UpdatepatchPartnerMutation
  "Обновить Тип контрагента. Все поля - необязательные"
  updatePatchPartnerType(id: ID!, input: PatchPartnerTypeInput!): UpdatepatchPartnertypeMutation
  "Обновить Почтовый индекс. Все поля - необязательные"
  updatePatchPostcode(id: ID!, input: PatchPostcodeInput!): UpdatepatchPostcodeMutation
  "Обновить Проект. Все поля - необязательные"
  updatePatchProject(id: ID!, input: PatchProjectInput!): UpdatepatchProjectMutation
  "Обновить Назначение стороны. Все поля - необязательные"
  updatePatchPurposeSide(id: ID!, input: PatchPurposeSideInput!): UpdatepatchPurposesideMutation
  "Обновить Бронирование. Все поля - необязательные"
  updatePatchReservation(id: ID!, input: PatchReservationInput!): UpdatepatchReservationMutation
  "Обновить Вид бронирования. Все поля - необязательные"
  updatePatchReservationType(id: ID!, input: PatchReservationTypeInput!): UpdatepatchReservationtypeMutation
  "Обновить Дополнительные расходы (РТС). Все поля - необязательные"
  updatePatchSalesAdditionalCost(id: ID!, input: PatchAdditionalCostsInput!): UpdatepatchSalesadditionalcostMutation
  "Обновить Счёт. Все поля - необязательные"
  updatePatchSalesInvoice(id: ID!, input: PatchInvoiceInput!): UpdatepatchSalesinvoiceMutation
  "Обновить Дополнительный расход НОН РТС. Все поля - необязательные"
  updatePatchSalesNonrts(id: ID!, input: PatchEstimateNonRtsInput!): UpdatepatchSalesnonrtsMutation
  "Обновить Стоимость рекламного размещения по прайсу. Все поля - необязательные"
  updatePatchSalesPlacementPrice(id: ID!, input: PatchPlacementPriceInput!): UpdatepatchSalesplacementpriceMutation
  "Обновить Сторону. Все поля - необязательные"
  updatePatchSide(id: ID!, input: PatchSideInput!): UpdatepatchSideMutation
  "Обновить Статические, конфигурационные доп. расходы. Все поля - необязательные"
  updatePatchStaticAdditionalCosts(id: ID!, input: PatchStaticAdditionalCostsInput!): UpdatepatchStaticadditionalcostsMutation
  "Обновить Техническую проблему. Все поля - необязательные"
  updatePatchTechProblem(id: ID!, input: PatchTechProblemsInput!): UpdatepatchTechproblemMutation
  "Обновить Подсемейство конструкции. Все поля - необязательные"
  updatePatchUnderFamilyConstruction(id: ID!, input: PatchUnderFamilyConstructionInput!): UpdatepatchUnderfamilyconstructionMutation
  "Обновить Пользователя. Все поля - необязательные"
  updatePatchUser(id: ID!, input: PatchCustomUserInput!): UpdatepatchUserMutation
  "Обновить Группу. Все поля - необязательные"
  updatePatchUserGroup(id: ID!, input: PatchGroupInput!): UpdatepatchUsergroupMutation
  "Обновить Право. Все поля - необязательные"
  updatePatchUserPermission(id: ID!, input: PatchPermissionInput!): UpdatepatchUserpermissionMutation
  "Обновить Сектор деятельности. Все поля - необязательные"
  updatePatchWorkingSector(id: ID!, input: PatchWorkingSectorInput!): UpdatepatchWorkingsectorMutation
  "Обновить Почтовый индекс. Все NOT NULL поля - обязательные"
  updatePostcode(id: ID!, input: UpdatePostcodeInput!): UpdatePostcodeMutation
  "Обновить Проект. Все NOT NULL поля - обязательные"
  updateProject(id: ID!, input: UpdateProjectInput!): UpdateProjectMutation
  "Обновить Назначение стороны. Все NOT NULL поля - обязательные"
  updatePurposeSide(id: ID!, input: UpdatePurposeSideInput!): UpdatePurposesideMutation
  "Обновить Бронирование. Все NOT NULL поля - обязательные"
  updateReservation(id: ID!, input: UpdateReservationInput!): UpdateReservationMutation
  "Обновить Вид бронирования. Все NOT NULL поля - обязательные"
  updateReservationType(id: ID!, input: UpdateReservationTypeInput!): UpdateReservationtypeMutation
  "Обновить Дополнительные расходы (РТС). Все NOT NULL поля - обязательные"
  updateSalesAdditionalCost(id: ID!, input: UpdateAdditionalCostsInput!): UpdateSalesadditionalcostMutation
  "Обновить Счёт. Все NOT NULL поля - обязательные"
  updateSalesInvoice(id: ID!, input: UpdateInvoiceInput!): UpdateSalesinvoiceMutation
  "Обновить Дополнительный расход НОН РТС. Все NOT NULL поля - обязательные"
  updateSalesNonrts(id: ID!, input: UpdateEstimateNonRtsInput!): UpdateSalesnonrtsMutation
  "Обновить Стоимость рекламного размещения по прайсу. Все NOT NULL поля - обязательные"
  updateSalesPlacementPrice(id: ID!, input: UpdatePlacementPriceInput!): UpdateSalesplacementpriceMutation
  "Обновить Сторону. Все NOT NULL поля - обязательные"
  updateSide(id: ID!, input: UpdateSideInput!): UpdateSideMutation
  "Обновить Статические, конфигурационные доп. расходы. Все NOT NULL поля - обязательные"
  updateStaticAdditionalCosts(id: ID!, input: UpdateStaticAdditionalCostsInput!): UpdateStaticadditionalcostsMutation
  "Обновить Техническую проблему. Все NOT NULL поля - обязательные"
  updateTechProblem(id: ID!, input: UpdateTechProblemsInput!): UpdateTechproblemMutation
  "Обновить Подсемейство конструкции. Все NOT NULL поля - обязательные"
  updateUnderFamilyConstruction(id: ID!, input: UpdateUnderFamilyConstructionInput!): UpdateUnderfamilyconstructionMutation
  "Обновить Пользователя. Все NOT NULL поля - обязательные"
  updateUser(id: ID!, input: UpdateCustomUserInput!): UpdateUserMutation
  "Обновить Группу. Все NOT NULL поля - обязательные"
  updateUserGroup(id: ID!, input: UpdateGroupInput!): UpdateUsergroupMutation
  "Обновить Право. Все NOT NULL поля - обязательные"
  updateUserPermission(id: ID!, input: UpdatePermissionInput!): UpdateUserpermissionMutation
  "Обновить Сектор деятельности. Все NOT NULL поля - обязательные"
  updateWorkingSector(id: ID!, input: UpdateWorkingSectorInput!): UpdateWorkingsectorMutation
  "Выгрузить информацию о пакетном размещении"
  uploadPackages(
    "Строка с закодированным в Base64 файлом в формате *.xlsx"
    file: String!
  ): UploadPackages
  """

  Verify user account.

  Receive the token that was sent by email.
  If the token is valid, make the user verified
  by making the `user.status.verified` field true.
  """
  verifyAccount(token: String!): VerifyAccount
  """

  Verify user secondary email.

  Receive the token that was sent by email.
  User is already verified when using this mutation.

  If the token is valid, add the secondary email
  to `user.status.secondary_email` field.

  Note that until the secondary email is verified,
  it has not been saved anywhere beyond the token,
  so it can still be used to create a new account.
  After being verified, it will no longer be available.
  """
  verifySecondaryEmail(token: String!): VerifySecondaryEmail
  "Same as `grapgql_jwt` implementation, with standard output."
  verifyToken(token: String!): VerifyToken
}

"""

Obtain JSON web token for given user.

Allow to perform login with different fields,
and secondary email if set. The fields are
defined on settings.

Not verified users can login by default. This
can be changes on settings.

If user is archived, make it unarchive and
return `unarchiving=True` on output.
"""
type ObtainJSONWebToken {
  errors: ExpectedErrorType
  refreshToken: String
  success: Boolean
  token: String
  unarchiving: Boolean
  user: UserNode
}

"Пакет"
type PackageObjectType {
  "Город"
  city: String
  "Идентификатор пакета"
  id: ID
  "Месяц"
  month: String
  "Статистика по промежуткам"
  reservationStats: [PeriodCountType]
  "Всего сторон в пакете"
  sidesCount: Int
  "Наименование пакета"
  title: String
  "Год"
  year: Int
}

type PackageType {
  "Пакет -> Город"
  city: VCityNode
  "Стророны конструкции -> Пакет"
  constructionSides(advertisingSide_Code: String, advertisingSide_Code_Isnull: Boolean, advertisingSide_Side_Code: String, advertisingSide_Side_Code_Isnull: Boolean, advertisingSide_Side_Format_Code: String, advertisingSide_Side_Format_Code_Isnull: Boolean, advertisingSide_Side_Format_Model_Title: String, advertisingSide_Side_Format_Model_Title_Icontains: String, advertisingSide_Side_Format_Model_Underfamily_Family_Id: ID, advertisingSide_Side_Format_Model_Underfamily_Family_Id_Isnull: Boolean, advertisingSide_Side_Format_Model_Underfamily_Family_Title: String, advertisingSide_Side_Format_Model_Underfamily_Family_Title_Icontains: String, advertisingSide_Side_Format_Model_Underfamily_Title: String, advertisingSide_Side_Format_Model_Underfamily_Title_Icontains: String, advertisingSide_Side_Format_Title: String, advertisingSide_Side_Format_Title_Icontains: String, advertisingSide_Side_Size: String, advertisingSide_Side_Size_Icontains: String, advertisingSide_Side_Title: String, advertisingSide_Side_Title_Icontains: String, after: String, before: String, constructionId: ID, constructionId_Isnull: Boolean, construction_Location_LegalAddress_Address: String, construction_Location_LegalAddress_Address_Icontains: String, construction_Location_MarketingAddress_Address: String, construction_Location_MarketingAddress_Address_Icontains: String, construction_Location_Postcode_District_City_Id: ID, construction_Location_Postcode_District_City_Id_Isnull: Boolean, construction_Location_Postcode_District_City_Title: String, construction_Location_Postcode_District_City_Title_Icontains: String, construction_Location_Postcode_District_Id: ID, construction_Location_Postcode_District_Id_Isnull: Boolean, construction_Location_Postcode_District_Title: String, construction_Location_Postcode_District_Title_Icontains: String, construction_Location_Postcode_Title: String, construction_Location_Postcode_Title_Isnull: Boolean, construction_NonrtsOwner_Id: ID, construction_NonrtsOwner_Id_Isnull: Boolean, construction_NonrtsOwner_Title: String, construction_NonrtsOwner_Title_Icontains: String, construction_NumInDistrict: Int, construction_NumInDistrict_Gt: Int, construction_NumInDistrict_Gte: Int, construction_NumInDistrict_Lt: Int, construction_NumInDistrict_Lte: Int, construction_StatusConnection: Boolean, construction_StatusConnection_Isnull: Boolean, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, reservation_DateFrom: DateTime, reservation_DateFrom_Gt: DateTime, reservation_DateFrom_Gte: DateTime, reservation_DateFrom_Lt: DateTime, reservation_DateFrom_Lte: DateTime, reservation_DateTo: DateTime, reservation_DateTo_Gt: DateTime, reservation_DateTo_Gte: DateTime, reservation_DateTo_Lt: DateTime, reservation_DateTo_Lte: DateTime, reservation_ReservationType_Title: String, reservation_ReservationType_Title_Icontains: String, reservation_ReservationType_Title_Iregex: String, reservation_ReservationType_Title_Regex: String): VConstructionSideOptimizedNodeConnection!
  id: ID!
  "Месяц"
  month: PackageMonth!
  "Бронирования Пакета -> Пакет"
  reservationPackages(after: String, before: String, dateFrom: DateTime, dateFrom_Gt: DateTime, dateFrom_Gte: DateTime, dateFrom_Lt: DateTime, dateFrom_Lte: DateTime, dateTo: DateTime, dateTo_Gt: DateTime, dateTo_Gte: DateTime, dateTo_Lt: DateTime, dateTo_Lte: DateTime, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VReservationPackageNodeConnection!
  "Наименование пакета"
  title: String
  "Год"
  year: Int!
}

"Статистика бронирования по пакетам"
type PackagesInfoQuery {
  packagesStatistic: [PackageObjectType]
  "Данные пагинации"
  pageInfo: PageInfoApi
}

"The Relay compliant `PageInfo` type, containing data necessary to paginate this connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "Total count of items in the queryset"
  totalCount: Int
}

"Данные пагинации"
type PageInfoApi {
  "Длина текущей выборки"
  limit: Int
  "Начальное смещение в полной выборке"
  offset: Int
  "Длина полной выборки"
  totalCount: Int
}

type PartnerType {
  "Идентификатор партнера"
  id: ID
}

"""

Change account password when user knows the old password.

A new token and refresh token are sent. User must be verified.
"""
type PasswordChange {
  errors: ExpectedErrorType
  refreshToken: String
  success: Boolean
  token: String
}

"""

Change user password without old password.

Receive the token that was sent by email.

If token and new passwords are valid, update
user password and in case of using refresh
tokens, revoke all of them.

Also, if user has not been verified yet, verify it.
"""
type PasswordReset {
  errors: ExpectedErrorType
  success: Boolean
}

"Статистика за период"
type PeriodCountType {
  "Число броней"
  count: Int
  "Первый день периода"
  periodFirstDay: Date
  "Последний день периода"
  periodLastDay: Date
}

type PeriodCounts {
  "Количество"
  count: Int
  "дата начала периода, для которого произведена группировка"
  periodFirstDay: DateTime
  "Название периода"
  type: String
}

type ProjectType {
  "Список идентификаторов приложений к договору"
  appendices: [AppendixType]
  "Список идентификаторов договоров"
  contracts: [ContractType]
  "Идентификатор проекта"
  id: ID
  "Список ролей"
  roles: [Role]
}

type Query {
  "Количество монтажей всего, выполненных экипажем"
  kpiByCrewId(
    "Дата начала периода. Указанный день включается в выборку [date_from:date_to)"
    dateFrom: Date,
    "Дата конца периода. Указанный день не включается в выборку [date_from:date_to)"
    dateTo: Date,
    "Идентификатор экипажа"
    id: ID!,
    "Период, за который производится выборка. Если указан тип CUSTOM, фильтрует в диапазоне [date_from, date_to]"
    period: Period,
    "Время суток. DAY=[9, 18], NIGHT=(18, 9)"
    timeOfDay: TimeOfDay,
    "Тип монтирования"
    typeOfMounting: TypeOfMounting,
    "Единица времени, по которой производится агрегация"
    unitOfTime: UnitOfTime
  ): [PeriodCounts]
  "construction_historys"
  listConstructionChangesHistory(after: String, before: String, first: Int, last: Int, offset: Int, targetId: ID, targetId_Isnull: Boolean): Vconstruction_historyOptimizedNodeConnection
  "construction_historys (неоптимизированный запрос)"
  listConstructionChangesHistoryUnoptimized(after: String, before: String, first: Int, last: Int, offset: Int, targetId: ID, targetId_Isnull: Boolean): Vconstruction_historyNodeConnection
  "construction_side_historys"
  listConstructionSideChangesHistory(after: String, before: String, first: Int, last: Int, offset: Int, targetId: ID, targetId_Isnull: Boolean): Vconstruction_side_historyOptimizedNodeConnection
  "construction_side_historys (неоптимизированный запрос)"
  listConstructionSideChangesHistoryUnoptimized(after: String, before: String, first: Int, last: Int, offset: Int, targetId: ID, targetId_Isnull: Boolean): Vconstruction_side_historyNodeConnection
  me: UserNode
  "Рекламные промо-компания"
  searchAdvertPromoCompanies(
    after: String,
    before: String,
    designs_Archived: Boolean,
    designs_Archived_Isnull: Boolean,
    designs_IsCurrent: Boolean,
    designs_IsCurrent_Isnull: Boolean,
    designs_StartedAt: DateTime,
    designs_StartedAt_Gt: DateTime,
    designs_StartedAt_Gte: DateTime,
    designs_StartedAt_Lt: DateTime,
    designs_StartedAt_Lte: DateTime,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    projectId: ID,
    projectId_Isnull: Boolean,
    project_BrandId: ID,
    project_BrandId_Isnull: Boolean,
    project_Brand_Title: String,
    project_Brand_Title_Icontains: String,
    project_ClientId: ID,
    project_ClientId_Isnull: Boolean,
    project_Client_Title: String,
    project_Client_Title_Icontains: String,
    project_ProjectCities_CityId: ID,
    project_ProjectCities_CityId_Isnull: Boolean,
    project_ProjectCities_City_Title: String,
    project_ProjectCities_City_Title_Icontains: String,
    project_ProjectCities_Count: Int,
    project_ProjectCities_Count_Gt: Int,
    project_ProjectCities_Count_Gte: Int,
    project_ProjectCities_Count_Lt: Int,
    project_ProjectCities_Count_Lte: Int,
    project_ProjectCities_DistributedCount: Int,
    project_ProjectCities_DistributedCount_Gt: Int,
    project_ProjectCities_DistributedCount_Gte: Int,
    project_ProjectCities_DistributedCount_Lt: Int,
    project_ProjectCities_DistributedCount_Lte: Int,
    project_ProjectCities_SaledCount: Int,
    project_ProjectCities_SaledCount_Gt: Int,
    project_ProjectCities_SaledCount_Gte: Int,
    project_ProjectCities_SaledCount_Lt: Int,
    project_ProjectCities_SaledCount_Lte: Int
  ): VAdvertPromoCompanyOptimizedNodeConnection
  "Рекламные промо-компания (неоптимизированный запрос)"
  searchAdvertPromoCompaniesUnoptimized(after: String, before: String, designs_Archived: Boolean, designs_Archived_Isnull: Boolean, designs_IsCurrent: Boolean, designs_IsCurrent_Isnull: Boolean, designs_StartedAt: DateTime, designs_StartedAt_Gt: DateTime, designs_StartedAt_Gte: DateTime, designs_StartedAt_Lt: DateTime, designs_StartedAt_Lte: DateTime, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, projectId: ID, projectId_Isnull: Boolean, project_BrandId: ID, project_BrandId_Isnull: Boolean, project_Brand_Title: String, project_Brand_Title_Icontains: String, project_ClientId: ID, project_ClientId_Isnull: Boolean, project_Client_Title: String, project_Client_Title_Icontains: String, project_ProjectCities_CityId: ID, project_ProjectCities_CityId_Isnull: Boolean, project_ProjectCities_City_Title: String, project_ProjectCities_City_Title_Icontains: String, project_ProjectCities_Count: Int, project_ProjectCities_Count_Gt: Int, project_ProjectCities_Count_Gte: Int, project_ProjectCities_Count_Lt: Int, project_ProjectCities_Count_Lte: Int, project_ProjectCities_DistributedCount: Int, project_ProjectCities_DistributedCount_Gt: Int, project_ProjectCities_DistributedCount_Gte: Int, project_ProjectCities_DistributedCount_Lt: Int, project_ProjectCities_DistributedCount_Lte: Int, project_ProjectCities_SaledCount: Int, project_ProjectCities_SaledCount_Gt: Int, project_ProjectCities_SaledCount_Gte: Int, project_ProjectCities_SaledCount_Lt: Int, project_ProjectCities_SaledCount_Lte: Int): VAdvertPromoCompanyNodeConnection
  "Рекламные стороны"
  searchAdvertisingSide(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, side_Id: ID, side_Id_Isnull: Boolean, title: String, title_Icontains: String): VAdvertisingSideNodeConnection
  "Рекламные стороны (protobuf)"
  searchAdvertisingSidesOptim(
    "Код рекламной стороны"
    advertisingSide_Code: String,
    "Код стороны"
    advertisingSide_Side_Code: String,
    "Код формата"
    advertisingSide_Side_Format_Code_Icontains: String,
    "Идентификатор семейства конструкции"
    advertisingSide_Side_Format_Model_Underfamily_Family_Id: ID,
    "Наименование формата точно совпадает"
    advertisingSide_Side_Format_Title: String,
    "Наименование формата содержит заданную подстроку (регистронезависимо)"
    advertisingSide_Side_Format_Title_Icontains: String,
    "Размер стороны точно совпадает"
    advertisingSide_Side_Size: String,
    "Размер стороны содержит заданную подстроку (регистронезависимо)"
    advertisingSide_Side_Size_Icontains: String,
    "Наименование типа стороны точно совпадает"
    advertisingSide_Side_Title: String,
    "Наименование типа стороны содержит заданную подстроку (регистронезависимо)"
    advertisingSide_Side_Title_Icontains: String,
    "Список кодов"
    codes: [AdvertisingSideCodeInputObjectType],
    "Юридический адрес конструкции содержит заданную подстроку (регистронезависимо)"
    construction_Location_LegalAddress_Address_Icontains: String,
    "Маркетинговый адрес конструкции содержит заданную подстроку (регистронезависимо)"
    construction_Location_MarketingAddress_Address_Icontains: String,
    "Идентификатор маркетингового адреса конструкции"
    construction_Location_MarketingAddress_Id: ID,
    "Идентификатор города"
    construction_Location_Postcode_District_City_Id: ID,
    "Идентификатор района"
    construction_Location_Postcode_District_Id: ID,
    "Почтовый код содержит подстроку"
    construction_Location_Postcode_Title_Icontains: String,
    "Идентификатор владельца"
    construction_NonrtsOwner_Id: ID,
    "Наименование владельца содержит заданную подстроку (регистронезависимо)"
    construction_NonrtsOwner_Title_Icontains: String,
    "Номер в районе"
    construction_NumInDistrict: Int,
    "Освещение - да либо нет (горит либо не горит)"
    construction_StatusConnection: Boolean,
    "Параметр быстрого поиска"
    fastSearch: String,
    "Длина текущей выборки"
    limit: Int,
    "Начальное смещение в полной выборке"
    offset: Int,
    "Порядок сортировки. Подчеркивание в начале имени означает сортировку по убыванию"
    orderBy: [AdvertisingSidesOrderBy],
    "Идентификатор пакета"
    packageId: ID,
    "Намиенование статуса бронирования соответствует заданному регулярному выражению"
    reservationType_Title_Iregex: String,
    "&gt;= заданной даты начала бронирования"
    reservation_DateFrom_Gte: DateTime,
    "&lt;= заданной даты окончания бронирования"
    reservation_DateTo_Lte: DateTime
  ): ContentFieldConnection
  "Агентские комиссии"
  searchAgencyCommission(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VAgencyCommissionNodeConnection
  "Монтажи (graphql-структура)"
  searchAppMountingGql(
    "Выбрать архивные задачи (true) либо текущие (false)"
    archived: Boolean,
    "Идентификатор города"
    cityId: ID,
    "Название города (точное совпадение)"
    cityTitle: String,
    "Название города содержит (регистронезависимо)"
    cityTitle_Icontains: String,
    "Выбрать общие задачи (true) либо монтажи (false)"
    commonTask: Boolean,
    "Идентификатор района"
    districtId: ID,
    "Демонтаж на заданную дату"
    endMounting_Contains: Date,
    "Демонтаж после заданной даты"
    endMounting_Gt: DateTime,
    "Демонтаж на заданную дату или позднее"
    endMounting_Gte: DateTime,
    "Демонтаж до заданной даты"
    endMounting_Lt: DateTime,
    "Демонтаж на заданную дату или ранее"
    endMounting_Lte: DateTime,
    "Параметр быстрого поиска"
    fastSearch: String,
    "Идентификатор формата"
    formatId: ID,
    "Название формата (точное совпадение)"
    formatTitle: String,
    "Длина текущей выборки"
    limit: Int,
    "Тип задачи содержит (регистронезависимо)"
    mountingTask_Title_Icontains: String,
    "Начальное смещение в полной выборке"
    offset: Int,
    "Порядок сортировки. Подчеркивание в начале имени означает сортировку по убыванию"
    orderBy: [MountingOrderBy],
    "Идентификатор почтового кода"
    postcodeId: ID,
    "Идентификатор проекта"
    projectId: ID,
    "Монтаж на заданную дату"
    startMounting_Contains: Date,
    "Монтаж после заданной даты"
    startMounting_Gt: DateTime,
    "Монтаж на заданную дату или позднее"
    startMounting_Gte: DateTime,
    "Монтаж до заданной даты"
    startMounting_Lt: DateTime,
    "Монтаж на заданную дату или ранее"
    startMounting_Lte: DateTime
  ): MountingFieldConnection
  "Монтажи (json-строка)"
  searchAppMountingJson(
    "Выбрать архивные задачи (true) либо текущие (false)"
    archived: Boolean,
    "Идентификатор города"
    cityId: ID,
    "Название города (точное совпадение)"
    cityTitle: String,
    "Название города содержит (регистронезависимо)"
    cityTitle_Icontains: String,
    "Выбрать общие задачи (true) либо монтажи (false)"
    commonTask: Boolean,
    "Идентификатор района"
    districtId: ID,
    "Демонтаж на заданную дату"
    endMounting_Contains: Date,
    "Демонтаж после заданной даты"
    endMounting_Gt: DateTime,
    "Демонтаж на заданную дату или позднее"
    endMounting_Gte: DateTime,
    "Демонтаж до заданной даты"
    endMounting_Lt: DateTime,
    "Демонтаж на заданную дату или ранее"
    endMounting_Lte: DateTime,
    "Параметр быстрого поиска"
    fastSearch: String,
    "Идентификатор формата"
    formatId: ID,
    "Название формата (точное совпадение)"
    formatTitle: String,
    "Длина текущей выборки"
    limit: Int,
    "Тип задачи содержит (регистронезависимо)"
    mountingTask_Title_Icontains: String,
    "Начальное смещение в полной выборке"
    offset: Int,
    "Порядок сортировки. Подчеркивание в начале имени означает сортировку по убыванию"
    orderBy: [MountingOrderBy],
    "Идентификатор почтового кода"
    postcodeId: ID,
    "Идентификатор проекта"
    projectId: ID,
    "Монтаж на заданную дату"
    startMounting_Contains: Date,
    "Монтаж после заданной даты"
    startMounting_Gt: DateTime,
    "Монтаж на заданную дату или позднее"
    startMounting_Gte: DateTime,
    "Монтаж до заданной даты"
    startMounting_Lt: DateTime,
    "Монтаж на заданную дату или ранее"
    startMounting_Lte: DateTime
  ): ContentJSONFieldConnection
  "Приложения к договорам"
  searchAppendix(
    after: String,
    before: String,
    code: String,
    code_Icontains: String,
    contractId: ID,
    contractId_Isnull: Boolean,
    contract_Code: String,
    contract_Code_Icontains: String,
    contract_PartnerId: ID,
    contract_PartnerId_Isnull: Boolean,
    contract_Partner_Title: String,
    contract_Partner_Title_Icontains: String,
    contract_SerialNumber: String,
    contract_SerialNumber_Icontains: String,
    createdDate: DateTime,
    createdDate_Gt: DateTime,
    createdDate_Gte: DateTime,
    createdDate_Lt: DateTime,
    createdDate_Lte: DateTime,
    creator: ID,
    creator_Isnull: Boolean,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    periodEndDate: DateTime,
    periodEndDate_Gt: DateTime,
    periodEndDate_Gte: DateTime,
    periodEndDate_Lt: DateTime,
    periodEndDate_Lte: DateTime,
    periodStartDate: DateTime,
    periodStartDate_Gt: DateTime,
    periodStartDate_Gte: DateTime,
    periodStartDate_Lt: DateTime,
    periodStartDate_Lte: DateTime,
    projectId: ID,
    projectId_Isnull: Boolean,
    project_BackOfficeManagerId: ID,
    project_BackOfficeManagerId_Isnull: Boolean,
    project_BackOfficeManager_FirstName: String,
    project_BackOfficeManager_FirstName_Icontains: String,
    project_BackOfficeManager_LastName: String,
    project_BackOfficeManager_LastName_Icontains: String,
    project_BrandId: ID,
    project_BrandId_Isnull: Boolean,
    project_Brand_Title: String,
    project_Brand_Title_Icontains: String,
    project_ClientId: ID,
    project_ClientId_Isnull: Boolean,
    project_Client_Title: String,
    project_Client_Title_Icontains: String,
    project_Code: String,
    project_Code_Icontains: String,
    project_Id: ID,
    project_Id_Isnull: Boolean,
    project_Title: String,
    project_Title_Icontains: String,
    returnStatus: Boolean,
    returnStatus_Isnull: Boolean,
    salesManagerId: ID,
    salesManagerId_Isnull: Boolean,
    salesManager_FirstName: String,
    salesManager_FirstName_Icontains: String,
    salesManager_LastName: String,
    salesManager_LastName_Icontains: String
  ): VAppendixOptimizedNodeConnection
  "Приложения к договорам (неоптимизированный запрос)"
  searchAppendixUnoptimized(after: String, before: String, code: String, code_Icontains: String, contractId: ID, contractId_Isnull: Boolean, contract_Code: String, contract_Code_Icontains: String, contract_PartnerId: ID, contract_PartnerId_Isnull: Boolean, contract_Partner_Title: String, contract_Partner_Title_Icontains: String, contract_SerialNumber: String, contract_SerialNumber_Icontains: String, createdDate: DateTime, createdDate_Gt: DateTime, createdDate_Gte: DateTime, createdDate_Lt: DateTime, createdDate_Lte: DateTime, creator: ID, creator_Isnull: Boolean, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, periodEndDate: DateTime, periodEndDate_Gt: DateTime, periodEndDate_Gte: DateTime, periodEndDate_Lt: DateTime, periodEndDate_Lte: DateTime, periodStartDate: DateTime, periodStartDate_Gt: DateTime, periodStartDate_Gte: DateTime, periodStartDate_Lt: DateTime, periodStartDate_Lte: DateTime, projectId: ID, projectId_Isnull: Boolean, project_BackOfficeManagerId: ID, project_BackOfficeManagerId_Isnull: Boolean, project_BackOfficeManager_FirstName: String, project_BackOfficeManager_FirstName_Icontains: String, project_BackOfficeManager_LastName: String, project_BackOfficeManager_LastName_Icontains: String, project_BrandId: ID, project_BrandId_Isnull: Boolean, project_Brand_Title: String, project_Brand_Title_Icontains: String, project_ClientId: ID, project_ClientId_Isnull: Boolean, project_Client_Title: String, project_Client_Title_Icontains: String, project_Code: String, project_Code_Icontains: String, project_Id: ID, project_Id_Isnull: Boolean, project_Title: String, project_Title_Icontains: String, returnStatus: Boolean, returnStatus_Isnull: Boolean, salesManagerId: ID, salesManagerId_Isnull: Boolean, salesManager_FirstName: String, salesManager_FirstName_Icontains: String, salesManager_LastName: String, salesManager_LastName_Icontains: String): VAppendixNodeConnection
  "Бренды"
  searchBrand(
    after: String,
    before: String,
    fastSearch: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partners_Id: ID,
    partners_Id_Isnull: Boolean,
    partners_Title: String,
    partners_Title_Icontains: String,
    title: String,
    title_Icontains: String,
    workingSector_Description: String,
    workingSector_Description_Icontains: String
  ): VBrandOptimizedNodeConnection
  "Изображения брендов"
  searchBrandImage(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VBrandImageNodeConnection
  "Бренды (неоптимизированный запрос)"
  searchBrandUnoptimized(after: String, before: String, fastSearch: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, partners_Id: ID, partners_Id_Isnull: Boolean, partners_Title: String, partners_Title_Icontains: String, title: String, title_Icontains: String, workingSector_Description: String, workingSector_Description_Icontains: String): VBrandNodeConnection
  "Города"
  searchCity(after: String, before: String, country_Id: ID, country_Id_Isnull: Boolean, country_Title: String, country_Title_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, title: String, title_Icontains: String): VCityNodeConnection
  "Типы клиентов"
  searchClientType(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VClientTypeNodeConnection
  "Конструкции"
  searchConstruction(
    active: Boolean,
    active_Isnull: Boolean,
    after: String,
    before: String,
    buhInventNumber: String,
    buhInventNumber_Icontains: String,
    coordinates: String,
    coordinates_Isnull: Boolean,
    createdAt: DateTime,
    createdAt_Gt: DateTime,
    createdAt_Gte: DateTime,
    createdAt_Lt: DateTime,
    createdAt_Lte: DateTime,
    crew: ID,
    crew_Isnull: Boolean,
    fastSearch: String,
    first: Int,
    format_Title: String,
    id: ID,
    id_Isnull: Boolean,
    isNonrts: Boolean,
    isNonrts_Isnull: Boolean,
    last: Int,
    locationId_Isnull: Boolean,
    location_Area: Float,
    location_Area_Gt: Float,
    location_Area_Gte: Float,
    location_Area_Lt: Float,
    location_Area_Lte: Float,
    location_HasArea: Boolean,
    location_HasArea_Isnull: Boolean,
    location_LegalAddress_Address: String,
    location_LegalAddress_Address_Icontains: String,
    location_MarketingAddress_Address: String,
    location_MarketingAddress_Address_Icontains: String,
    location_Postcode_District_City_Country_Title: String,
    location_Postcode_District_City_Country_Title_Icontains: String,
    location_Postcode_District_City_Title: String,
    location_Postcode_District_City_Title_Icontains: String,
    location_Postcode_District_Title: String,
    location_Postcode_District_Title_Icontains: String,
    location_Postcode_Title: String,
    location_Postcode_Title_Icontains: String,
    model_Title: String,
    model_Title_Icontains: String,
    model_Underfamily_Family_Title: String,
    model_Underfamily_Family_Title_Icontains: String,
    model_Underfamily_Title: String,
    model_Underfamily_Title_Icontains: String,
    obstruction_Title: String,
    obstruction_Title_Icontains: String,
    offset: Int,
    "Порядок"
    orderBy: String,
    statusConnection: Boolean,
    statusConnection_Isnull: Boolean,
    techInventNumber: String,
    techInventNumber_Icontains: String,
    techPhoneConstruction: String,
    techPhoneConstruction_Icontains: String,
    updatedAt: DateTime,
    updatedAt_Gt: DateTime,
    updatedAt_Gte: DateTime,
    updatedAt_Lt: DateTime,
    updatedAt_Lte: DateTime
  ): VConstructionOptimizedNodeConnection
  "Множественные форматы конструкций"
  searchConstructionFormats(after: String, before: String, count: Int, count_Gt: Int, count_Gte: Int, count_Lt: Int, count_Lte: Int, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VConstructionFormatsNodeConnection
  "Стороны конструкций"
  searchConstructionSide(advertisingSide_Code: String, advertisingSide_Code_Isnull: Boolean, advertisingSide_Side_Code: String, advertisingSide_Side_Code_Isnull: Boolean, advertisingSide_Side_Format_Code: String, advertisingSide_Side_Format_Code_Isnull: Boolean, advertisingSide_Side_Format_Model_Title: String, advertisingSide_Side_Format_Model_Title_Icontains: String, advertisingSide_Side_Format_Model_Underfamily_Family_Id: ID, advertisingSide_Side_Format_Model_Underfamily_Family_Id_Isnull: Boolean, advertisingSide_Side_Format_Model_Underfamily_Family_Title: String, advertisingSide_Side_Format_Model_Underfamily_Family_Title_Icontains: String, advertisingSide_Side_Format_Model_Underfamily_Title: String, advertisingSide_Side_Format_Model_Underfamily_Title_Icontains: String, advertisingSide_Side_Format_Title: String, advertisingSide_Side_Format_Title_Icontains: String, advertisingSide_Side_Size: String, advertisingSide_Side_Size_Icontains: String, advertisingSide_Side_Title: String, advertisingSide_Side_Title_Icontains: String, after: String, before: String, constructionId: ID, constructionId_Isnull: Boolean, construction_Location_LegalAddress_Address: String, construction_Location_LegalAddress_Address_Icontains: String, construction_Location_MarketingAddress_Address: String, construction_Location_MarketingAddress_Address_Icontains: String, construction_Location_Postcode_District_City_Id: ID, construction_Location_Postcode_District_City_Id_Isnull: Boolean, construction_Location_Postcode_District_City_Title: String, construction_Location_Postcode_District_City_Title_Icontains: String, construction_Location_Postcode_District_Id: ID, construction_Location_Postcode_District_Id_Isnull: Boolean, construction_Location_Postcode_District_Title: String, construction_Location_Postcode_District_Title_Icontains: String, construction_Location_Postcode_Title: String, construction_Location_Postcode_Title_Isnull: Boolean, construction_NonrtsOwner_Id: ID, construction_NonrtsOwner_Id_Isnull: Boolean, construction_NonrtsOwner_Title: String, construction_NonrtsOwner_Title_Icontains: String, construction_NumInDistrict: Int, construction_NumInDistrict_Gt: Int, construction_NumInDistrict_Gte: Int, construction_NumInDistrict_Lt: Int, construction_NumInDistrict_Lte: Int, construction_StatusConnection: Boolean, construction_StatusConnection_Isnull: Boolean, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, reservation_DateFrom: DateTime, reservation_DateFrom_Gt: DateTime, reservation_DateFrom_Gte: DateTime, reservation_DateFrom_Lt: DateTime, reservation_DateFrom_Lte: DateTime, reservation_DateTo: DateTime, reservation_DateTo_Gt: DateTime, reservation_DateTo_Gte: DateTime, reservation_DateTo_Lt: DateTime, reservation_DateTo_Lte: DateTime, reservation_ReservationType_Title: String, reservation_ReservationType_Title_Icontains: String, reservation_ReservationType_Title_Iregex: String, reservation_ReservationType_Title_Regex: String): VConstructionSideOptimizedNodeConnection
  "Стороны конструкций (неоптимизированный запрос)"
  searchConstructionSideUnoptimized(advertisingSide_Code: String, advertisingSide_Code_Isnull: Boolean, advertisingSide_Side_Code: String, advertisingSide_Side_Code_Isnull: Boolean, advertisingSide_Side_Format_Code: String, advertisingSide_Side_Format_Code_Isnull: Boolean, advertisingSide_Side_Format_Model_Title: String, advertisingSide_Side_Format_Model_Title_Icontains: String, advertisingSide_Side_Format_Model_Underfamily_Family_Id: ID, advertisingSide_Side_Format_Model_Underfamily_Family_Id_Isnull: Boolean, advertisingSide_Side_Format_Model_Underfamily_Family_Title: String, advertisingSide_Side_Format_Model_Underfamily_Family_Title_Icontains: String, advertisingSide_Side_Format_Model_Underfamily_Title: String, advertisingSide_Side_Format_Model_Underfamily_Title_Icontains: String, advertisingSide_Side_Format_Title: String, advertisingSide_Side_Format_Title_Icontains: String, advertisingSide_Side_Size: String, advertisingSide_Side_Size_Icontains: String, advertisingSide_Side_Title: String, advertisingSide_Side_Title_Icontains: String, after: String, before: String, constructionId: ID, constructionId_Isnull: Boolean, construction_Location_LegalAddress_Address: String, construction_Location_LegalAddress_Address_Icontains: String, construction_Location_MarketingAddress_Address: String, construction_Location_MarketingAddress_Address_Icontains: String, construction_Location_Postcode_District_City_Id: ID, construction_Location_Postcode_District_City_Id_Isnull: Boolean, construction_Location_Postcode_District_City_Title: String, construction_Location_Postcode_District_City_Title_Icontains: String, construction_Location_Postcode_District_Id: ID, construction_Location_Postcode_District_Id_Isnull: Boolean, construction_Location_Postcode_District_Title: String, construction_Location_Postcode_District_Title_Icontains: String, construction_Location_Postcode_Title: String, construction_Location_Postcode_Title_Isnull: Boolean, construction_NonrtsOwner_Id: ID, construction_NonrtsOwner_Id_Isnull: Boolean, construction_NonrtsOwner_Title: String, construction_NonrtsOwner_Title_Icontains: String, construction_NumInDistrict: Int, construction_NumInDistrict_Gt: Int, construction_NumInDistrict_Gte: Int, construction_NumInDistrict_Lt: Int, construction_NumInDistrict_Lte: Int, construction_StatusConnection: Boolean, construction_StatusConnection_Isnull: Boolean, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, reservation_DateFrom: DateTime, reservation_DateFrom_Gt: DateTime, reservation_DateFrom_Gte: DateTime, reservation_DateFrom_Lt: DateTime, reservation_DateFrom_Lte: DateTime, reservation_DateTo: DateTime, reservation_DateTo_Gt: DateTime, reservation_DateTo_Gte: DateTime, reservation_DateTo_Lt: DateTime, reservation_DateTo_Lte: DateTime, reservation_ReservationType_Title: String, reservation_ReservationType_Title_Icontains: String, reservation_ReservationType_Title_Iregex: String, reservation_ReservationType_Title_Regex: String): VConstructionSideNodeConnection
  "Конструкции (неоптимизированный запрос)"
  searchConstructionUnoptimized(active: Boolean, active_Isnull: Boolean, after: String, before: String, buhInventNumber: String, buhInventNumber_Icontains: String, coordinates: String, coordinates_Isnull: Boolean, createdAt: DateTime, createdAt_Gt: DateTime, createdAt_Gte: DateTime, createdAt_Lt: DateTime, createdAt_Lte: DateTime, crew: ID, crew_Isnull: Boolean, fastSearch: String, first: Int, id: ID, id_Isnull: Boolean, isNonrts: Boolean, isNonrts_Isnull: Boolean, last: Int, locationId_Isnull: Boolean, location_Area: Float, location_Area_Gt: Float, location_Area_Gte: Float, location_Area_Lt: Float, location_Area_Lte: Float, location_HasArea: Boolean, location_HasArea_Isnull: Boolean, location_LegalAddress_Address: String, location_LegalAddress_Address_Icontains: String, location_MarketingAddress_Address: String, location_MarketingAddress_Address_Icontains: String, location_Postcode_District_City_Country_Title: String, location_Postcode_District_City_Country_Title_Icontains: String, location_Postcode_District_City_Title: String, location_Postcode_District_City_Title_Icontains: String, location_Postcode_District_Title: String, location_Postcode_District_Title_Icontains: String, location_Postcode_Title: String, location_Postcode_Title_Icontains: String, model_Title: String, model_Title_Icontains: String, model_Underfamily_Family_Title: String, model_Underfamily_Family_Title_Icontains: String, model_Underfamily_Title: String, model_Underfamily_Title_Icontains: String, obstruction_Title: String, obstruction_Title_Icontains: String, offset: Int, statusConnection: Boolean, statusConnection_Isnull: Boolean, techInventNumber: String, techInventNumber_Icontains: String, techPhoneConstruction: String, techPhoneConstruction_Icontains: String, updatedAt: DateTime, updatedAt_Gt: DateTime, updatedAt_Gte: DateTime, updatedAt_Lt: DateTime, updatedAt_Lte: DateTime): VConstructionNodeConnection
  "Контактные лица"
  searchContactPerson(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VContactPersonNodeConnection
  "Договоры"
  searchContract(
    after: String,
    before: String,
    code: String,
    code_Icontains: String,
    contractType_Name: String,
    contractType_Name_Icontains: String,
    creator_Name: String,
    creator_Name_Icontains: String,
    end: DateTime,
    end_Gt: DateTime,
    end_Gte: DateTime,
    end_Lt: DateTime,
    end_Lte: DateTime,
    fastSearch: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    initiator_Name: String,
    initiator_Name_Icontains: String,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partner_Title: String,
    partner_Title_Icontains: String,
    registrationDate: DateTime,
    registrationDate_Gt: DateTime,
    registrationDate_Gte: DateTime,
    registrationDate_Lt: DateTime,
    registrationDate_Lte: DateTime,
    returnStatus: Boolean,
    returnStatus_Isnull: Boolean,
    start: DateTime,
    start_Gt: DateTime,
    start_Gte: DateTime,
    start_Lt: DateTime,
    start_Lte: DateTime
  ): VContractOptimizedNodeConnection
  "Типы договоров"
  searchContractType(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, name: String, name_Icontains: String, offset: Int): VContractTypeNodeConnection
  "Договоры (неоптимизированный запрос)"
  searchContractUnoptimized(after: String, before: String, code: String, code_Icontains: String, contractType_Name: String, contractType_Name_Icontains: String, creator_Name: String, creator_Name_Icontains: String, end: DateTime, end_Gt: DateTime, end_Gte: DateTime, end_Lt: DateTime, end_Lte: DateTime, fastSearch: String, first: Int, id: ID, id_Isnull: Boolean, initiator_Name: String, initiator_Name_Icontains: String, last: Int, offset: Int, partner_Title: String, partner_Title_Icontains: String, registrationDate: DateTime, registrationDate_Gt: DateTime, registrationDate_Gte: DateTime, registrationDate_Lt: DateTime, registrationDate_Lte: DateTime, returnStatus: Boolean, returnStatus_Isnull: Boolean, start: DateTime, start_Gt: DateTime, start_Gte: DateTime, start_Lt: DateTime, start_Lte: DateTime): VContractNodeConnection
  "Количество незавершенных монтажей"
  searchCountOfMountings: CountOfMountings
  "Страны"
  searchCountry(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, title: String, title_Icontains: String): VCountryNodeConnection
  "Экипажи"
  searchCrew(
    after: String,
    before: String,
    city_Title: String,
    city_Title_Icontains: String,
    constructions_Location_MarketingAddress_Address: String,
    constructions_Location_MarketingAddress_Address_Icontains: String,
    constructions_Location_Postcode_District_City_Title: String,
    constructions_Location_Postcode_District_City_Title_Icontains: String,
    constructions_Location_Postcode_District_Title: String,
    constructions_Location_Postcode_District_Title_Icontains: String,
    fastSearch: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    name: String,
    name_Icontains: String,
    offset: Int,
    "Порядок"
    orderBy: String,
    phone: String,
    phone_Icontains: String
  ): VCrewOptimizedNodeConnection
  "Экипажи (неоптимизированный запрос)"
  searchCrewUnoptimized(after: String, before: String, city_Title: String, city_Title_Icontains: String, constructions_Location_MarketingAddress_Address: String, constructions_Location_MarketingAddress_Address_Icontains: String, constructions_Location_Postcode_District_City_Title: String, constructions_Location_Postcode_District_City_Title_Icontains: String, constructions_Location_Postcode_District_Title: String, constructions_Location_Postcode_District_Title_Icontains: String, fastSearch: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, name: String, name_Icontains: String, offset: Int, phone: String, phone_Icontains: String): VCrewNodeConnection
  "Дизайны"
  searchDesign(advertPromoCompanyId: ID, advertPromoCompanyId_Isnull: Boolean, advertPromoCompany_ProjectId: ID, advertPromoCompany_ProjectId_Isnull: Boolean, after: String, before: String, fastSearch: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, title: String, title_Icontains: String): VDesignNodeConnection
  "Районы"
  searchDistrict(after: String, before: String, city_Id: ID, city_Id_Isnull: Boolean, city_Title: String, city_Title_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, title: String, title_Icontains: String): VDistrictNodeConnection
  "Должности"
  searchEmployeePosition(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, title: String, title_Icontains: String): VEmployeePositionNodeConnection
  "Семейства конструкций"
  searchFamilyConstruction(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, title: String, title_Icontains: String): VFamilyConstructionNodeConnection
  "Форматы"
  searchFormat(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, model_Id: ID, model_Id_Isnull: Boolean, model_Title: String, model_Title_Icontains: String, model_Underfamily_Family_Id: ID, model_Underfamily_Family_Id_Isnull: Boolean, model_Underfamily_Family_Title: String, model_Underfamily_Family_Title_Icontains: String, model_Underfamily_Id: ID, model_Underfamily_Id_Isnull: Boolean, model_Underfamily_Title: String, model_Underfamily_Title_Icontains: String, offset: Int, title: String, title_Icontains: String): VFormatNodeConnection
  "Уникальные наименования форматов"
  searchFormatTitles(
    "Код формата"
    code: String,
    "Код формата содержит (регистронезависимо)"
    code_Icontains: String,
    "Идентификатор семейства"
    model_Underfamily_Family_Id: ID,
    "Наименование семейства"
    model_Underfamily_Family_Title: String,
    "Наименование семейства содержит"
    model_Underfamily_Family_Title_Icontains: String,
    "Наименование стороны"
    sideTitle: String,
    "Наименование формата"
    title: String,
    "Наименование формата содержит (регистронезависимо)"
    title_Icontains: String
  ): FormatTitleQuery
  "Адресные справочники"
  searchLocAdress(address: String, address_Icontains: String, after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, postcode_District_City_Id: ID, postcode_District_City_Id_Isnull: Boolean, postcode_District_City_Title: String, postcode_District_City_Title_Icontains: String, postcode_District_Id: ID, postcode_District_Id_Isnull: Boolean, postcode_District_Title: String, postcode_District_Title_Icontains: String, postcode_Id: ID, postcode_Id_Isnull: Boolean, postcode_Title: String, postcode_Title_Icontains: String): VAddressesNodeConnection
  "Целевые назначения местоположений"
  searchLocPurpose(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, title: String, title_Icontains: String): VPurposeLocationNodeConnection
  "Статусы оформлений местоположений"
  searchLocRegistrationStatus(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, subcategory: String, subcategory_Icontains: String, title: String, title_Icontains: String): VRegistrationStatusLocationNodeConnection
  "Местоположения"
  searchLocation(
    after: String,
    area: Float,
    areaAct: String,
    areaActDate: DateTime,
    areaActDate_Gt: DateTime,
    areaActDate_Gte: DateTime,
    areaActDate_Lt: DateTime,
    areaActDate_Lte: DateTime,
    areaAct_Icontains: String,
    area_Gt: Float,
    area_Gte: Float,
    area_Lt: Float,
    area_Lte: Float,
    before: String,
    cadastralNumber: String,
    cadastralNumber_Icontains: String,
    comment: String,
    comment_Icontains: String,
    constructionsCount: Float,
    constructionsCount_Gt: Float,
    constructionsCount_Lt: Float,
    familyConstruction_Id: ID,
    familyConstruction_Id_Isnull: Boolean,
    familyConstruction_Title: String,
    familyConstruction_Title_Icontains: String,
    fastSearch: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    legalAddress_Address: String,
    legalAddress_Address_Icontains: String,
    marketingAddress_Address: String,
    marketingAddress_Address_Icontains: String,
    offset: Int,
    "Порядок"
    orderBy: String,
    postcode_District_City_Country_Title: String,
    postcode_District_City_Country_Title_Icontains: String,
    postcode_District_City_Title: String,
    postcode_District_City_Title_Icontains: String,
    postcode_District_Title: String,
    postcode_District_Title_Icontains: String,
    postcode_Title: String,
    postcode_Title_Icontains: String,
    purposeLocation_Title: String,
    purposeLocation_Title_Icontains: String,
    registrationStatusLocation_Title: String,
    registrationStatusLocation_Title_Icontains: String,
    rentContractEnd: DateTime,
    rentContractEnd_Gt: DateTime,
    rentContractEnd_Gte: DateTime,
    rentContractEnd_Lt: DateTime,
    rentContractEnd_Lte: DateTime,
    rentContractNumber: String,
    rentContractNumber_Isnull: Boolean,
    rentContractStart: DateTime,
    rentContractStart_Gt: DateTime,
    rentContractStart_Gte: DateTime,
    rentContractStart_Lt: DateTime,
    rentContractStart_Lte: DateTime,
    resolutionNumber: String,
    resolutionNumber_Icontains: String
  ): VLocationOptimizedNodeConnection
  "Местоположения (неоптимизированный запрос)"
  searchLocationUnoptimized(after: String, area: Float, areaAct: String, areaActDate: DateTime, areaActDate_Gt: DateTime, areaActDate_Gte: DateTime, areaActDate_Lt: DateTime, areaActDate_Lte: DateTime, areaAct_Icontains: String, area_Gt: Float, area_Gte: Float, area_Lt: Float, area_Lte: Float, before: String, cadastralNumber: String, cadastralNumber_Icontains: String, comment: String, comment_Icontains: String, familyConstruction_Id: ID, familyConstruction_Id_Isnull: Boolean, familyConstruction_Title: String, familyConstruction_Title_Icontains: String, fastSearch: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, legalAddress_Address: String, legalAddress_Address_Icontains: String, marketingAddress_Address: String, marketingAddress_Address_Icontains: String, offset: Int, postcode_District_City_Country_Title: String, postcode_District_City_Country_Title_Icontains: String, postcode_District_City_Title: String, postcode_District_City_Title_Icontains: String, postcode_District_Title: String, postcode_District_Title_Icontains: String, postcode_Title: String, postcode_Title_Icontains: String, purposeLocation_Title: String, purposeLocation_Title_Icontains: String, registrationStatusLocation_Title: String, registrationStatusLocation_Title_Icontains: String, rentContractEnd: DateTime, rentContractEnd_Gt: DateTime, rentContractEnd_Gte: DateTime, rentContractEnd_Lt: DateTime, rentContractEnd_Lte: DateTime, rentContractNumber: String, rentContractNumber_Isnull: Boolean, rentContractStart: DateTime, rentContractStart_Gt: DateTime, rentContractStart_Gte: DateTime, rentContractStart_Lt: DateTime, rentContractStart_Lte: DateTime, resolutionNumber: String, resolutionNumber_Icontains: String): VLocationNodeConnection
  "Логи баз данных"
  searchLogs(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VChangeLogNodeConnection
  "Модели конструкций"
  searchModelConstruction(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, title: String, title_Icontains: String, underfamily_Id: ID, underfamily_Id_Isnull: Boolean): VModelConstructionNodeConnection
  "Монтажи"
  searchMounting(after: String, before: String, crew_Name: String, crew_Name_Icontains: String, endMounting: DateTime, endMounting_Gt: DateTime, endMounting_Gte: DateTime, endMounting_Lt: DateTime, endMounting_Lte: DateTime, first: Int, id: ID, id_Isnull: Boolean, last: Int, mountingDone: Boolean, mountingDone_Isnull: Boolean, mountingTask_Title: String, mountingTask_Title_Icontains: String, offset: Int, reservation_ConstructionSide_Construction_Location_LegalAddress_Address_Isnull: Boolean, reservation_ConstructionSide_Construction_Location_MarketingAddress_Address_Isnull: Boolean, startMounting: DateTime, startMounting_Gt: DateTime, startMounting_Gte: DateTime, startMounting_Lt: DateTime, startMounting_Lte: DateTime, unmountingDone: Boolean, unmountingDone_Isnull: Boolean): VMountingNodeConnection
  "Фотоотчёты о монтажах"
  searchMountingPhoto(after: String, before: String, date: DateTime, date_Gt: DateTime, date_Gte: DateTime, date_Lt: DateTime, date_Lte: DateTime, first: Int, id: ID, id_Isnull: Boolean, last: Int, num: String, num_Icontains: String, offset: Int): VMountingPhotoNodeConnection
  "Ремонтно-монтажные работы"
  searchMountingTask(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VMountingTaskNodeConnection
  "Проект монтажа (graphql-структура)"
  searchMountingsProjectCard(
    "Дополнительный дневной фотоотчет - максимальное число элементов в списке"
    additionalPhotoDayLimit: Int,
    "Дополнительный дневной фотоотчет - смещение в списке"
    additionalPhotoDayOffset: Int,
    "Дополнительный ночной фотоотчет - максимальное число элементов в списке"
    additionalPhotoNightLimit: Int,
    "Дополнительный ночной фотоотчет - смещение в списке"
    additionalPhotoNightOffset: Int,
    "Демонтаж на заданную дату"
    endMounting_Contains: Date,
    "Демонтаж после заданной даты"
    endMounting_Gt: DateTime,
    "Демонтаж на заданную дату или позднее"
    endMounting_Gte: DateTime,
    "Демонтаж до заданной даты"
    endMounting_Lt: DateTime,
    "Демонтаж на заданную дату или ранее"
    endMounting_Lte: DateTime,
    "Параметр быстрого поиска"
    fastSearch: String,
    "Длина текущей выборки"
    limit: Int,
    "Монтажные задачи - максимальное число элементов в списке"
    mountingTasksLimit: Int,
    "Монтажные задачи - смещение в списке"
    mountingTasksOffset: Int,
    "Начальное смещение в полной выборке"
    offset: Int,
    "Порядок сортировки. Подчеркивание в начале имени означает сортировку по убыванию"
    orderBy: [MountingProjectCardOrderBy],
    "Идентификатор проекта"
    projectId: ID!,
    "Наличие брендинга для бронирования"
    reservation_Branding: Boolean,
    "Начало бронирования на заданную дату"
    reservation_DateFrom: DateTime,
    "Начало бронирования содержит"
    reservation_DateFrom_Contains: Date,
    "Начало бронирования после заданной даты"
    reservation_DateFrom_Gt: DateTime,
    "Начало бронирования на заданную дату или позднее"
    reservation_DateFrom_Gte: DateTime,
    "Начало бронирования ранее"
    reservation_DateFrom_Lt: DateTime,
    "Начало бронирования на заданную дату или ранее"
    reservation_DateFrom_Lte: DateTime,
    "Окончание бронирования бронирования на заданную дату"
    reservation_DateTo: DateTime,
    "Окончание бронирования бронирования содержит"
    reservation_DateTo_Contains: Date,
    "Окончание бронирования бронирования после заданной даты"
    reservation_DateTo_Gt: DateTime,
    "Окончание бронирования бронирования на заданную дату или позднее"
    reservation_DateTo_Gte: DateTime,
    "Окончание бронирования бронирования ранее"
    reservation_DateTo_Lt: DateTime,
    "Окончание бронирования бронирования на заданную дату или ранее"
    reservation_DateTo_Lte: DateTime,
    "Монтаж на заданную дату"
    startMounting_Contains: Date,
    "Монтаж после заданной даты"
    startMounting_Gt: DateTime,
    "Монтаж на заданную дату или позднее"
    startMounting_Gte: DateTime,
    "Монтаж до заданной даты"
    startMounting_Lt: DateTime,
    "Монтаж на заданную дату или ранее"
    startMounting_Lte: DateTime
  ): MountingProjectCardFieldConnection
  "Список проектов для монтажей (graphql-структура)"
  searchMountingsProjectCardCompanies(
    "Параметр быстрого поиска"
    fastSearch: String,
    "Длина текущей выборки"
    limit: Int,
    "Начальное смещение в полной выборке"
    offset: Int,
    "Порядок сортировки. Подчеркивание в начале имени означает сортировку по убыванию"
    orderBy: [MountingProjectCardCompaniesOrderBy],
    "Идентификатор проекта"
    projectId: ID
  ): MountingProjectCardCompaniesFieldConnection
  "Список проектов для монтажей (graphql-структура)"
  searchMountingsProjects(
    "Идентификатор менеджера бек-оффиса в проекте"
    backOfficeManagerId: ID,
    "Идентификатор бренда"
    brandId: ID,
    "Идентификатор города"
    cityId: ID,
    "Название города содержит (регистронезависимо)"
    cityTitle_Icontains: String,
    "Идентификатор рекламодателя"
    clientId: ID,
    "Название клиента содержит (регистронезависимо)"
    clientTitle_Icontains: String,
    "Параметр быстрого поиска"
    fastSearch: String,
    "Длина текущей выборки"
    limit: Int,
    "Начальное смещение в полной выборке"
    offset: Int,
    "Порядок сортировки. Подчеркивание в начале имени означает сортировку по убыванию"
    orderBy: [MountingProjectsOrderBy],
    "Спецификация поиска проекта, объединенная условием ИЛИ"
    projectFilterspecOr: [SearchCommercialProjectSpec],
    "Идентификатор проекта"
    projectId: ID,
    "Проекты, начиная с заданной даты начала проекта"
    projectStartDateGte: DateTime,
    "Проекты, заканчивая с заданной датой начала проекта"
    projectStartDateLte: DateTime,
    "Начало интервала, монтажа, в который должно попасть бронирование"
    reservation_DateFrom_Gte: DateTime,
    "Окончание интервала монтажа, в которое должно попасть бронирование"
    reservation_DateTo_Lte: DateTime,
    "Идентификатор менеджера по продажам в проекте"
    salesManagerId: ID,
    "Нужна разбивка по городам"
    splitByCities: Boolean
  ): MountingProjectsFieldConnection
  "Помехи"
  searchObstruction(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, title: String, title_Icontains: String): VObstructionNodeConnection
  "Пакеты"
  searchPackage(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, month: String, month_Icontains: String, month_Iregex: String, month_Regex: String, offset: Int, title: String, title_Icontains: String, year: Int, year_Gt: Int, year_Gte: Int, year_Lt: Int, year_Lte: Int): VPackageNodeConnection
  "Статистика по пакетам"
  searchPackagesInfo(
    "Дата начала периода. Указанный день включается в выборку [date_from:date_to)"
    dateFrom: Date,
    "Дата конца периода. Указанный день не включается в выборку [date_from:date_to)"
    dateTo: Date,
    "Длина текущей выборки"
    limit: Int,
    "Начальное смещение в полной выборке"
    offset: Int,
    "Порядок сортировки. Подчеркивание в начале имени означает сортировку по убыванию"
    orderBy: [PackagesInfoOrderBy],
    "Список идентификаторов пакетов"
    packagesIds: [ID],
    "Период, за который производится выборка. Если указан тип CUSTOM, фильтрует в диапазоне [date_from, date_to]"
    period: Period,
    "Единица времени, по которой производится агрегация"
    unitOfTime: UnitOfTime
  ): PackagesInfoQuery
  "Контрагенты"
  searchPartner(
    advertisers_Id: ID,
    advertisers_Id_Isnull: Boolean,
    advertisers_Title: String,
    advertisers_Title_Icontains: String,
    after: String,
    before: String,
    binNumber: String,
    binNumber_Icontains: String,
    brands_Title: String,
    brands_Title_Icontains: String,
    fastSearch: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    isNonrtsOwner: Boolean,
    isNonrtsOwner_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partnerType_Title: String,
    partnerType_Title_Icontains: String,
    title: String,
    title_Icontains: String,
    workingSectors_Title: String,
    workingSectors_Title_Icontains: String
  ): VPartnerOptimizedNodeConnection
  "Типы контрагентов"
  searchPartnerType(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, title: String, title_Icontains: String): VPartnerTypeNodeConnection
  "Контрагенты (неоптимизированный запрос)"
  searchPartnerUnoptimized(advertisers_Id: ID, advertisers_Id_Isnull: Boolean, advertisers_Title: String, advertisers_Title_Icontains: String, after: String, before: String, binNumber: String, binNumber_Icontains: String, brands_Title: String, brands_Title_Icontains: String, fastSearch: String, first: Int, id: ID, id_Isnull: Boolean, isNonrtsOwner: Boolean, isNonrtsOwner_Isnull: Boolean, last: Int, offset: Int, partnerType_Title: String, partnerType_Title_Icontains: String, title: String, title_Icontains: String, workingSectors_Title: String, workingSectors_Title_Icontains: String): VPartnerNodeConnection
  "Стоимости рекламного размещения по прайсу"
  searchPlacementPrice(after: String, before: String, city: ID, city_Isnull: Boolean, first: Int, format: ID, format_Isnull: Boolean, id: ID, id_Isnull: Boolean, last: Int, offset: Int, period: Int, period_Isnull: Boolean): VPlacementPriceNodeConnection
  "Почтовые индексы"
  searchPostcode(after: String, before: String, district_City_Title: String, district_City_Title_Icontains: String, district_Id: ID, district_Id_Isnull: Boolean, district_Title: String, district_Title_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, title: String, title_Icontains: String): VPostcodeNodeConnection
  "Проекты"
  searchProject(after: String, backOfficeManager_Email: String, backOfficeManager_Email_Icontains: String, backOfficeManager_FirstName: String, backOfficeManager_FirstName_Icontains: String, backOfficeManager_Id: ID, backOfficeManager_Id_Isnull: Boolean, backOfficeManager_LastName: String, backOfficeManager_LastName_Icontains: String, backOfficeManager_Name: String, backOfficeManager_Name_Icontains: String, backOfficeManager_Phone: String, backOfficeManager_Phone_Icontains: String, before: String, brand_Id: ID, brand_Id_Isnull: Boolean, brand_Title: String, brand_Title_Icontains: String, client_Id: ID, client_Id_Isnull: Boolean, client_PartnerType_Id: ID, client_PartnerType_Id_Isnull: Boolean, client_PartnerType_Title: String, client_PartnerType_Title_Icontains: String, client_Title: String, client_Title_Icontains: String, client_WorkingSectors_Description: String, client_WorkingSectors_Description_Icontains: String, client_WorkingSectors_Id: ID, client_WorkingSectors_Id_Isnull: Boolean, client_WorkingSectors_Title: String, client_WorkingSectors_Title_Icontains: String, code: String, code_Icontains: String, fastSearch: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, numInYear: Int, numInYear_Isnull: Boolean, offset: Int, salesManager_Email: String, salesManager_Email_Icontains: String, salesManager_FirstName: String, salesManager_FirstName_Icontains: String, salesManager_Id: ID, salesManager_Id_Isnull: Boolean, salesManager_LastName: String, salesManager_LastName_Icontains: String, salesManager_Name: String, salesManager_Name_Icontains: String, salesManager_Phone: String, salesManager_Phone_Icontains: String, startDate: DateTime, startDate_Gt: DateTime, startDate_Gte: DateTime, startDate_Lt: DateTime, startDate_Lte: DateTime, title: String, title_Icontains: String): VProjectNodeConnection
  "Городов для проектов"
  searchProjectCities(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VProjectCitiesNodeConnection
  "Проекты (protobuf)"
  searchProjectsOptim(
    "Идентификатор рекламного агентства"
    agencyId: ID,
    "Название рекламного агентства содержит подстроку"
    agency_Title_Icontains: String,
    "Идентификатор проекта"
    backOfficeManagerId: ID,
    "Имя менеджера бек-оффиса содержит подстроку (регистронезависимо)"
    backOfficeManager_FirstName_Icontains: String,
    "Фамилия менеджера бек-оффиса содержит подстроку (регистронезависимо)"
    backOfficeManager_LastName_Icontains: String,
    "Идентификатор бренда"
    brandId: ID,
    "Наименование бренда содержит подстроку (регистронезависимо)"
    brand_Title_Icontains: String,
    "Идентификатор клиента"
    clientId: ID,
    "Название клиента содержит подстроку"
    client_Title_Icontains: String,
    "Сектор деятельности клиента содержит подстроку (регистронезависимо)"
    client_WorkingSectors_Description_Icontains: String,
    "Код содержит подстроку (регистронезависимо)"
    code_Icontains: String,
    "Начало проекта &gt;= заданной даты"
    createdAt_Gte: DateTime,
    "Начало проекта &lt;= заданной даты"
    createdAt_Lte: DateTime,
    "Параметр быстрого поиска"
    fastSearch: String,
    "Длина текущей выборки"
    limit: Int,
    "Начальное смещение в полной выборке"
    offset: Int,
    "Порядок сортировки. Подчеркивание в начале имени означает сортировку по убыванию"
    orderBy: [MountingCommercialProjectsOrderBy],
    "Спецификация поиска проекта, объединенная условием ИЛИ"
    projectFilterspecOr: [SearchCommercialProjectSpec],
    "Идентификатор проекта"
    projectId: ID,
    "Идентификатор менеджера по продажам"
    salesManagerId: ID,
    "Имя менеджера по продажам содержит подстроку (регистронезависимо)"
    salesManager_FirstName_Icontains: String,
    "Фамилия менеджера по продажам содержит подстроку (регистронезависимо)"
    salesManager_LastName_Icontains: String,
    "Наименование проекта содержит подстроку (регистронезависимо)"
    title_Icontains: String,
    "Идентификатор сектора деятельности клиента"
    workingSectorId: ID
  ): ContentFieldConnection
  "Назначения сторон"
  searchPurposeSide(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, title: String, title_Icontains: String): VPurposeSideNodeConnection
  "Бронирования"
  searchReservation(
    after: String,
    appendix_Id: ID,
    appendix_Id_Isnull: Boolean,
    before: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Id: ID,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Id_Isnull: Boolean,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Format_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Size: String,
    constructionSide_AdvertisingSide_Side_Size_Icontains: String,
    constructionSide_AdvertisingSide_Side_Title: String,
    constructionSide_AdvertisingSide_Side_Title_Icontains: String,
    constructionSide_Construction_Location_Postcode_District_City_Id: ID,
    constructionSide_Construction_Location_Postcode_District_City_Id_Isnull: Boolean,
    constructionSide_Construction_Location_Postcode_District_City_Title: String,
    constructionSide_Construction_Location_Postcode_District_City_Title_Icontains: String,
    constructionSide_Construction_Location_Postcode_District_Id: ID,
    constructionSide_Construction_Location_Postcode_District_Id_Isnull: Boolean,
    constructionSide_Construction_Location_Postcode_District_Title: String,
    constructionSide_Construction_Location_Postcode_District_Title_Icontains: String,
    constructionSide_Construction_StatusConnection: Boolean,
    constructionSide_Construction_StatusConnection_Isnull: Boolean,
    dateFrom: DateTime,
    dateFrom_Gt: DateTime,
    dateFrom_Gte: DateTime,
    dateFrom_Lt: DateTime,
    dateFrom_Lte: DateTime,
    dateTo: DateTime,
    dateTo_Gt: DateTime,
    dateTo_Gte: DateTime,
    dateTo_Lt: DateTime,
    dateTo_Lte: DateTime,
    fastSearch: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    projectId: ID,
    projectId_Isnull: Boolean,
    reservationType_Title: String,
    reservationType_Title_Icontains: String,
    reservationType_Title_Iregex: String,
    reservationType_Title_Regex: String
  ): VReservationOptimizedNodeConnection
  "Бронирования пакетов"
  searchReservationPackage(after: String, before: String, dateFrom: DateTime, dateFrom_Gt: DateTime, dateFrom_Gte: DateTime, dateFrom_Lt: DateTime, dateFrom_Lte: DateTime, dateTo: DateTime, dateTo_Gt: DateTime, dateTo_Gte: DateTime, dateTo_Lt: DateTime, dateTo_Lte: DateTime, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VReservationPackageNodeConnection
  "Виды бронирований"
  searchReservationType(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, title: String, title_Icontains: String): VReservationTypeNodeConnection
  "Бронирования (неоптимизированный запрос)"
  searchReservationUnoptimized(after: String, appendix_Id: ID, appendix_Id_Isnull: Boolean, before: String, constructionSide_AdvertisingSide_Side_Format_Model_Title: String, constructionSide_AdvertisingSide_Side_Format_Model_Title_Icontains: String, constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Id: ID, constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Id_Isnull: Boolean, constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Title: String, constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Title_Icontains: String, constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Title: String, constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Title_Icontains: String, constructionSide_AdvertisingSide_Side_Format_Title: String, constructionSide_AdvertisingSide_Side_Format_Title_Icontains: String, constructionSide_AdvertisingSide_Side_Size: String, constructionSide_AdvertisingSide_Side_Size_Icontains: String, constructionSide_AdvertisingSide_Side_Title: String, constructionSide_AdvertisingSide_Side_Title_Icontains: String, constructionSide_Construction_Location_Postcode_District_City_Id: ID, constructionSide_Construction_Location_Postcode_District_City_Id_Isnull: Boolean, constructionSide_Construction_Location_Postcode_District_City_Title: String, constructionSide_Construction_Location_Postcode_District_City_Title_Icontains: String, constructionSide_Construction_Location_Postcode_District_Id: ID, constructionSide_Construction_Location_Postcode_District_Id_Isnull: Boolean, constructionSide_Construction_Location_Postcode_District_Title: String, constructionSide_Construction_Location_Postcode_District_Title_Icontains: String, constructionSide_Construction_StatusConnection: Boolean, constructionSide_Construction_StatusConnection_Isnull: Boolean, dateFrom: DateTime, dateFrom_Gt: DateTime, dateFrom_Gte: DateTime, dateFrom_Lt: DateTime, dateFrom_Lte: DateTime, dateTo: DateTime, dateTo_Gt: DateTime, dateTo_Gte: DateTime, dateTo_Lt: DateTime, dateTo_Lte: DateTime, fastSearch: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, projectId: ID, projectId_Isnull: Boolean, reservationType_Title: String, reservationType_Title_Icontains: String, reservationType_Title_Iregex: String, reservationType_Title_Regex: String): VReservationNodeConnection
  "Дополнительные расходы (РТС)"
  searchSalesAdditionalCost(after: String, appendix: [ID], appendix_Code: String, appendix_Code_Icontains: String, appendix_Isnull: Boolean, before: String, city_Title: String, city_Title_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, projectId: ID, projectId_Isnull: Boolean, project_Code: String, project_Code_Icontains: String): VAdditionalCostsNodeConnection
  "адресная программа (protobuf)"
  searchSalesAddressProgramProto(
    "Код приложения"
    appendix_Code: String,
    "Идентификатор приложения"
    appendix_Id: ID,
    "Код проекта"
    project_Code: String,
    "Идентификатор проекта"
    project_Id: ID
  ): ContentFieldConnection
  "Смета (protobuf)"
  searchSalesEstimateProto(
    "Код приложения"
    appendix_Code: String,
    "Идентификатор приложения"
    appendix_Id: ID,
    "Код проекта"
    project_Code: String,
    "Идентификатор проекта"
    project_Id: ID
  ): ContentFieldConnection
  "Счета"
  searchSalesInvoice(after: String, before: String, fastSearch: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VInvoiceNodeConnection
  "Дополнительные расходы НОН РТС"
  searchSalesNonrts(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VEstimateNonRtsNodeConnection
  "Стороны"
  searchSide(after: String, before: String, first: Int, format_Id: ID, format_Id_Isnull: Boolean, format_Model_Id: ID, format_Model_Id_Isnull: Boolean, format_Model_Underfamily_Family_Id: ID, format_Model_Underfamily_Family_Id_Isnull: Boolean, format_Model_Underfamily_Id: ID, format_Model_Underfamily_Id_Isnull: Boolean, format_Title: String, format_Title_Icontains: String, id: ID, id_Isnull: Boolean, last: Int, offset: Int, size: String, size_Icontains: String, title: String, title_Icontains: String): VSideNodeConnection
  "Размеры сторон конструкций"
  searchSideSize(
    "Идентификатор семейства"
    format_Model_Underfamily_Family_Id: ID,
    "Наименование семейства"
    format_Model_Underfamily_Family_Title: String,
    "Наименование семейства содержит"
    format_Model_Underfamily_Family_Title_Icontains: String,
    "Наименование формата"
    format_Title: String,
    "Значение размера"
    size: String,
    "Значение размера содержит (регистронезависимо)"
    size_Icontains: String,
    "Наименование типа стороны"
    title: String,
    "Наименование типа стороны содержит (регистронезависимо)"
    title_Icontains: String
  ): SideSizeQuery
  "Размеры сторон конструкций"
  searchSideTitles(
    "Идентификатор семейства"
    format_Model_Underfamily_Family_Id: ID,
    "Наименование семейства"
    format_Model_Underfamily_Family_Title: String,
    "Наименование семейства содержит"
    format_Model_Underfamily_Family_Title_Icontains: String,
    "Наименование формата"
    format_Title: String,
    "Значение размера"
    size: String,
    "Значение размера содержит (регистронезависимо)"
    size_Icontains: String,
    "Наименование типа стороны"
    title: String,
    "Наименование типа стороны содержит (регистронезависимо)"
    title_Icontains: String
  ): SideSizeQuery
  "Технические проблемы"
  searchTechProblem(after: String, before: String, comment: String, comment_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, title: String, title_Icontains: String): VTechProblemsNodeConnection
  "Подсемейства конструкций"
  searchUnderFamilyConstruction(after: String, before: String, family_Id: ID, family_Id_Isnull: Boolean, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, title: String, title_Icontains: String): VUnderFamilyConstructionNodeConnection
  "Пользователи"
  searchUser(after: String, before: String, email: String, email_Icontains: String, employeePosition_Title: String, employeePosition_Title_Icontains: String, first: Int, firstName: String, firstName_Icontains: String, groups_Name: String, groups_Name_Icontains: String, id: ID, id_Isnull: Boolean, isSuperuser: Boolean, isSuperuser_Isnull: Boolean, last: Int, lastName: String, lastName_Icontains: String, name: String, name_Icontains: String, offset: Int, phone: String, phone_Icontains: String, username: String, username_Icontains: String): VCustomUserNodeConnection
  "construction notifications"
  searchUserConstructionNotifications(
    after: String,
    before: String,
    first: Int,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    user_Id: ID,
    user_Id_Isnull: Boolean
  ): VConstructionNotificationOptimizedNodeConnection
  "construction notifications (неоптимизированный запрос)"
  searchUserConstructionNotificationsUnoptimized(after: String, before: String, first: Int, last: Int, offset: Int, user_Id: ID, user_Id_Isnull: Boolean): VConstructionNotificationNodeConnection
  "группы"
  searchUserGroup(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VGroupNodeConnection
  "Уведомления"
  searchUserNotifications(
    after: String,
    before: String,
    first: Int,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    user_Id: ID,
    user_Id_Isnull: Boolean
  ): VNotificationOptimizedNodeConnection
  "Уведомления (неоптимизированный запрос)"
  searchUserNotificationsUnoptimized(after: String, before: String, first: Int, last: Int, offset: Int, user_Id: ID, user_Id_Isnull: Boolean): VNotificationNodeConnection
  "права"
  searchUserPermission(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VPermissionNodeConnection
  searchUserStatistic(userId: ID): StatisticType
  "Секторы деятельностей"
  searchWorkingSector(after: String, before: String, description: String, description_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VWorkingSectorNodeConnection
  "Статические, конфигурационные доп. расходы"
  staticAdditionalCosts(after: String, before: String, category: String, category_Isnull: Boolean, city: ID, city_Isnull: Boolean, first: Int, format: ID, format_Isnull: Boolean, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VStaticAdditionalCostsNodeConnection
  "The ID of the object"
  user(id: ID!): UserNode
  users(after: String, before: String, email: String, first: Int, isActive: Boolean, last: Int, offset: Int, status_Archived: Boolean, status_SecondaryEmail: String, status_Verified: Boolean, username: String, username_Icontains: String, username_Istartswith: String): UserNodeConnection
}

"Same as `grapgql_jwt` implementation, with standard output."
type RefreshToken {
  errors: ExpectedErrorType
  payload: GenericScalar
  refreshToken: String
  success: Boolean
  token: String
}

"""

Register user with fields defined in the settings.

If the email field of the user model is part of the
registration fields (default), check if there is
no user with that email or as a secondary email.

If it exists, it does not register the user,
even if the email field is not defined as unique
(default of the default django user model).

When creating the user, it also creates a `UserStatus`
related to that user, making it possible to track
if the user is archived, verified and has a secondary
email.

Send account verification email.

If allowed to not verified users login, return token.
"""
type Register {
  errors: ExpectedErrorType
  refreshToken: String
  success: Boolean
  token: String
}

"""

Sends activation email.

It is called resend because theoretically
the first activation email was sent when
the user registered.

If there is no user with the requested email,
a successful response is returned.
"""
type ResendActivationEmail {
  errors: ExpectedErrorType
  success: Boolean
}

"Same as `grapgql_jwt` implementation, with standard output."
type RevokeToken {
  errors: ExpectedErrorType
  revoked: Int
  success: Boolean
}

type SalesStatisticType {
  "Текущая сумма"
  currentSales: Float
  "Процент выполнения годового плана. Считается как (целевая сумма / текущая сумма) * 100%"
  percentageOfCompletion: Float
  "Целевая сумма за год"
  targetYearSalesPlan: Float
}

"""

Send password reset email.

For non verified users, send an activation
email instead.

Accepts both primary and secondary email.

If there is no user with the requested email,
a successful response is returned.
"""
type SendPasswordResetEmail {
  errors: ExpectedErrorType
  success: Boolean
}

"""

Send activation to secondary email.

User must be verified and confirm password.
"""
type SendSecondaryEmailActivation {
  errors: ExpectedErrorType
  success: Boolean
}

type SideSizeConnection {
  count: Int
  "Contains the nodes in this connection."
  edges: [SideSizeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `SideSize` and its cursor."
type SideSizeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: SideSizeType
}

type SideSizeQuery {
  sideSize(after: String, before: String, first: Int, last: Int): SideSizeConnection
}

type SideSizeType implements Node {
  code: String
  "The ID of the object."
  id: ID!
  size: String
  title: String
}

type StatisticType {
  "Список партнеров"
  partners(
    "Длина текущей выборки"
    limit: Int,
    "Начальное смещение в полной выборке"
    offset: Int,
    "Порядок сортировки. Подчеркивание в начале имени означает сортировку по убыванию"
    orderBy: [UserRelatedPartnersOrderBy]
  ): [PartnerType]
  "Данные пагинации"
  partnersPageInfo: PageInfoApi
  "Список проектов"
  projects(
    "Длина текущей выборки"
    limit: Int,
    "Начальное смещение в полной выборке"
    offset: Int,
    "Порядок сортировки. Подчеркивание в начале имени означает сортировку по убыванию"
    orderBy: [UserRelatedProjectsOrderBy]
  ): [ProjectType]
  "Данные пагинации"
  projectsPageInfo: PageInfoApi
  "Статистика продаж"
  salesStatistic(year: DateTime): SalesStatisticType
  "Идентификатор пользователя"
  userId: ID
}

"""

Swap between primary and secondary emails.

Require password confirmation.
"""
type SwapEmails {
  errors: ExpectedErrorType
  success: Boolean
}

"""

Update user model fields, defined on settings.

User must be verified.
"""
type UpdateAccount {
  errors: ExpectedErrorType
  success: Boolean
}

"Обновить Рекламную сторону. Все NOT NULL поля - обязательные"
type UpdateAdvertisingsideMutation {
  advertisingSide: VAdvertisingSideNode
}

"Обновить Рекламную промо-компания. Все NOT NULL поля - обязательные"
type UpdateAdvertpromocompanyMutation {
  advertPromoCompany: VAdvertPromoCompanyOptimizedNode
}

"Обновить Агентскую комиссия. Все NOT NULL поля - обязательные"
type UpdateAgencycommissionMutation {
  agencyCommission: VAgencyCommissionNode
}

"Обновить Приложение к договору. Все NOT NULL поля - обязательные"
type UpdateAppendixMutation {
  appendix: VAppendixOptimizedNode
}

"Обновить Бренд. Все NOT NULL поля - обязательные"
type UpdateBrandMutation {
  brand: VBrandOptimizedNode
}

"Обновить Изображение бренда. Все NOT NULL поля - обязательные"
type UpdateBrandimageMutation {
  brandImage: VBrandImageNode
}

"Обновить Город. Все NOT NULL поля - обязательные"
type UpdateCityMutation {
  city: VCityNode
}

"Обновить Тип клиента. Все NOT NULL поля - обязательные"
type UpdateClienttypeMutation {
  clientType: VClientTypeNode
}

"Обновить Конструкцию. Все NOT NULL поля - обязательные"
type UpdateConstructionMutation {
  construction: VConstructionOptimizedNode
}

"Обновить Construction notification. Все NOT NULL поля - обязательные"
type UpdateConstructionnotificationMutation {
  constructionNotification: VConstructionNotificationOptimizedNode
}

"Обновить Сторону конструкции. Все NOT NULL поля - обязательные"
type UpdateConstructionsideMutation {
  constructionSide: VConstructionSideOptimizedNode
}

"Обновить Контактное лицо. Все NOT NULL поля - обязательные"
type UpdateContactpersonMutation {
  contactPerson: VContactPersonNode
}

"Обновить Договор. Все NOT NULL поля - обязательные"
type UpdateContractMutation {
  contract: VContractOptimizedNode
}

"Обновить Тип договора. Все NOT NULL поля - обязательные"
type UpdateContracttypeMutation {
  contractType: VContractTypeNode
}

"Обновить Страну. Все NOT NULL поля - обязательные"
type UpdateCountryMutation {
  country: VCountryNode
}

"Обновить Экипаж. Все NOT NULL поля - обязательные"
type UpdateCrewMutation {
  crew: VCrewOptimizedNode
}

"Обновить Дизайн. Все NOT NULL поля - обязательные"
type UpdateDesignMutation {
  design: VDesignNode
}

"Обновить Район. Все NOT NULL поля - обязательные"
type UpdateDistrictMutation {
  district: VDistrictNode
}

"Обновить Должность. Все NOT NULL поля - обязательные"
type UpdateEmployeepositionMutation {
  employeePosition: VEmployeePositionNode
}

"Обновить Семейство конструкции. Все NOT NULL поля - обязательные"
type UpdateFamilyconstructionMutation {
  familyConstruction: VFamilyConstructionNode
}

"Обновить Формат. Все NOT NULL поля - обязательные"
type UpdateFormatMutation {
  format: VFormatNode
}

"Обновить Адресного справочник. Все NOT NULL поля - обязательные"
type UpdateLocaddressMutation {
  addresses: VAddressesNode
}

"Обновить Местоположение. Все NOT NULL поля - обязательные"
type UpdateLocationMutation {
  location: VLocationOptimizedNode
}

"Обновить Модель конструкции. Все NOT NULL поля - обязательные"
type UpdateModelconstructionMutation {
  modelConstruction: VModelConstructionNode
}

"Обновить Монтаж. Все NOT NULL поля - обязательные"
type UpdateMountingMutation {
  mounting: VMountingNode
}

"Обновить Фотоотчёт о монтаже. Все NOT NULL поля - обязательные"
type UpdateMountingphotoMutation {
  mountingPhoto: VMountingPhotoNode
}

"Обновить Ремонтно-монтажную работу. Все NOT NULL поля - обязательные"
type UpdateMountingtaskMutation {
  mountingTask: VMountingTaskNode
}

"Обновить Уведомление. Все NOT NULL поля - обязательные"
type UpdateNotificationMutation {
  notification: VNotificationOptimizedNode
}

"Обновить Помеху. Все NOT NULL поля - обязательные"
type UpdateObstructionMutation {
  obstruction: VObstructionNode
}

type UpdatePackageReservationType {
  ok: Boolean
}

"Обновить Контрагента. Все NOT NULL поля - обязательные"
type UpdatePartnerMutation {
  partner: VPartnerOptimizedNode
}

"Обновить Тип контрагента. Все NOT NULL поля - обязательные"
type UpdatePartnertypeMutation {
  partnerType: VPartnerTypeNode
}

"Обновить Почтовый индекс. Все NOT NULL поля - обязательные"
type UpdatePostcodeMutation {
  postcode: VPostcodeNode
}

"Обновить Проект. Все NOT NULL поля - обязательные"
type UpdateProjectMutation {
  project: VProjectNode
}

"Обновить Назначение стороны. Все NOT NULL поля - обязательные"
type UpdatePurposesideMutation {
  purposeSide: VPurposeSideNode
}

"Обновить Бронирование. Все NOT NULL поля - обязательные"
type UpdateReservationMutation {
  reservation: VReservationOptimizedNode
}

"Обновить Вид бронирования. Все NOT NULL поля - обязательные"
type UpdateReservationtypeMutation {
  reservationType: VReservationTypeNode
}

"Обновить Дополнительные расходы (РТС). Все NOT NULL поля - обязательные"
type UpdateSalesadditionalcostMutation {
  additionalCosts: VAdditionalCostsNode
}

"Обновить Счёт. Все NOT NULL поля - обязательные"
type UpdateSalesinvoiceMutation {
  invoice: VInvoiceNode
}

"Обновить Дополнительный расход НОН РТС. Все NOT NULL поля - обязательные"
type UpdateSalesnonrtsMutation {
  estimateNonRts: VEstimateNonRtsNode
}

"Обновить Стоимость рекламного размещения по прайсу. Все NOT NULL поля - обязательные"
type UpdateSalesplacementpriceMutation {
  placementPrice: VPlacementPriceNode
}

"Обновить Сторону. Все NOT NULL поля - обязательные"
type UpdateSideMutation {
  side: VSideNode
}

"Обновить Статические, конфигурационные доп. расходы. Все NOT NULL поля - обязательные"
type UpdateStaticadditionalcostsMutation {
  staticAdditionalCosts: VStaticAdditionalCostsNode
}

"Обновить Техническую проблему. Все NOT NULL поля - обязательные"
type UpdateTechproblemMutation {
  techProblems: VTechProblemsNode
}

"Обновить Подсемейство конструкции. Все NOT NULL поля - обязательные"
type UpdateUnderfamilyconstructionMutation {
  underFamilyConstruction: VUnderFamilyConstructionNode
}

"Обновить Пользователя. Все NOT NULL поля - обязательные"
type UpdateUserMutation {
  customUser: VCustomUserNode
}

"Обновить Группу. Все NOT NULL поля - обязательные"
type UpdateUsergroupMutation {
  group: VGroupNode
}

"Обновить Право. Все NOT NULL поля - обязательные"
type UpdateUserpermissionMutation {
  permission: VPermissionNode
}

"Обновить Сектор деятельности. Все NOT NULL поля - обязательные"
type UpdateWorkingsectorMutation {
  workingSector: VWorkingSectorNode
}

"Обновить пакетно Рекламную сторону. Все NOT NULL поля - обязательные"
type UpdatebatchAdvertisingsideMutation {
  advertisingSides: [VAdvertisingSideNode]
}

"Обновить пакетно Рекламную промо-компания. Все NOT NULL поля - обязательные"
type UpdatebatchAdvertpromocompanyMutation {
  advertPromoCompanys: [VAdvertPromoCompanyOptimizedNode]
}

"Обновить пакетно Агентскую комиссия. Все NOT NULL поля - обязательные"
type UpdatebatchAgencycommissionMutation {
  agencyCommissions: [VAgencyCommissionNode]
}

"Обновить пакетно Приложение к договору. Все NOT NULL поля - обязательные"
type UpdatebatchAppendixMutation {
  appendixs: [VAppendixOptimizedNode]
}

"Обновить пакетно Бренд. Все NOT NULL поля - обязательные"
type UpdatebatchBrandMutation {
  brands: [VBrandOptimizedNode]
}

"Обновить пакетно Изображение бренда. Все NOT NULL поля - обязательные"
type UpdatebatchBrandimageMutation {
  brandImages: [VBrandImageNode]
}

"Обновить пакетно Город. Все NOT NULL поля - обязательные"
type UpdatebatchCityMutation {
  citys: [VCityNode]
}

"Обновить пакетно Тип клиента. Все NOT NULL поля - обязательные"
type UpdatebatchClienttypeMutation {
  clientTypes: [VClientTypeNode]
}

"Обновить пакетно Конструкцию. Все NOT NULL поля - обязательные"
type UpdatebatchConstructionMutation {
  constructions: [VConstructionOptimizedNode]
}

"Обновить пакетно Construction notification. Все NOT NULL поля - обязательные"
type UpdatebatchConstructionnotificationMutation {
  constructionNotifications: [VConstructionNotificationOptimizedNode]
}

"Обновить пакетно Сторону конструкции. Все NOT NULL поля - обязательные"
type UpdatebatchConstructionsideMutation {
  constructionSides: [VConstructionSideOptimizedNode]
}

"Обновить пакетно Контактное лицо. Все NOT NULL поля - обязательные"
type UpdatebatchContactpersonMutation {
  contactPersons: [VContactPersonNode]
}

"Обновить пакетно Договор. Все NOT NULL поля - обязательные"
type UpdatebatchContractMutation {
  contracts: [VContractOptimizedNode]
}

"Обновить пакетно Тип договора. Все NOT NULL поля - обязательные"
type UpdatebatchContracttypeMutation {
  contractTypes: [VContractTypeNode]
}

"Обновить пакетно Страну. Все NOT NULL поля - обязательные"
type UpdatebatchCountryMutation {
  countrys: [VCountryNode]
}

"Обновить пакетно Экипаж. Все NOT NULL поля - обязательные"
type UpdatebatchCrewMutation {
  crews: [VCrewOptimizedNode]
}

"Обновить пакетно Дизайн. Все NOT NULL поля - обязательные"
type UpdatebatchDesignMutation {
  designs: [VDesignNode]
}

"Обновить пакетно Район. Все NOT NULL поля - обязательные"
type UpdatebatchDistrictMutation {
  districts: [VDistrictNode]
}

"Обновить пакетно Должность. Все NOT NULL поля - обязательные"
type UpdatebatchEmployeepositionMutation {
  employeePositions: [VEmployeePositionNode]
}

"Обновить пакетно Семейство конструкции. Все NOT NULL поля - обязательные"
type UpdatebatchFamilyconstructionMutation {
  familyConstructions: [VFamilyConstructionNode]
}

"Обновить пакетно Формат. Все NOT NULL поля - обязательные"
type UpdatebatchFormatMutation {
  formats: [VFormatNode]
}

"Обновить пакетно Адресного справочник. Все NOT NULL поля - обязательные"
type UpdatebatchLocaddressMutation {
  addressess: [VAddressesNode]
}

"Обновить пакетно Местоположение. Все NOT NULL поля - обязательные"
type UpdatebatchLocationMutation {
  locations: [VLocationOptimizedNode]
}

"Обновить пакетно Модель конструкции. Все NOT NULL поля - обязательные"
type UpdatebatchModelconstructionMutation {
  modelConstructions: [VModelConstructionNode]
}

"Обновить пакетно Монтаж. Все NOT NULL поля - обязательные"
type UpdatebatchMountingMutation {
  mountings: [VMountingNode]
}

"Обновить пакетно Фотоотчёт о монтаже. Все NOT NULL поля - обязательные"
type UpdatebatchMountingphotoMutation {
  mountingPhotos: [VMountingPhotoNode]
}

"Обновить пакетно Ремонтно-монтажную работу. Все NOT NULL поля - обязательные"
type UpdatebatchMountingtaskMutation {
  mountingTasks: [VMountingTaskNode]
}

"Обновить пакетно Уведомление. Все NOT NULL поля - обязательные"
type UpdatebatchNotificationMutation {
  notifications: [VNotificationOptimizedNode]
}

"Обновить пакетно Помеху. Все NOT NULL поля - обязательные"
type UpdatebatchObstructionMutation {
  obstructions: [VObstructionNode]
}

"Обновить пакетно Контрагента. Все NOT NULL поля - обязательные"
type UpdatebatchPartnerMutation {
  partners: [VPartnerOptimizedNode]
}

"Обновить пакетно Тип контрагента. Все NOT NULL поля - обязательные"
type UpdatebatchPartnertypeMutation {
  partnerTypes: [VPartnerTypeNode]
}

"Обновить пакетно Почтовый индекс. Все NOT NULL поля - обязательные"
type UpdatebatchPostcodeMutation {
  postcodes: [VPostcodeNode]
}

"Обновить пакетно Проект. Все NOT NULL поля - обязательные"
type UpdatebatchProjectMutation {
  projects: [VProjectNode]
}

"Обновить пакетно Назначение стороны. Все NOT NULL поля - обязательные"
type UpdatebatchPurposesideMutation {
  purposeSides: [VPurposeSideNode]
}

"Обновить пакетно Бронирование. Все NOT NULL поля - обязательные"
type UpdatebatchReservationMutation {
  reservations: [VReservationOptimizedNode]
}

"Обновить пакетно Вид бронирования. Все NOT NULL поля - обязательные"
type UpdatebatchReservationtypeMutation {
  reservationTypes: [VReservationTypeNode]
}

"Обновить пакетно Дополнительные расходы (РТС). Все NOT NULL поля - обязательные"
type UpdatebatchSalesadditionalcostMutation {
  additionalCostss: [VAdditionalCostsNode]
}

"Обновить пакетно Счёт. Все NOT NULL поля - обязательные"
type UpdatebatchSalesinvoiceMutation {
  invoices: [VInvoiceNode]
}

"Обновить пакетно Дополнительный расход НОН РТС. Все NOT NULL поля - обязательные"
type UpdatebatchSalesnonrtsMutation {
  estimateNonRtss: [VEstimateNonRtsNode]
}

"Обновить пакетно Стоимость рекламного размещения по прайсу. Все NOT NULL поля - обязательные"
type UpdatebatchSalesplacementpriceMutation {
  placementPrices: [VPlacementPriceNode]
}

"Обновить пакетно Сторону. Все NOT NULL поля - обязательные"
type UpdatebatchSideMutation {
  sides: [VSideNode]
}

"Обновить пакетно Статические, конфигурационные доп. расходы. Все NOT NULL поля - обязательные"
type UpdatebatchStaticadditionalcostsMutation {
  staticAdditionalCostss: [VStaticAdditionalCostsNode]
}

"Обновить пакетно Техническую проблему. Все NOT NULL поля - обязательные"
type UpdatebatchTechproblemMutation {
  techProblemss: [VTechProblemsNode]
}

"Обновить пакетно Подсемейство конструкции. Все NOT NULL поля - обязательные"
type UpdatebatchUnderfamilyconstructionMutation {
  underFamilyConstructions: [VUnderFamilyConstructionNode]
}

"Обновить пакетно Пользователя. Все NOT NULL поля - обязательные"
type UpdatebatchUserMutation {
  customUsers: [VCustomUserNode]
}

"Обновить пакетно Группу. Все NOT NULL поля - обязательные"
type UpdatebatchUsergroupMutation {
  groups: [VGroupNode]
}

"Обновить пакетно Право. Все NOT NULL поля - обязательные"
type UpdatebatchUserpermissionMutation {
  permissions: [VPermissionNode]
}

"Обновить пакетно Сектор деятельности. Все NOT NULL поля - обязательные"
type UpdatebatchWorkingsectorMutation {
  workingSectors: [VWorkingSectorNode]
}

"Обновить пакетно Рекламную сторону. Все поля - необязательные"
type UpdatebatchpatchAdvertisingsideMutation {
  advertisingSides: [VAdvertisingSideNode]
}

"Обновить пакетно Рекламную промо-компания. Все поля - необязательные"
type UpdatebatchpatchAdvertpromocompanyMutation {
  advertPromoCompanys: [VAdvertPromoCompanyOptimizedNode]
}

"Обновить пакетно Агентскую комиссия. Все поля - необязательные"
type UpdatebatchpatchAgencycommissionMutation {
  agencyCommissions: [VAgencyCommissionNode]
}

"Обновить пакетно Приложение к договору. Все поля - необязательные"
type UpdatebatchpatchAppendixMutation {
  appendixs: [VAppendixOptimizedNode]
}

"Обновить пакетно Бренд. Все поля - необязательные"
type UpdatebatchpatchBrandMutation {
  brands: [VBrandOptimizedNode]
}

"Обновить пакетно Изображение бренда. Все поля - необязательные"
type UpdatebatchpatchBrandimageMutation {
  brandImages: [VBrandImageNode]
}

"Обновить пакетно Город. Все поля - необязательные"
type UpdatebatchpatchCityMutation {
  citys: [VCityNode]
}

"Обновить пакетно Тип клиента. Все поля - необязательные"
type UpdatebatchpatchClienttypeMutation {
  clientTypes: [VClientTypeNode]
}

"Обновить пакетно Конструкцию. Все поля - необязательные"
type UpdatebatchpatchConstructionMutation {
  constructions: [VConstructionOptimizedNode]
}

"Обновить пакетно Construction notification. Все поля - необязательные"
type UpdatebatchpatchConstructionnotificationMutation {
  constructionNotifications: [VConstructionNotificationOptimizedNode]
}

"Обновить пакетно Сторону конструкции. Все поля - необязательные"
type UpdatebatchpatchConstructionsideMutation {
  constructionSides: [VConstructionSideOptimizedNode]
}

"Обновить пакетно Контактное лицо. Все поля - необязательные"
type UpdatebatchpatchContactpersonMutation {
  contactPersons: [VContactPersonNode]
}

"Обновить пакетно Договор. Все поля - необязательные"
type UpdatebatchpatchContractMutation {
  contracts: [VContractOptimizedNode]
}

"Обновить пакетно Тип договора. Все поля - необязательные"
type UpdatebatchpatchContracttypeMutation {
  contractTypes: [VContractTypeNode]
}

"Обновить пакетно Страну. Все поля - необязательные"
type UpdatebatchpatchCountryMutation {
  countrys: [VCountryNode]
}

"Обновить пакетно Экипаж. Все поля - необязательные"
type UpdatebatchpatchCrewMutation {
  crews: [VCrewOptimizedNode]
}

"Обновить пакетно Дизайн. Все поля - необязательные"
type UpdatebatchpatchDesignMutation {
  designs: [VDesignNode]
}

"Обновить пакетно Район. Все поля - необязательные"
type UpdatebatchpatchDistrictMutation {
  districts: [VDistrictNode]
}

"Обновить пакетно Должность. Все поля - необязательные"
type UpdatebatchpatchEmployeepositionMutation {
  employeePositions: [VEmployeePositionNode]
}

"Обновить пакетно Семейство конструкции. Все поля - необязательные"
type UpdatebatchpatchFamilyconstructionMutation {
  familyConstructions: [VFamilyConstructionNode]
}

"Обновить пакетно Формат. Все поля - необязательные"
type UpdatebatchpatchFormatMutation {
  formats: [VFormatNode]
}

"Обновить пакетно Адресного справочник. Все поля - необязательные"
type UpdatebatchpatchLocaddressMutation {
  addressess: [VAddressesNode]
}

"Обновить пакетно Местоположение. Все поля - необязательные"
type UpdatebatchpatchLocationMutation {
  locations: [VLocationOptimizedNode]
}

"Обновить пакетно Модель конструкции. Все поля - необязательные"
type UpdatebatchpatchModelconstructionMutation {
  modelConstructions: [VModelConstructionNode]
}

"Обновить пакетно Монтаж. Все поля - необязательные"
type UpdatebatchpatchMountingMutation {
  mountings: [VMountingNode]
}

"Обновить пакетно Фотоотчёт о монтаже. Все поля - необязательные"
type UpdatebatchpatchMountingphotoMutation {
  mountingPhotos: [VMountingPhotoNode]
}

"Обновить пакетно Ремонтно-монтажную работу. Все поля - необязательные"
type UpdatebatchpatchMountingtaskMutation {
  mountingTasks: [VMountingTaskNode]
}

"Обновить пакетно Уведомление. Все поля - необязательные"
type UpdatebatchpatchNotificationMutation {
  notifications: [VNotificationOptimizedNode]
}

"Обновить пакетно Помеху. Все поля - необязательные"
type UpdatebatchpatchObstructionMutation {
  obstructions: [VObstructionNode]
}

"Обновить пакетно Контрагента. Все поля - необязательные"
type UpdatebatchpatchPartnerMutation {
  partners: [VPartnerOptimizedNode]
}

"Обновить пакетно Тип контрагента. Все поля - необязательные"
type UpdatebatchpatchPartnertypeMutation {
  partnerTypes: [VPartnerTypeNode]
}

"Обновить пакетно Почтовый индекс. Все поля - необязательные"
type UpdatebatchpatchPostcodeMutation {
  postcodes: [VPostcodeNode]
}

"Обновить пакетно Проект. Все поля - необязательные"
type UpdatebatchpatchProjectMutation {
  projects: [VProjectNode]
}

"Обновить пакетно Назначение стороны. Все поля - необязательные"
type UpdatebatchpatchPurposesideMutation {
  purposeSides: [VPurposeSideNode]
}

"Обновить пакетно Бронирование. Все поля - необязательные"
type UpdatebatchpatchReservationMutation {
  reservations: [VReservationOptimizedNode]
}

"Обновить пакетно Вид бронирования. Все поля - необязательные"
type UpdatebatchpatchReservationtypeMutation {
  reservationTypes: [VReservationTypeNode]
}

"Обновить пакетно Дополнительные расходы (РТС). Все поля - необязательные"
type UpdatebatchpatchSalesadditionalcostMutation {
  additionalCostss: [VAdditionalCostsNode]
}

"Обновить пакетно Счёт. Все поля - необязательные"
type UpdatebatchpatchSalesinvoiceMutation {
  invoices: [VInvoiceNode]
}

"Обновить пакетно Дополнительный расход НОН РТС. Все поля - необязательные"
type UpdatebatchpatchSalesnonrtsMutation {
  estimateNonRtss: [VEstimateNonRtsNode]
}

"Обновить пакетно Стоимость рекламного размещения по прайсу. Все поля - необязательные"
type UpdatebatchpatchSalesplacementpriceMutation {
  placementPrices: [VPlacementPriceNode]
}

"Обновить пакетно Сторону. Все поля - необязательные"
type UpdatebatchpatchSideMutation {
  sides: [VSideNode]
}

"Обновить пакетно Статические, конфигурационные доп. расходы. Все поля - необязательные"
type UpdatebatchpatchStaticadditionalcostsMutation {
  staticAdditionalCostss: [VStaticAdditionalCostsNode]
}

"Обновить пакетно Техническую проблему. Все поля - необязательные"
type UpdatebatchpatchTechproblemMutation {
  techProblemss: [VTechProblemsNode]
}

"Обновить пакетно Подсемейство конструкции. Все поля - необязательные"
type UpdatebatchpatchUnderfamilyconstructionMutation {
  underFamilyConstructions: [VUnderFamilyConstructionNode]
}

"Обновить пакетно Пользователя. Все поля - необязательные"
type UpdatebatchpatchUserMutation {
  customUsers: [VCustomUserNode]
}

"Обновить пакетно Группу. Все поля - необязательные"
type UpdatebatchpatchUsergroupMutation {
  groups: [VGroupNode]
}

"Обновить пакетно Право. Все поля - необязательные"
type UpdatebatchpatchUserpermissionMutation {
  permissions: [VPermissionNode]
}

"Обновить пакетно Сектор деятельности. Все поля - необязательные"
type UpdatebatchpatchWorkingsectorMutation {
  workingSectors: [VWorkingSectorNode]
}

"Обновить Рекламную сторону. Все поля - необязательные"
type UpdatepatchAdvertisingsideMutation {
  advertisingSide: VAdvertisingSideNode
}

"Обновить Рекламную промо-компания. Все поля - необязательные"
type UpdatepatchAdvertpromocompanyMutation {
  advertPromoCompany: VAdvertPromoCompanyOptimizedNode
}

"Обновить Агентскую комиссия. Все поля - необязательные"
type UpdatepatchAgencycommissionMutation {
  agencyCommission: VAgencyCommissionNode
}

"Обновить Приложение к договору. Все поля - необязательные"
type UpdatepatchAppendixMutation {
  appendix: VAppendixOptimizedNode
}

"Обновить Бренд. Все поля - необязательные"
type UpdatepatchBrandMutation {
  brand: VBrandOptimizedNode
}

"Обновить Изображение бренда. Все поля - необязательные"
type UpdatepatchBrandimageMutation {
  brandImage: VBrandImageNode
}

"Обновить Город. Все поля - необязательные"
type UpdatepatchCityMutation {
  city: VCityNode
}

"Обновить Тип клиента. Все поля - необязательные"
type UpdatepatchClienttypeMutation {
  clientType: VClientTypeNode
}

"Обновить Конструкцию. Все поля - необязательные"
type UpdatepatchConstructionMutation {
  construction: VConstructionOptimizedNode
}

"Обновить Construction notification. Все поля - необязательные"
type UpdatepatchConstructionnotificationMutation {
  constructionNotification: VConstructionNotificationOptimizedNode
}

"Обновить Сторону конструкции. Все поля - необязательные"
type UpdatepatchConstructionsideMutation {
  constructionSide: VConstructionSideOptimizedNode
}

"Обновить Контактное лицо. Все поля - необязательные"
type UpdatepatchContactpersonMutation {
  contactPerson: VContactPersonNode
}

"Обновить Договор. Все поля - необязательные"
type UpdatepatchContractMutation {
  contract: VContractOptimizedNode
}

"Обновить Тип договора. Все поля - необязательные"
type UpdatepatchContracttypeMutation {
  contractType: VContractTypeNode
}

"Обновить Страну. Все поля - необязательные"
type UpdatepatchCountryMutation {
  country: VCountryNode
}

"Обновить Экипаж. Все поля - необязательные"
type UpdatepatchCrewMutation {
  crew: VCrewOptimizedNode
}

"Обновить Дизайн. Все поля - необязательные"
type UpdatepatchDesignMutation {
  design: VDesignNode
}

"Обновить Район. Все поля - необязательные"
type UpdatepatchDistrictMutation {
  district: VDistrictNode
}

"Обновить Должность. Все поля - необязательные"
type UpdatepatchEmployeepositionMutation {
  employeePosition: VEmployeePositionNode
}

"Обновить Семейство конструкции. Все поля - необязательные"
type UpdatepatchFamilyconstructionMutation {
  familyConstruction: VFamilyConstructionNode
}

"Обновить Формат. Все поля - необязательные"
type UpdatepatchFormatMutation {
  format: VFormatNode
}

"Обновить Адресного справочник. Все поля - необязательные"
type UpdatepatchLocaddressMutation {
  addresses: VAddressesNode
}

"Обновить Местоположение. Все поля - необязательные"
type UpdatepatchLocationMutation {
  location: VLocationOptimizedNode
}

"Обновить Модель конструкции. Все поля - необязательные"
type UpdatepatchModelconstructionMutation {
  modelConstruction: VModelConstructionNode
}

"Обновить Монтаж. Все поля - необязательные"
type UpdatepatchMountingMutation {
  mounting: VMountingNode
}

"Обновить Фотоотчёт о монтаже. Все поля - необязательные"
type UpdatepatchMountingphotoMutation {
  mountingPhoto: VMountingPhotoNode
}

"Обновить Ремонтно-монтажную работу. Все поля - необязательные"
type UpdatepatchMountingtaskMutation {
  mountingTask: VMountingTaskNode
}

"Обновить Уведомление. Все поля - необязательные"
type UpdatepatchNotificationMutation {
  notification: VNotificationOptimizedNode
}

"Обновить Помеху. Все поля - необязательные"
type UpdatepatchObstructionMutation {
  obstruction: VObstructionNode
}

"Обновить Контрагента. Все поля - необязательные"
type UpdatepatchPartnerMutation {
  partner: VPartnerOptimizedNode
}

"Обновить Тип контрагента. Все поля - необязательные"
type UpdatepatchPartnertypeMutation {
  partnerType: VPartnerTypeNode
}

"Обновить Почтовый индекс. Все поля - необязательные"
type UpdatepatchPostcodeMutation {
  postcode: VPostcodeNode
}

"Обновить Проект. Все поля - необязательные"
type UpdatepatchProjectMutation {
  project: VProjectNode
}

"Обновить Назначение стороны. Все поля - необязательные"
type UpdatepatchPurposesideMutation {
  purposeSide: VPurposeSideNode
}

"Обновить Бронирование. Все поля - необязательные"
type UpdatepatchReservationMutation {
  reservation: VReservationOptimizedNode
}

"Обновить Вид бронирования. Все поля - необязательные"
type UpdatepatchReservationtypeMutation {
  reservationType: VReservationTypeNode
}

"Обновить Дополнительные расходы (РТС). Все поля - необязательные"
type UpdatepatchSalesadditionalcostMutation {
  additionalCosts: VAdditionalCostsNode
}

"Обновить Счёт. Все поля - необязательные"
type UpdatepatchSalesinvoiceMutation {
  invoice: VInvoiceNode
}

"Обновить Дополнительный расход НОН РТС. Все поля - необязательные"
type UpdatepatchSalesnonrtsMutation {
  estimateNonRts: VEstimateNonRtsNode
}

"Обновить Стоимость рекламного размещения по прайсу. Все поля - необязательные"
type UpdatepatchSalesplacementpriceMutation {
  placementPrice: VPlacementPriceNode
}

"Обновить Сторону. Все поля - необязательные"
type UpdatepatchSideMutation {
  side: VSideNode
}

"Обновить Статические, конфигурационные доп. расходы. Все поля - необязательные"
type UpdatepatchStaticadditionalcostsMutation {
  staticAdditionalCosts: VStaticAdditionalCostsNode
}

"Обновить Техническую проблему. Все поля - необязательные"
type UpdatepatchTechproblemMutation {
  techProblems: VTechProblemsNode
}

"Обновить Подсемейство конструкции. Все поля - необязательные"
type UpdatepatchUnderfamilyconstructionMutation {
  underFamilyConstruction: VUnderFamilyConstructionNode
}

"Обновить Пользователя. Все поля - необязательные"
type UpdatepatchUserMutation {
  customUser: VCustomUserNode
}

"Обновить Группу. Все поля - необязательные"
type UpdatepatchUsergroupMutation {
  group: VGroupNode
}

"Обновить Право. Все поля - необязательные"
type UpdatepatchUserpermissionMutation {
  permission: VPermissionNode
}

"Обновить Сектор деятельности. Все поля - необязательные"
type UpdatepatchWorkingsectorMutation {
  workingSector: VWorkingSectorNode
}

type UploadPackages {
  errMessage: String
  status: Boolean
}

type UserNode implements Node {
  archived: Boolean
  "Проекты -> Менеджер Бэк-оффиса"
  backOfficeManagersOfProjects(after: String, backOfficeManager_Email: String, backOfficeManager_Email_Icontains: String, backOfficeManager_FirstName: String, backOfficeManager_FirstName_Icontains: String, backOfficeManager_Id: ID, backOfficeManager_Id_Isnull: Boolean, backOfficeManager_LastName: String, backOfficeManager_LastName_Icontains: String, backOfficeManager_Name: String, backOfficeManager_Name_Icontains: String, backOfficeManager_Phone: String, backOfficeManager_Phone_Icontains: String, before: String, brand_Id: ID, brand_Id_Isnull: Boolean, brand_Title: String, brand_Title_Icontains: String, client_Id: ID, client_Id_Isnull: Boolean, client_PartnerType_Id: ID, client_PartnerType_Id_Isnull: Boolean, client_PartnerType_Title: String, client_PartnerType_Title_Icontains: String, client_Title: String, client_Title_Icontains: String, client_WorkingSectors_Description: String, client_WorkingSectors_Description_Icontains: String, client_WorkingSectors_Id: ID, client_WorkingSectors_Id_Isnull: Boolean, client_WorkingSectors_Title: String, client_WorkingSectors_Title_Icontains: String, code: String, code_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, numInYear: Int, numInYear_Isnull: Boolean, offset: Int, salesManager_Email: String, salesManager_Email_Icontains: String, salesManager_FirstName: String, salesManager_FirstName_Icontains: String, salesManager_Id: ID, salesManager_Id_Isnull: Boolean, salesManager_LastName: String, salesManager_LastName_Icontains: String, salesManager_Name: String, salesManager_Name_Icontains: String, salesManager_Phone: String, salesManager_Phone_Icontains: String, startDate: DateTime, startDate_Gt: DateTime, startDate_Gte: DateTime, startDate_Lt: DateTime, startDate_Lte: DateTime, title: String, title_Icontains: String): VProjectNodeConnection!
  changelogSet(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VChangeLogNodeConnection!
  constructionHistorySet(after: String, before: String, first: Int, last: Int, offset: Int, targetId: ID, targetId_Isnull: Boolean): Vconstruction_historyOptimizedNodeConnection!
  constructionSideHistorySet(after: String, before: String, first: Int, last: Int, offset: Int, targetId: ID, targetId_Isnull: Boolean): Vconstruction_side_historyOptimizedNodeConnection!
  "Договора -> Создатель (кто внес данные)"
  createdContracts(
    after: String,
    before: String,
    code: String,
    code_Icontains: String,
    contractType_Name: String,
    contractType_Name_Icontains: String,
    creator_Name: String,
    creator_Name_Icontains: String,
    end: DateTime,
    end_Gt: DateTime,
    end_Gte: DateTime,
    end_Lt: DateTime,
    end_Lte: DateTime,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    initiator_Name: String,
    initiator_Name_Icontains: String,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partner_Title: String,
    partner_Title_Icontains: String,
    registrationDate: DateTime,
    registrationDate_Gt: DateTime,
    registrationDate_Gte: DateTime,
    registrationDate_Lt: DateTime,
    registrationDate_Lte: DateTime,
    returnStatus: Boolean,
    returnStatus_Isnull: Boolean,
    start: DateTime,
    start_Gt: DateTime,
    start_Gte: DateTime,
    start_Lt: DateTime,
    start_Lte: DateTime
  ): VContractOptimizedNodeConnection!
  "Приложения к договору -> Создатель (кто внес данные)"
  createdContractsAppendices(
    after: String,
    before: String,
    code: String,
    code_Icontains: String,
    contractId: ID,
    contractId_Isnull: Boolean,
    contract_Code: String,
    contract_Code_Icontains: String,
    contract_PartnerId: ID,
    contract_PartnerId_Isnull: Boolean,
    contract_Partner_Title: String,
    contract_Partner_Title_Icontains: String,
    contract_SerialNumber: String,
    contract_SerialNumber_Icontains: String,
    createdDate: DateTime,
    createdDate_Gt: DateTime,
    createdDate_Gte: DateTime,
    createdDate_Lt: DateTime,
    createdDate_Lte: DateTime,
    creator: ID,
    creator_Isnull: Boolean,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    periodEndDate: DateTime,
    periodEndDate_Gt: DateTime,
    periodEndDate_Gte: DateTime,
    periodEndDate_Lt: DateTime,
    periodEndDate_Lte: DateTime,
    periodStartDate: DateTime,
    periodStartDate_Gt: DateTime,
    periodStartDate_Gte: DateTime,
    periodStartDate_Lt: DateTime,
    periodStartDate_Lte: DateTime,
    projectId: ID,
    projectId_Isnull: Boolean,
    project_BackOfficeManagerId: ID,
    project_BackOfficeManagerId_Isnull: Boolean,
    project_BackOfficeManager_FirstName: String,
    project_BackOfficeManager_FirstName_Icontains: String,
    project_BackOfficeManager_LastName: String,
    project_BackOfficeManager_LastName_Icontains: String,
    project_BrandId: ID,
    project_BrandId_Isnull: Boolean,
    project_Brand_Title: String,
    project_Brand_Title_Icontains: String,
    project_ClientId: ID,
    project_ClientId_Isnull: Boolean,
    project_Client_Title: String,
    project_Client_Title_Icontains: String,
    project_Code: String,
    project_Code_Icontains: String,
    project_Id: ID,
    project_Id_Isnull: Boolean,
    project_Title: String,
    project_Title_Icontains: String,
    returnStatus: Boolean,
    returnStatus_Isnull: Boolean,
    salesManagerId: ID,
    salesManagerId_Isnull: Boolean,
    salesManager_FirstName: String,
    salesManager_FirstName_Icontains: String,
    salesManager_LastName: String,
    salesManager_LastName_Icontains: String
  ): VAppendixOptimizedNodeConnection!
  "Проекты -> Создатель (кто внес данные)"
  createdProjects(after: String, backOfficeManager_Email: String, backOfficeManager_Email_Icontains: String, backOfficeManager_FirstName: String, backOfficeManager_FirstName_Icontains: String, backOfficeManager_Id: ID, backOfficeManager_Id_Isnull: Boolean, backOfficeManager_LastName: String, backOfficeManager_LastName_Icontains: String, backOfficeManager_Name: String, backOfficeManager_Name_Icontains: String, backOfficeManager_Phone: String, backOfficeManager_Phone_Icontains: String, before: String, brand_Id: ID, brand_Id_Isnull: Boolean, brand_Title: String, brand_Title_Icontains: String, client_Id: ID, client_Id_Isnull: Boolean, client_PartnerType_Id: ID, client_PartnerType_Id_Isnull: Boolean, client_PartnerType_Title: String, client_PartnerType_Title_Icontains: String, client_Title: String, client_Title_Icontains: String, client_WorkingSectors_Description: String, client_WorkingSectors_Description_Icontains: String, client_WorkingSectors_Id: ID, client_WorkingSectors_Id_Isnull: Boolean, client_WorkingSectors_Title: String, client_WorkingSectors_Title_Icontains: String, code: String, code_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, numInYear: Int, numInYear_Isnull: Boolean, offset: Int, salesManager_Email: String, salesManager_Email_Icontains: String, salesManager_FirstName: String, salesManager_FirstName_Icontains: String, salesManager_Id: ID, salesManager_Id_Isnull: Boolean, salesManager_LastName: String, salesManager_LastName_Icontains: String, salesManager_Name: String, salesManager_Name_Icontains: String, salesManager_Phone: String, salesManager_Phone_Icontains: String, startDate: DateTime, startDate_Gt: DateTime, startDate_Gte: DateTime, startDate_Lt: DateTime, startDate_Lte: DateTime, title: String, title_Icontains: String): VProjectNodeConnection!
  "date joined"
  dateJoined: DateTime!
  "Почтовый адрес"
  email: String
  "Пользователи -> Должность"
  employeePosition: VEmployeePositionNode
  "first name"
  firstName: String
  "Пользователи <-> Группы"
  groups(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VGroupNodeConnection!
  "The ID of the object."
  id: ID!
  "Договора -> Инициатор"
  initiatedContracts(
    after: String,
    before: String,
    code: String,
    code_Icontains: String,
    contractType_Name: String,
    contractType_Name_Icontains: String,
    creator_Name: String,
    creator_Name_Icontains: String,
    end: DateTime,
    end_Gt: DateTime,
    end_Gte: DateTime,
    end_Lt: DateTime,
    end_Lte: DateTime,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    initiator_Name: String,
    initiator_Name_Icontains: String,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partner_Title: String,
    partner_Title_Icontains: String,
    registrationDate: DateTime,
    registrationDate_Gt: DateTime,
    registrationDate_Gte: DateTime,
    registrationDate_Lt: DateTime,
    registrationDate_Lte: DateTime,
    returnStatus: Boolean,
    returnStatus_Isnull: Boolean,
    start: DateTime,
    start_Gt: DateTime,
    start_Gte: DateTime,
    start_Lt: DateTime,
    start_Lte: DateTime
  ): VContractOptimizedNodeConnection!
  "active Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
  isActive: Boolean!
  "staff status. Designates whether the user can log into this admin site."
  isStaff: Boolean!
  "last login"
  lastLogin: DateTime
  "last name"
  lastName: String
  "Ф.И.О."
  name: String
  "Пользователь"
  notificationSet(
    after: String,
    before: String,
    first: Int,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    user_Id: ID,
    user_Id_Isnull: Boolean
  ): VNotificationOptimizedNodeConnection!
  "Номер телефона"
  phone: String
  pk: Int
  "Проекты -> Менеджер по продажам"
  salesManagerOfProjects(after: String, backOfficeManager_Email: String, backOfficeManager_Email_Icontains: String, backOfficeManager_FirstName: String, backOfficeManager_FirstName_Icontains: String, backOfficeManager_Id: ID, backOfficeManager_Id_Isnull: Boolean, backOfficeManager_LastName: String, backOfficeManager_LastName_Icontains: String, backOfficeManager_Name: String, backOfficeManager_Name_Icontains: String, backOfficeManager_Phone: String, backOfficeManager_Phone_Icontains: String, before: String, brand_Id: ID, brand_Id_Isnull: Boolean, brand_Title: String, brand_Title_Icontains: String, client_Id: ID, client_Id_Isnull: Boolean, client_PartnerType_Id: ID, client_PartnerType_Id_Isnull: Boolean, client_PartnerType_Title: String, client_PartnerType_Title_Icontains: String, client_Title: String, client_Title_Icontains: String, client_WorkingSectors_Description: String, client_WorkingSectors_Description_Icontains: String, client_WorkingSectors_Id: ID, client_WorkingSectors_Id_Isnull: Boolean, client_WorkingSectors_Title: String, client_WorkingSectors_Title_Icontains: String, code: String, code_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, numInYear: Int, numInYear_Isnull: Boolean, offset: Int, salesManager_Email: String, salesManager_Email_Icontains: String, salesManager_FirstName: String, salesManager_FirstName_Icontains: String, salesManager_Id: ID, salesManager_Id_Isnull: Boolean, salesManager_LastName: String, salesManager_LastName_Icontains: String, salesManager_Name: String, salesManager_Name_Icontains: String, salesManager_Phone: String, salesManager_Phone_Icontains: String, startDate: DateTime, startDate_Gt: DateTime, startDate_Gte: DateTime, startDate_Lt: DateTime, startDate_Lte: DateTime, title: String, title_Icontains: String): VProjectNodeConnection!
  "Договора -> Менеджер по продажам"
  salesManagerOnContracts(
    after: String,
    before: String,
    code: String,
    code_Icontains: String,
    contractType_Name: String,
    contractType_Name_Icontains: String,
    creator_Name: String,
    creator_Name_Icontains: String,
    end: DateTime,
    end_Gt: DateTime,
    end_Gte: DateTime,
    end_Lt: DateTime,
    end_Lte: DateTime,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    initiator_Name: String,
    initiator_Name_Icontains: String,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partner_Title: String,
    partner_Title_Icontains: String,
    registrationDate: DateTime,
    registrationDate_Gt: DateTime,
    registrationDate_Gte: DateTime,
    registrationDate_Lt: DateTime,
    registrationDate_Lte: DateTime,
    returnStatus: Boolean,
    returnStatus_Isnull: Boolean,
    start: DateTime,
    start_Gt: DateTime,
    start_Gte: DateTime,
    start_Lt: DateTime,
    start_Lte: DateTime
  ): VContractOptimizedNodeConnection!
  "Приложения к договору -> Менеджер по продажам"
  salesManagerOnContractsAppendices(
    after: String,
    before: String,
    code: String,
    code_Icontains: String,
    contractId: ID,
    contractId_Isnull: Boolean,
    contract_Code: String,
    contract_Code_Icontains: String,
    contract_PartnerId: ID,
    contract_PartnerId_Isnull: Boolean,
    contract_Partner_Title: String,
    contract_Partner_Title_Icontains: String,
    contract_SerialNumber: String,
    contract_SerialNumber_Icontains: String,
    createdDate: DateTime,
    createdDate_Gt: DateTime,
    createdDate_Gte: DateTime,
    createdDate_Lt: DateTime,
    createdDate_Lte: DateTime,
    creator: ID,
    creator_Isnull: Boolean,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    periodEndDate: DateTime,
    periodEndDate_Gt: DateTime,
    periodEndDate_Gte: DateTime,
    periodEndDate_Lt: DateTime,
    periodEndDate_Lte: DateTime,
    periodStartDate: DateTime,
    periodStartDate_Gt: DateTime,
    periodStartDate_Gte: DateTime,
    periodStartDate_Lt: DateTime,
    periodStartDate_Lte: DateTime,
    projectId: ID,
    projectId_Isnull: Boolean,
    project_BackOfficeManagerId: ID,
    project_BackOfficeManagerId_Isnull: Boolean,
    project_BackOfficeManager_FirstName: String,
    project_BackOfficeManager_FirstName_Icontains: String,
    project_BackOfficeManager_LastName: String,
    project_BackOfficeManager_LastName_Icontains: String,
    project_BrandId: ID,
    project_BrandId_Isnull: Boolean,
    project_Brand_Title: String,
    project_Brand_Title_Icontains: String,
    project_ClientId: ID,
    project_ClientId_Isnull: Boolean,
    project_Client_Title: String,
    project_Client_Title_Icontains: String,
    project_Code: String,
    project_Code_Icontains: String,
    project_Id: ID,
    project_Id_Isnull: Boolean,
    project_Title: String,
    project_Title_Icontains: String,
    returnStatus: Boolean,
    returnStatus_Isnull: Boolean,
    salesManagerId: ID,
    salesManagerId_Isnull: Boolean,
    salesManager_FirstName: String,
    salesManager_FirstName_Icontains: String,
    salesManager_LastName: String,
    salesManager_LastName_Icontains: String
  ): VAppendixOptimizedNodeConnection!
  "План по продажам на год"
  salesYearPlan: Decimal
  secondaryEmail: String
  "Индивидуальные права данного пользователя."
  userPermissions(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VPermissionNodeConnection!
  "username, Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
  username: String!
  verified: Boolean
}

type UserNodeConnection {
  "Contains the nodes in this connection."
  edges: [UserNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `UserNode` and its cursor."
type UserNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: UserNode
}

"Дополнительные расходы (РТС)"
type VAdditionalCostsNode implements Node {
  "Дополнительные расходы -> Агентская комиссия"
  agencyCommission: VAgencyCommissionNode
  "Дополнительные расходы НОН РТС -> Приложение"
  appendix(
    after: String,
    before: String,
    code: String,
    code_Icontains: String,
    contractId: ID,
    contractId_Isnull: Boolean,
    contract_Code: String,
    contract_Code_Icontains: String,
    contract_PartnerId: ID,
    contract_PartnerId_Isnull: Boolean,
    contract_Partner_Title: String,
    contract_Partner_Title_Icontains: String,
    contract_SerialNumber: String,
    contract_SerialNumber_Icontains: String,
    createdDate: DateTime,
    createdDate_Gt: DateTime,
    createdDate_Gte: DateTime,
    createdDate_Lt: DateTime,
    createdDate_Lte: DateTime,
    creator: ID,
    creator_Isnull: Boolean,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    periodEndDate: DateTime,
    periodEndDate_Gt: DateTime,
    periodEndDate_Gte: DateTime,
    periodEndDate_Lt: DateTime,
    periodEndDate_Lte: DateTime,
    periodStartDate: DateTime,
    periodStartDate_Gt: DateTime,
    periodStartDate_Gte: DateTime,
    periodStartDate_Lt: DateTime,
    periodStartDate_Lte: DateTime,
    projectId: ID,
    projectId_Isnull: Boolean,
    project_BackOfficeManagerId: ID,
    project_BackOfficeManagerId_Isnull: Boolean,
    project_BackOfficeManager_FirstName: String,
    project_BackOfficeManager_FirstName_Icontains: String,
    project_BackOfficeManager_LastName: String,
    project_BackOfficeManager_LastName_Icontains: String,
    project_BrandId: ID,
    project_BrandId_Isnull: Boolean,
    project_Brand_Title: String,
    project_Brand_Title_Icontains: String,
    project_ClientId: ID,
    project_ClientId_Isnull: Boolean,
    project_Client_Title: String,
    project_Client_Title_Icontains: String,
    project_Code: String,
    project_Code_Icontains: String,
    project_Id: ID,
    project_Id_Isnull: Boolean,
    project_Title: String,
    project_Title_Icontains: String,
    returnStatus: Boolean,
    returnStatus_Isnull: Boolean,
    salesManagerId: ID,
    salesManagerId_Isnull: Boolean,
    salesManager_FirstName: String,
    salesManager_FirstName_Icontains: String,
    salesManager_LastName: String,
    salesManager_LastName_Icontains: String
  ): VAppendixOptimizedNodeConnection!
  "Категория дополнительного расхода"
  category: AdditionalCostsCategory!
  "Дополнительные расходы -> Город"
  city: VCityNode
  "Стоимость после скидки на дополнительный расход"
  costAfterDiscount: Decimal
  "Количество"
  count: Int
  "Процент скидки на дополнительный расход"
  discountPercent: Decimal
  "Окончание периода"
  endPeriod: DateTime
  "The ID of the object."
  id: ID!
  "Цена"
  price: Decimal
  "Дополнительные расходы -> Проект"
  project: VProjectNode
  "Начало периода"
  startPeriod: DateTime
  "Название"
  title: String
}

type VAdditionalCostsNodeConnection {
  "Contains the nodes in this connection."
  edges: [VAdditionalCostsNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VAdditionalCostsNode` and its cursor."
type VAdditionalCostsNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VAdditionalCostsNode
}

"Адресный справочник"
type VAddressesNode implements Node {
  "Контрагенты -> Фактический адрес"
  actualAddressPartners(
    advertisers_Id: ID,
    advertisers_Id_Isnull: Boolean,
    advertisers_Title: String,
    advertisers_Title_Icontains: String,
    after: String,
    before: String,
    binNumber: String,
    binNumber_Icontains: String,
    brands_Title: String,
    brands_Title_Icontains: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    isNonrtsOwner: Boolean,
    isNonrtsOwner_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partnerType_Title: String,
    partnerType_Title_Icontains: String,
    title: String,
    title_Icontains: String,
    workingSectors_Title: String,
    workingSectors_Title_Icontains: String
  ): VPartnerOptimizedNodeConnection!
  "Адрес"
  address: String!
  "Местоположения -> Юридический адрес"
  constructionsByActualAdress(
    active: Boolean,
    active_Isnull: Boolean,
    after: String,
    before: String,
    buhInventNumber: String,
    buhInventNumber_Icontains: String,
    coordinates: String,
    coordinates_Isnull: Boolean,
    createdAt: DateTime,
    createdAt_Gt: DateTime,
    createdAt_Gte: DateTime,
    createdAt_Lt: DateTime,
    createdAt_Lte: DateTime,
    crew: ID,
    crew_Isnull: Boolean,
    first: Int,
    format_Title: String,
    id: ID,
    id_Isnull: Boolean,
    isNonrts: Boolean,
    isNonrts_Isnull: Boolean,
    last: Int,
    locationId_Isnull: Boolean,
    location_Area: Float,
    location_Area_Gt: Float,
    location_Area_Gte: Float,
    location_Area_Lt: Float,
    location_Area_Lte: Float,
    location_HasArea: Boolean,
    location_HasArea_Isnull: Boolean,
    location_LegalAddress_Address: String,
    location_LegalAddress_Address_Icontains: String,
    location_MarketingAddress_Address: String,
    location_MarketingAddress_Address_Icontains: String,
    location_Postcode_District_City_Country_Title: String,
    location_Postcode_District_City_Country_Title_Icontains: String,
    location_Postcode_District_City_Title: String,
    location_Postcode_District_City_Title_Icontains: String,
    location_Postcode_District_Title: String,
    location_Postcode_District_Title_Icontains: String,
    location_Postcode_Title: String,
    location_Postcode_Title_Icontains: String,
    model_Title: String,
    model_Title_Icontains: String,
    model_Underfamily_Family_Title: String,
    model_Underfamily_Family_Title_Icontains: String,
    model_Underfamily_Title: String,
    model_Underfamily_Title_Icontains: String,
    obstruction_Title: String,
    obstruction_Title_Icontains: String,
    offset: Int,
    "Порядок"
    orderBy: String,
    statusConnection: Boolean,
    statusConnection_Isnull: Boolean,
    techInventNumber: String,
    techInventNumber_Icontains: String,
    techPhoneConstruction: String,
    techPhoneConstruction_Icontains: String,
    updatedAt: DateTime,
    updatedAt_Gt: DateTime,
    updatedAt_Gte: DateTime,
    updatedAt_Lt: DateTime,
    updatedAt_Lte: DateTime
  ): VConstructionOptimizedNodeConnection!
  "Местоположения -> Маркетинговый адрес"
  constructionsByMaketingAdress(
    active: Boolean,
    active_Isnull: Boolean,
    after: String,
    before: String,
    buhInventNumber: String,
    buhInventNumber_Icontains: String,
    coordinates: String,
    coordinates_Isnull: Boolean,
    createdAt: DateTime,
    createdAt_Gt: DateTime,
    createdAt_Gte: DateTime,
    createdAt_Lt: DateTime,
    createdAt_Lte: DateTime,
    crew: ID,
    crew_Isnull: Boolean,
    first: Int,
    format_Title: String,
    id: ID,
    id_Isnull: Boolean,
    isNonrts: Boolean,
    isNonrts_Isnull: Boolean,
    last: Int,
    locationId_Isnull: Boolean,
    location_Area: Float,
    location_Area_Gt: Float,
    location_Area_Gte: Float,
    location_Area_Lt: Float,
    location_Area_Lte: Float,
    location_HasArea: Boolean,
    location_HasArea_Isnull: Boolean,
    location_LegalAddress_Address: String,
    location_LegalAddress_Address_Icontains: String,
    location_MarketingAddress_Address: String,
    location_MarketingAddress_Address_Icontains: String,
    location_Postcode_District_City_Country_Title: String,
    location_Postcode_District_City_Country_Title_Icontains: String,
    location_Postcode_District_City_Title: String,
    location_Postcode_District_City_Title_Icontains: String,
    location_Postcode_District_Title: String,
    location_Postcode_District_Title_Icontains: String,
    location_Postcode_Title: String,
    location_Postcode_Title_Icontains: String,
    model_Title: String,
    model_Title_Icontains: String,
    model_Underfamily_Family_Title: String,
    model_Underfamily_Family_Title_Icontains: String,
    model_Underfamily_Title: String,
    model_Underfamily_Title_Icontains: String,
    obstruction_Title: String,
    obstruction_Title_Icontains: String,
    offset: Int,
    "Порядок"
    orderBy: String,
    statusConnection: Boolean,
    statusConnection_Isnull: Boolean,
    techInventNumber: String,
    techInventNumber_Icontains: String,
    techPhoneConstruction: String,
    techPhoneConstruction_Icontains: String,
    updatedAt: DateTime,
    updatedAt_Gt: DateTime,
    updatedAt_Gte: DateTime,
    updatedAt_Lt: DateTime,
    updatedAt_Lte: DateTime
  ): VConstructionOptimizedNodeConnection!
  "The ID of the object."
  id: ID!
  "Контрагенты -> Юридический адрес"
  legalAddressPartners(
    advertisers_Id: ID,
    advertisers_Id_Isnull: Boolean,
    advertisers_Title: String,
    advertisers_Title_Icontains: String,
    after: String,
    before: String,
    binNumber: String,
    binNumber_Icontains: String,
    brands_Title: String,
    brands_Title_Icontains: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    isNonrtsOwner: Boolean,
    isNonrtsOwner_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partnerType_Title: String,
    partnerType_Title_Icontains: String,
    title: String,
    title_Icontains: String,
    workingSectors_Title: String,
    workingSectors_Title_Icontains: String
  ): VPartnerOptimizedNodeConnection!
  "Местоположения -> Юридический адрес"
  locationsByActualAdress(
    after: String,
    area: Float,
    areaAct: String,
    areaActDate: DateTime,
    areaActDate_Gt: DateTime,
    areaActDate_Gte: DateTime,
    areaActDate_Lt: DateTime,
    areaActDate_Lte: DateTime,
    areaAct_Icontains: String,
    area_Gt: Float,
    area_Gte: Float,
    area_Lt: Float,
    area_Lte: Float,
    before: String,
    cadastralNumber: String,
    cadastralNumber_Icontains: String,
    comment: String,
    comment_Icontains: String,
    constructionsCount: Float,
    constructionsCount_Gt: Float,
    constructionsCount_Lt: Float,
    familyConstruction_Id: ID,
    familyConstruction_Id_Isnull: Boolean,
    familyConstruction_Title: String,
    familyConstruction_Title_Icontains: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    legalAddress_Address: String,
    legalAddress_Address_Icontains: String,
    marketingAddress_Address: String,
    marketingAddress_Address_Icontains: String,
    offset: Int,
    "Порядок"
    orderBy: String,
    postcode_District_City_Country_Title: String,
    postcode_District_City_Country_Title_Icontains: String,
    postcode_District_City_Title: String,
    postcode_District_City_Title_Icontains: String,
    postcode_District_Title: String,
    postcode_District_Title_Icontains: String,
    postcode_Title: String,
    postcode_Title_Icontains: String,
    purposeLocation_Title: String,
    purposeLocation_Title_Icontains: String,
    registrationStatusLocation_Title: String,
    registrationStatusLocation_Title_Icontains: String,
    rentContractEnd: DateTime,
    rentContractEnd_Gt: DateTime,
    rentContractEnd_Gte: DateTime,
    rentContractEnd_Lt: DateTime,
    rentContractEnd_Lte: DateTime,
    rentContractNumber: String,
    rentContractNumber_Isnull: Boolean,
    rentContractStart: DateTime,
    rentContractStart_Gt: DateTime,
    rentContractStart_Gte: DateTime,
    rentContractStart_Lt: DateTime,
    rentContractStart_Lte: DateTime,
    resolutionNumber: String,
    resolutionNumber_Icontains: String
  ): VLocationOptimizedNodeConnection!
  "Местоположения -> Маркетинговый адрес"
  locationsByMaketingAdress(
    after: String,
    area: Float,
    areaAct: String,
    areaActDate: DateTime,
    areaActDate_Gt: DateTime,
    areaActDate_Gte: DateTime,
    areaActDate_Lt: DateTime,
    areaActDate_Lte: DateTime,
    areaAct_Icontains: String,
    area_Gt: Float,
    area_Gte: Float,
    area_Lt: Float,
    area_Lte: Float,
    before: String,
    cadastralNumber: String,
    cadastralNumber_Icontains: String,
    comment: String,
    comment_Icontains: String,
    constructionsCount: Float,
    constructionsCount_Gt: Float,
    constructionsCount_Lt: Float,
    familyConstruction_Id: ID,
    familyConstruction_Id_Isnull: Boolean,
    familyConstruction_Title: String,
    familyConstruction_Title_Icontains: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    legalAddress_Address: String,
    legalAddress_Address_Icontains: String,
    marketingAddress_Address: String,
    marketingAddress_Address_Icontains: String,
    offset: Int,
    "Порядок"
    orderBy: String,
    postcode_District_City_Country_Title: String,
    postcode_District_City_Country_Title_Icontains: String,
    postcode_District_City_Title: String,
    postcode_District_City_Title_Icontains: String,
    postcode_District_Title: String,
    postcode_District_Title_Icontains: String,
    postcode_Title: String,
    postcode_Title_Icontains: String,
    purposeLocation_Title: String,
    purposeLocation_Title_Icontains: String,
    registrationStatusLocation_Title: String,
    registrationStatusLocation_Title_Icontains: String,
    rentContractEnd: DateTime,
    rentContractEnd_Gt: DateTime,
    rentContractEnd_Gte: DateTime,
    rentContractEnd_Lt: DateTime,
    rentContractEnd_Lte: DateTime,
    rentContractNumber: String,
    rentContractNumber_Isnull: Boolean,
    rentContractStart: DateTime,
    rentContractStart_Gt: DateTime,
    rentContractStart_Gte: DateTime,
    rentContractStart_Lt: DateTime,
    rentContractStart_Lte: DateTime,
    resolutionNumber: String,
    resolutionNumber_Icontains: String
  ): VLocationOptimizedNodeConnection!
  "Адреса -> Почтовый индекс"
  postcode: VPostcodeNode
}

type VAddressesNodeConnection {
  "Contains the nodes in this connection."
  edges: [VAddressesNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VAddressesNode` and its cursor."
type VAddressesNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VAddressesNode
}

"Рекламная промо-компания"
type VAdvertPromoCompanyNode implements Node {
  "Рекламная компания -> Город"
  city: VCityNode
  countOfAllDesigns: Int
  countOfArchivedDesigns: Int
  "Дизайн -> Рекламная компания"
  designs(advertPromoCompanyId: ID, advertPromoCompanyId_Isnull: Boolean, advertPromoCompany_ProjectId: ID, advertPromoCompany_ProjectId_Isnull: Boolean, after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, title: String, title_Icontains: String): VDesignNodeConnection!
  "The ID of the object."
  id: ID!
  "Рекламная компания -> Проект"
  project: VProjectNode!
  "Дата начала"
  start: DateTime
  "Название промо-компании"
  title: String
}

type VAdvertPromoCompanyNodeConnection {
  "Contains the nodes in this connection."
  edges: [VAdvertPromoCompanyNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VAdvertPromoCompanyNode` and its cursor."
type VAdvertPromoCompanyNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VAdvertPromoCompanyNode
}

"Рекламная промо-компания"
type VAdvertPromoCompanyOptimizedNode implements Node {
  "Рекламная компания -> Город"
  city: VCityNode
  countOfAllDesigns: Int
  countOfArchivedDesigns: Int
  "Дизайн -> Рекламная компания"
  designs(advertPromoCompanyId: ID, advertPromoCompanyId_Isnull: Boolean, advertPromoCompany_ProjectId: ID, advertPromoCompany_ProjectId_Isnull: Boolean, after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, title: String, title_Icontains: String): VDesignNodeConnection!
  "The ID of the object."
  id: ID!
  "Рекламная компания -> Проект"
  project: VProjectNode!
  "Дата начала"
  start: DateTime
  "Название промо-компании"
  title: String
}

type VAdvertPromoCompanyOptimizedNodeConnection {
  "Contains the nodes in this connection."
  edges: [VAdvertPromoCompanyOptimizedNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VAdvertPromoCompanyOptimizedNode` and its cursor."
type VAdvertPromoCompanyOptimizedNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VAdvertPromoCompanyOptimizedNode
}

"Рекламная сторона"
type VAdvertisingSideNode implements Node {
  "Буквенный код рекламной стороны"
  code: String
  "Стророны конструкции -> Рекламная сторона"
  constructionSides(advertisingSide_Code: String, advertisingSide_Code_Isnull: Boolean, advertisingSide_Side_Code: String, advertisingSide_Side_Code_Isnull: Boolean, advertisingSide_Side_Format_Code: String, advertisingSide_Side_Format_Code_Isnull: Boolean, advertisingSide_Side_Format_Model_Title: String, advertisingSide_Side_Format_Model_Title_Icontains: String, advertisingSide_Side_Format_Model_Underfamily_Family_Id: ID, advertisingSide_Side_Format_Model_Underfamily_Family_Id_Isnull: Boolean, advertisingSide_Side_Format_Model_Underfamily_Family_Title: String, advertisingSide_Side_Format_Model_Underfamily_Family_Title_Icontains: String, advertisingSide_Side_Format_Model_Underfamily_Title: String, advertisingSide_Side_Format_Model_Underfamily_Title_Icontains: String, advertisingSide_Side_Format_Title: String, advertisingSide_Side_Format_Title_Icontains: String, advertisingSide_Side_Size: String, advertisingSide_Side_Size_Icontains: String, advertisingSide_Side_Title: String, advertisingSide_Side_Title_Icontains: String, after: String, before: String, constructionId: ID, constructionId_Isnull: Boolean, construction_Location_LegalAddress_Address: String, construction_Location_LegalAddress_Address_Icontains: String, construction_Location_MarketingAddress_Address: String, construction_Location_MarketingAddress_Address_Icontains: String, construction_Location_Postcode_District_City_Id: ID, construction_Location_Postcode_District_City_Id_Isnull: Boolean, construction_Location_Postcode_District_City_Title: String, construction_Location_Postcode_District_City_Title_Icontains: String, construction_Location_Postcode_District_Id: ID, construction_Location_Postcode_District_Id_Isnull: Boolean, construction_Location_Postcode_District_Title: String, construction_Location_Postcode_District_Title_Icontains: String, construction_Location_Postcode_Title: String, construction_Location_Postcode_Title_Isnull: Boolean, construction_NonrtsOwner_Id: ID, construction_NonrtsOwner_Id_Isnull: Boolean, construction_NonrtsOwner_Title: String, construction_NonrtsOwner_Title_Icontains: String, construction_NumInDistrict: Int, construction_NumInDistrict_Gt: Int, construction_NumInDistrict_Gte: Int, construction_NumInDistrict_Lt: Int, construction_NumInDistrict_Lte: Int, construction_StatusConnection: Boolean, construction_StatusConnection_Isnull: Boolean, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, reservation_DateFrom: DateTime, reservation_DateFrom_Gt: DateTime, reservation_DateFrom_Gte: DateTime, reservation_DateFrom_Lt: DateTime, reservation_DateFrom_Lte: DateTime, reservation_DateTo: DateTime, reservation_DateTo_Gt: DateTime, reservation_DateTo_Gte: DateTime, reservation_DateTo_Lt: DateTime, reservation_DateTo_Lte: DateTime, reservation_ReservationType_Title: String, reservation_ReservationType_Title_Icontains: String, reservation_ReservationType_Title_Iregex: String, reservation_ReservationType_Title_Regex: String): VConstructionSideOptimizedNodeConnection!
  "The ID of the object."
  id: ID!
  "Рекламные стороны -> Сторона"
  side: VSideNode!
  "Наименование рекламной стороны"
  title: String
}

type VAdvertisingSideNodeConnection {
  "Contains the nodes in this connection."
  edges: [VAdvertisingSideNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VAdvertisingSideNode` and its cursor."
type VAdvertisingSideNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VAdvertisingSideNode
}

"Агентская комиссия"
type VAgencyCommissionNode implements Node {
  "Дополнительные расходы -> Агентская комиссия"
  additionalCosts(after: String, appendix: [ID], appendix_Code: String, appendix_Code_Icontains: String, appendix_Isnull: Boolean, before: String, city_Title: String, city_Title_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, projectId: ID, projectId_Isnull: Boolean, project_Code: String, project_Code_Icontains: String): VAdditionalCostsNodeConnection!
  "Агент для перечисления агентской коммиссии"
  agent: VPartnerOptimizedNode
  "Дополнительные расходы НОН РТС -> Агентская комиссия"
  estimateNonRts(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VEstimateNonRtsNodeConnection!
  "The ID of the object."
  id: ID!
  "Контрагенты -> Агентская комиссия"
  partners(
    advertisers_Id: ID,
    advertisers_Id_Isnull: Boolean,
    advertisers_Title: String,
    advertisers_Title_Icontains: String,
    after: String,
    before: String,
    binNumber: String,
    binNumber_Icontains: String,
    brands_Title: String,
    brands_Title_Icontains: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    isNonrtsOwner: Boolean,
    isNonrtsOwner_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partnerType_Title: String,
    partnerType_Title_Icontains: String,
    title: String,
    title_Icontains: String,
    workingSectors_Title: String,
    workingSectors_Title_Icontains: String
  ): VPartnerOptimizedNodeConnection!
  "Процент агентской комисии"
  percent: Decimal
  "Проекты -> Агентская комиссия"
  projects(after: String, backOfficeManager_Email: String, backOfficeManager_Email_Icontains: String, backOfficeManager_FirstName: String, backOfficeManager_FirstName_Icontains: String, backOfficeManager_Id: ID, backOfficeManager_Id_Isnull: Boolean, backOfficeManager_LastName: String, backOfficeManager_LastName_Icontains: String, backOfficeManager_Name: String, backOfficeManager_Name_Icontains: String, backOfficeManager_Phone: String, backOfficeManager_Phone_Icontains: String, before: String, brand_Id: ID, brand_Id_Isnull: Boolean, brand_Title: String, brand_Title_Icontains: String, client_Id: ID, client_Id_Isnull: Boolean, client_PartnerType_Id: ID, client_PartnerType_Id_Isnull: Boolean, client_PartnerType_Title: String, client_PartnerType_Title_Icontains: String, client_Title: String, client_Title_Icontains: String, client_WorkingSectors_Description: String, client_WorkingSectors_Description_Icontains: String, client_WorkingSectors_Id: ID, client_WorkingSectors_Id_Isnull: Boolean, client_WorkingSectors_Title: String, client_WorkingSectors_Title_Icontains: String, code: String, code_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, numInYear: Int, numInYear_Isnull: Boolean, offset: Int, salesManager_Email: String, salesManager_Email_Icontains: String, salesManager_FirstName: String, salesManager_FirstName_Icontains: String, salesManager_Id: ID, salesManager_Id_Isnull: Boolean, salesManager_LastName: String, salesManager_LastName_Icontains: String, salesManager_Name: String, salesManager_Name_Icontains: String, salesManager_Phone: String, salesManager_Phone_Icontains: String, startDate: DateTime, startDate_Gt: DateTime, startDate_Gte: DateTime, startDate_Lt: DateTime, startDate_Lte: DateTime, title: String, title_Icontains: String): VProjectNodeConnection!
  "Бронирование -> Агентская комиссия"
  reservations(
    after: String,
    appendix_Id: ID,
    appendix_Id_Isnull: Boolean,
    before: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Id: ID,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Id_Isnull: Boolean,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Format_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Size: String,
    constructionSide_AdvertisingSide_Side_Size_Icontains: String,
    constructionSide_AdvertisingSide_Side_Title: String,
    constructionSide_AdvertisingSide_Side_Title_Icontains: String,
    constructionSide_Construction_Location_Postcode_District_City_Id: ID,
    constructionSide_Construction_Location_Postcode_District_City_Id_Isnull: Boolean,
    constructionSide_Construction_Location_Postcode_District_City_Title: String,
    constructionSide_Construction_Location_Postcode_District_City_Title_Icontains: String,
    constructionSide_Construction_Location_Postcode_District_Id: ID,
    constructionSide_Construction_Location_Postcode_District_Id_Isnull: Boolean,
    constructionSide_Construction_Location_Postcode_District_Title: String,
    constructionSide_Construction_Location_Postcode_District_Title_Icontains: String,
    constructionSide_Construction_StatusConnection: Boolean,
    constructionSide_Construction_StatusConnection_Isnull: Boolean,
    dateFrom: DateTime,
    dateFrom_Gt: DateTime,
    dateFrom_Gte: DateTime,
    dateFrom_Lt: DateTime,
    dateFrom_Lte: DateTime,
    dateTo: DateTime,
    dateTo_Gt: DateTime,
    dateTo_Gte: DateTime,
    dateTo_Lt: DateTime,
    dateTo_Lte: DateTime,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    projectId: ID,
    projectId_Isnull: Boolean,
    reservationType_Title: String,
    reservationType_Title_Icontains: String,
    reservationType_Title_Iregex: String,
    reservationType_Title_Regex: String
  ): VReservationOptimizedNodeConnection!
  "Агентская комиссия распространяется на доп. расходы"
  toAdditional: Boolean!
  "Агентская комиссия распространяется на монтаж"
  toMount: Boolean!
  "Агентская комиссия распространяется на налог"
  toNalog: Boolean!
  "Агентская комиссия распространяется на маржу НОН РТС"
  toNonrts: Boolean!
  "Агентская комиссия распространяется на печать"
  toPrint: Boolean!
  "Агентская комиссия распространяется на аренду"
  toRent: Boolean!
  "Сумма агентской комиссии"
  value: Decimal
}

type VAgencyCommissionNodeConnection {
  "Contains the nodes in this connection."
  edges: [VAgencyCommissionNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VAgencyCommissionNode` and its cursor."
type VAgencyCommissionNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VAgencyCommissionNode
}

"Приложение к договору"
type VAppendixNode implements Node {
  "Дополнительные расходы НОН РТС -> Приложение"
  additionalCosts(after: String, appendix: [ID], appendix_Code: String, appendix_Code_Icontains: String, appendix_Isnull: Boolean, before: String, city_Title: String, city_Title_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, projectId: ID, projectId_Isnull: Boolean, project_Code: String, project_Code_Icontains: String): VAdditionalCostsNodeConnection!
  "Дополнительные расходы НОН РТС -> Приложение"
  additionalCostsNonrts(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VEstimateNonRtsNodeConnection!
  "Скан доп. соглашения"
  additionallyAgreement: String
  "Номер приложения"
  code: String
  "Приложения к договору -> Договор"
  contract: VContractOptimizedNode
  "Дата создания приложения"
  createdDate: DateTime
  "Приложения к договору -> Создатель (кто внес данные)"
  creator: VCustomUserNode
  "The ID of the object."
  id: ID!
  "Счета -> Приложение к договору"
  invoices(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VInvoiceNodeConnection!
  "В архиве"
  isArchive: Boolean!
  "Номер приложения в месяце"
  numInMonth: Int
  "Бронирования пакетов -> Приложение к договору"
  packagesReservations(after: String, before: String, dateFrom: DateTime, dateFrom_Gt: DateTime, dateFrom_Gte: DateTime, dateFrom_Lt: DateTime, dateFrom_Lte: DateTime, dateTo: DateTime, dateTo_Gt: DateTime, dateTo_Gte: DateTime, dateTo_Lt: DateTime, dateTo_Lte: DateTime, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VReservationPackageNodeConnection!
  "Срок оплаты"
  paymentDate: DateTime
  "Период приложения - дата окончания размещения"
  periodEndDate: DateTime
  "Период приложения - дата начала размещения"
  periodStartDate: DateTime
  "Приложения к договору -> Проект"
  project: VProjectNode
  "Бронирование <-> Приложение к договору"
  reservations(
    after: String,
    appendix_Id: ID,
    appendix_Id_Isnull: Boolean,
    before: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Id: ID,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Id_Isnull: Boolean,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Format_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Size: String,
    constructionSide_AdvertisingSide_Side_Size_Icontains: String,
    constructionSide_AdvertisingSide_Side_Title: String,
    constructionSide_AdvertisingSide_Side_Title_Icontains: String,
    constructionSide_Construction_Location_Postcode_District_City_Id: ID,
    constructionSide_Construction_Location_Postcode_District_City_Id_Isnull: Boolean,
    constructionSide_Construction_Location_Postcode_District_City_Title: String,
    constructionSide_Construction_Location_Postcode_District_City_Title_Icontains: String,
    constructionSide_Construction_Location_Postcode_District_Id: ID,
    constructionSide_Construction_Location_Postcode_District_Id_Isnull: Boolean,
    constructionSide_Construction_Location_Postcode_District_Title: String,
    constructionSide_Construction_Location_Postcode_District_Title_Icontains: String,
    constructionSide_Construction_StatusConnection: Boolean,
    constructionSide_Construction_StatusConnection_Isnull: Boolean,
    dateFrom: DateTime,
    dateFrom_Gt: DateTime,
    dateFrom_Gte: DateTime,
    dateFrom_Lt: DateTime,
    dateFrom_Lte: DateTime,
    dateTo: DateTime,
    dateTo_Gt: DateTime,
    dateTo_Gte: DateTime,
    dateTo_Lt: DateTime,
    dateTo_Lte: DateTime,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    projectId: ID,
    projectId_Isnull: Boolean,
    reservationType_Title: String,
    reservationType_Title_Icontains: String,
    reservationType_Title_Iregex: String,
    reservationType_Title_Regex: String
  ): VReservationOptimizedNodeConnection!
  "Статус возврата"
  returnStatus: Boolean!
  "Приложения к договору -> Менеджер по продажам"
  salesManager: VCustomUserNode
  "Подписант в именительном падеже"
  signatoryOne: String
  "Должность подписанта"
  signatoryPosition: String
  "Подписант в родительном падеже"
  signatoryTwo: String
  "Дата обновления"
  updatedAt: DateTime
}

type VAppendixNodeConnection {
  "Contains the nodes in this connection."
  edges: [VAppendixNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VAppendixNode` and its cursor."
type VAppendixNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VAppendixNode
}

"Приложение к договору"
type VAppendixOptimizedNode implements Node {
  "Дополнительные расходы НОН РТС -> Приложение"
  additionalCosts(after: String, appendix: [ID], appendix_Code: String, appendix_Code_Icontains: String, appendix_Isnull: Boolean, before: String, city_Title: String, city_Title_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, projectId: ID, projectId_Isnull: Boolean, project_Code: String, project_Code_Icontains: String): VAdditionalCostsNodeConnection!
  "Дополнительные расходы НОН РТС -> Приложение"
  additionalCostsNonrts(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VEstimateNonRtsNodeConnection!
  "Скан доп. соглашения"
  additionallyAgreement: String
  "Номер приложения"
  code: String
  "Приложения к договору -> Договор"
  contract: VContractOptimizedNode
  "Дата создания приложения"
  createdDate: DateTime
  "Приложения к договору -> Создатель (кто внес данные)"
  creator: VCustomUserNode
  "The ID of the object."
  id: ID!
  "Счета -> Приложение к договору"
  invoices(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VInvoiceNodeConnection!
  "В архиве"
  isArchive: Boolean!
  "Номер приложения в месяце"
  numInMonth: Int
  "Бронирования пакетов -> Приложение к договору"
  packagesReservations(after: String, before: String, dateFrom: DateTime, dateFrom_Gt: DateTime, dateFrom_Gte: DateTime, dateFrom_Lt: DateTime, dateFrom_Lte: DateTime, dateTo: DateTime, dateTo_Gt: DateTime, dateTo_Gte: DateTime, dateTo_Lt: DateTime, dateTo_Lte: DateTime, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VReservationPackageNodeConnection!
  "Срок оплаты"
  paymentDate: DateTime
  "Период приложения - дата окончания размещения"
  periodEndDate: DateTime
  "Период приложения - дата начала размещения"
  periodStartDate: DateTime
  "Приложения к договору -> Проект"
  project: VProjectNode
  "Бронирование <-> Приложение к договору"
  reservations(
    after: String,
    appendix_Id: ID,
    appendix_Id_Isnull: Boolean,
    before: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Id: ID,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Id_Isnull: Boolean,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Format_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Size: String,
    constructionSide_AdvertisingSide_Side_Size_Icontains: String,
    constructionSide_AdvertisingSide_Side_Title: String,
    constructionSide_AdvertisingSide_Side_Title_Icontains: String,
    constructionSide_Construction_Location_Postcode_District_City_Id: ID,
    constructionSide_Construction_Location_Postcode_District_City_Id_Isnull: Boolean,
    constructionSide_Construction_Location_Postcode_District_City_Title: String,
    constructionSide_Construction_Location_Postcode_District_City_Title_Icontains: String,
    constructionSide_Construction_Location_Postcode_District_Id: ID,
    constructionSide_Construction_Location_Postcode_District_Id_Isnull: Boolean,
    constructionSide_Construction_Location_Postcode_District_Title: String,
    constructionSide_Construction_Location_Postcode_District_Title_Icontains: String,
    constructionSide_Construction_StatusConnection: Boolean,
    constructionSide_Construction_StatusConnection_Isnull: Boolean,
    dateFrom: DateTime,
    dateFrom_Gt: DateTime,
    dateFrom_Gte: DateTime,
    dateFrom_Lt: DateTime,
    dateFrom_Lte: DateTime,
    dateTo: DateTime,
    dateTo_Gt: DateTime,
    dateTo_Gte: DateTime,
    dateTo_Lt: DateTime,
    dateTo_Lte: DateTime,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    projectId: ID,
    projectId_Isnull: Boolean,
    reservationType_Title: String,
    reservationType_Title_Icontains: String,
    reservationType_Title_Iregex: String,
    reservationType_Title_Regex: String
  ): VReservationOptimizedNodeConnection!
  "Статус возврата"
  returnStatus: Boolean!
  "Приложения к договору -> Менеджер по продажам"
  salesManager: VCustomUserNode
  "Подписант в именительном падеже"
  signatoryOne: String
  "Должность подписанта"
  signatoryPosition: String
  "Подписант в родительном падеже"
  signatoryTwo: String
  "Дата обновления"
  updatedAt: DateTime
}

type VAppendixOptimizedNodeConnection {
  "Contains the nodes in this connection."
  edges: [VAppendixOptimizedNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VAppendixOptimizedNode` and its cursor."
type VAppendixOptimizedNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VAppendixOptimizedNode
}

"Изображение бренда"
type VBrandImageNode implements Node {
  active: Boolean!
  "Бренд"
  brand: VBrandOptimizedNode
  "The ID of the object."
  id: ID!
  "Изображение"
  img: String
}

type VBrandImageNodeConnection {
  "Contains the nodes in this connection."
  edges: [VBrandImageNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VBrandImageNode` and its cursor."
type VBrandImageNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VBrandImageNode
}

"Бренд"
type VBrandNode implements Node {
  "Бренд"
  brandImages(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VBrandImageNodeConnection!
  "Код"
  code: String
  "Дата создания"
  createdAt: DateTime
  "Связанные дизайны"
  designs(advertPromoCompanyId: ID, advertPromoCompanyId_Isnull: Boolean, advertPromoCompany_ProjectId: ID, advertPromoCompany_ProjectId_Isnull: Boolean, after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, title: String, title_Icontains: String): VDesignNodeConnection!
  "The ID of the object."
  id: ID!
  "Контрагенты <-> Связанные бренды"
  partners(
    advertisers_Id: ID,
    advertisers_Id_Isnull: Boolean,
    advertisers_Title: String,
    advertisers_Title_Icontains: String,
    after: String,
    before: String,
    binNumber: String,
    binNumber_Icontains: String,
    brands_Title: String,
    brands_Title_Icontains: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    isNonrtsOwner: Boolean,
    isNonrtsOwner_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partnerType_Title: String,
    partnerType_Title_Icontains: String,
    title: String,
    title_Icontains: String,
    workingSectors_Title: String,
    workingSectors_Title_Icontains: String
  ): VPartnerOptimizedNodeConnection!
  partnersList: String
  "Бренд"
  projects(after: String, backOfficeManager_Email: String, backOfficeManager_Email_Icontains: String, backOfficeManager_FirstName: String, backOfficeManager_FirstName_Icontains: String, backOfficeManager_Id: ID, backOfficeManager_Id_Isnull: Boolean, backOfficeManager_LastName: String, backOfficeManager_LastName_Icontains: String, backOfficeManager_Name: String, backOfficeManager_Name_Icontains: String, backOfficeManager_Phone: String, backOfficeManager_Phone_Icontains: String, before: String, brand_Id: ID, brand_Id_Isnull: Boolean, brand_Title: String, brand_Title_Icontains: String, client_Id: ID, client_Id_Isnull: Boolean, client_PartnerType_Id: ID, client_PartnerType_Id_Isnull: Boolean, client_PartnerType_Title: String, client_PartnerType_Title_Icontains: String, client_Title: String, client_Title_Icontains: String, client_WorkingSectors_Description: String, client_WorkingSectors_Description_Icontains: String, client_WorkingSectors_Id: ID, client_WorkingSectors_Id_Isnull: Boolean, client_WorkingSectors_Title: String, client_WorkingSectors_Title_Icontains: String, code: String, code_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, numInYear: Int, numInYear_Isnull: Boolean, offset: Int, salesManager_Email: String, salesManager_Email_Icontains: String, salesManager_FirstName: String, salesManager_FirstName_Icontains: String, salesManager_Id: ID, salesManager_Id_Isnull: Boolean, salesManager_LastName: String, salesManager_LastName_Icontains: String, salesManager_Name: String, salesManager_Name_Icontains: String, salesManager_Phone: String, salesManager_Phone_Icontains: String, startDate: DateTime, startDate_Gt: DateTime, startDate_Gte: DateTime, startDate_Lt: DateTime, startDate_Lte: DateTime, title: String, title_Icontains: String): VProjectNodeConnection!
  "Наименование"
  title: String
  "Дата обновления"
  updatedAt: DateTime
  "Сектор деятельности контрагента"
  workingSector: VWorkingSectorNode
}

type VBrandNodeConnection {
  "Contains the nodes in this connection."
  edges: [VBrandNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VBrandNode` and its cursor."
type VBrandNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VBrandNode
}

"Бренд"
type VBrandOptimizedNode implements Node {
  "Бренд"
  brandImages(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VBrandImageNodeConnection!
  "Код"
  code: String
  "Дата создания"
  createdAt: DateTime
  "Связанные дизайны"
  designs(advertPromoCompanyId: ID, advertPromoCompanyId_Isnull: Boolean, advertPromoCompany_ProjectId: ID, advertPromoCompany_ProjectId_Isnull: Boolean, after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, title: String, title_Icontains: String): VDesignNodeConnection!
  "The ID of the object."
  id: ID!
  "Контрагенты <-> Связанные бренды"
  partners(
    advertisers_Id: ID,
    advertisers_Id_Isnull: Boolean,
    advertisers_Title: String,
    advertisers_Title_Icontains: String,
    after: String,
    before: String,
    binNumber: String,
    binNumber_Icontains: String,
    brands_Title: String,
    brands_Title_Icontains: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    isNonrtsOwner: Boolean,
    isNonrtsOwner_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partnerType_Title: String,
    partnerType_Title_Icontains: String,
    title: String,
    title_Icontains: String,
    workingSectors_Title: String,
    workingSectors_Title_Icontains: String
  ): VPartnerOptimizedNodeConnection!
  partnersList: String
  "Бренд"
  projects(after: String, backOfficeManager_Email: String, backOfficeManager_Email_Icontains: String, backOfficeManager_FirstName: String, backOfficeManager_FirstName_Icontains: String, backOfficeManager_Id: ID, backOfficeManager_Id_Isnull: Boolean, backOfficeManager_LastName: String, backOfficeManager_LastName_Icontains: String, backOfficeManager_Name: String, backOfficeManager_Name_Icontains: String, backOfficeManager_Phone: String, backOfficeManager_Phone_Icontains: String, before: String, brand_Id: ID, brand_Id_Isnull: Boolean, brand_Title: String, brand_Title_Icontains: String, client_Id: ID, client_Id_Isnull: Boolean, client_PartnerType_Id: ID, client_PartnerType_Id_Isnull: Boolean, client_PartnerType_Title: String, client_PartnerType_Title_Icontains: String, client_Title: String, client_Title_Icontains: String, client_WorkingSectors_Description: String, client_WorkingSectors_Description_Icontains: String, client_WorkingSectors_Id: ID, client_WorkingSectors_Id_Isnull: Boolean, client_WorkingSectors_Title: String, client_WorkingSectors_Title_Icontains: String, code: String, code_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, numInYear: Int, numInYear_Isnull: Boolean, offset: Int, salesManager_Email: String, salesManager_Email_Icontains: String, salesManager_FirstName: String, salesManager_FirstName_Icontains: String, salesManager_Id: ID, salesManager_Id_Isnull: Boolean, salesManager_LastName: String, salesManager_LastName_Icontains: String, salesManager_Name: String, salesManager_Name_Icontains: String, salesManager_Phone: String, salesManager_Phone_Icontains: String, startDate: DateTime, startDate_Gt: DateTime, startDate_Gte: DateTime, startDate_Lt: DateTime, startDate_Lte: DateTime, title: String, title_Icontains: String): VProjectNodeConnection!
  "Наименование"
  title: String
  "Дата обновления"
  updatedAt: DateTime
  "Сектор деятельности контрагента"
  workingSector: VWorkingSectorNode
}

type VBrandOptimizedNodeConnection {
  "Contains the nodes in this connection."
  edges: [VBrandOptimizedNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VBrandOptimizedNode` and its cursor."
type VBrandOptimizedNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VBrandOptimizedNode
}

"Логи баз данных"
type VChangeLogNode implements Node {
  actionOnModel: ChangeLogActionOnModel
  changed: DateTime!
  data: String
  "The ID of the object."
  id: ID!
  ipaddress: String
  model: String
  recordId: Int
  user: VCustomUserNode
}

type VChangeLogNodeConnection {
  "Contains the nodes in this connection."
  edges: [VChangeLogNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VChangeLogNode` and its cursor."
type VChangeLogNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VChangeLogNode
}

"Город"
type VCityNode implements Node {
  "Дополнительные расходы НОН РТС -> Город"
  additionalCostsNonrts(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VEstimateNonRtsNodeConnection!
  "Рекламная компания -> Город"
  advertPromoCompanies(
    after: String,
    before: String,
    designs_Archived: Boolean,
    designs_Archived_Isnull: Boolean,
    designs_IsCurrent: Boolean,
    designs_IsCurrent_Isnull: Boolean,
    designs_StartedAt: DateTime,
    designs_StartedAt_Gt: DateTime,
    designs_StartedAt_Gte: DateTime,
    designs_StartedAt_Lt: DateTime,
    designs_StartedAt_Lte: DateTime,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    projectId: ID,
    projectId_Isnull: Boolean,
    project_BrandId: ID,
    project_BrandId_Isnull: Boolean,
    project_Brand_Title: String,
    project_Brand_Title_Icontains: String,
    project_ClientId: ID,
    project_ClientId_Isnull: Boolean,
    project_Client_Title: String,
    project_Client_Title_Icontains: String,
    project_ProjectCities_CityId: ID,
    project_ProjectCities_CityId_Isnull: Boolean,
    project_ProjectCities_City_Title: String,
    project_ProjectCities_City_Title_Icontains: String,
    project_ProjectCities_Count: Int,
    project_ProjectCities_Count_Gt: Int,
    project_ProjectCities_Count_Gte: Int,
    project_ProjectCities_Count_Lt: Int,
    project_ProjectCities_Count_Lte: Int,
    project_ProjectCities_DistributedCount: Int,
    project_ProjectCities_DistributedCount_Gt: Int,
    project_ProjectCities_DistributedCount_Gte: Int,
    project_ProjectCities_DistributedCount_Lt: Int,
    project_ProjectCities_DistributedCount_Lte: Int,
    project_ProjectCities_SaledCount: Int,
    project_ProjectCities_SaledCount_Gt: Int,
    project_ProjectCities_SaledCount_Gte: Int,
    project_ProjectCities_SaledCount_Lt: Int,
    project_ProjectCities_SaledCount_Lte: Int
  ): VAdvertPromoCompanyOptimizedNodeConnection!
  "Города -> Страна"
  country: VCountryNode!
  "Экипажи -> Город"
  crews(
    after: String,
    before: String,
    city_Title: String,
    city_Title_Icontains: String,
    constructions_Location_MarketingAddress_Address: String,
    constructions_Location_MarketingAddress_Address_Icontains: String,
    constructions_Location_Postcode_District_City_Title: String,
    constructions_Location_Postcode_District_City_Title_Icontains: String,
    constructions_Location_Postcode_District_Title: String,
    constructions_Location_Postcode_District_Title_Icontains: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    name: String,
    name_Icontains: String,
    offset: Int,
    "Порядок"
    orderBy: String,
    phone: String,
    phone_Icontains: String
  ): VCrewOptimizedNodeConnection!
  "Районы -> Город"
  districts(after: String, before: String, city_Id: ID, city_Id_Isnull: Boolean, city_Title: String, city_Title_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, title: String, title_Icontains: String): VDistrictNodeConnection!
  "The ID of the object."
  id: ID!
  "Пакет -> Город"
  packages: [PackageType!]!
  "Прайсовая стоимость -> Город"
  placementPrices(after: String, before: String, city: ID, city_Isnull: Boolean, first: Int, format: ID, format_Isnull: Boolean, id: ID, id_Isnull: Boolean, last: Int, offset: Int, period: Int, period_Isnull: Boolean): VPlacementPriceNodeConnection!
  "Дополнительные расходы -> Город"
  salesAdditionalCosts(after: String, appendix: [ID], appendix_Code: String, appendix_Code_Icontains: String, appendix_Isnull: Boolean, before: String, city_Title: String, city_Title_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, projectId: ID, projectId_Isnull: Boolean, project_Code: String, project_Code_Icontains: String): VAdditionalCostsNodeConnection!
  "Проекты -> Менеджер по продажам"
  salesManagerOfProjects(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VProjectCitiesNodeConnection!
  "Статические, конфигурационные доп. расходы -> Город"
  staticAdditionalCosts(after: String, before: String, category: String, category_Isnull: Boolean, city: ID, city_Isnull: Boolean, first: Int, format: ID, format_Isnull: Boolean, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VStaticAdditionalCostsNodeConnection!
  "Название"
  title: String
}

type VCityNodeConnection {
  "Contains the nodes in this connection."
  edges: [VCityNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VCityNode` and its cursor."
type VCityNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VCityNode
}

"Тип клиента"
type VClientTypeNode implements Node {
  "Описание"
  description: String!
  "The ID of the object."
  id: ID!
  "Контрагенты -> Тип клиента"
  partners(
    advertisers_Id: ID,
    advertisers_Id_Isnull: Boolean,
    advertisers_Title: String,
    advertisers_Title_Icontains: String,
    after: String,
    before: String,
    binNumber: String,
    binNumber_Icontains: String,
    brands_Title: String,
    brands_Title_Icontains: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    isNonrtsOwner: Boolean,
    isNonrtsOwner_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partnerType_Title: String,
    partnerType_Title_Icontains: String,
    title: String,
    title_Icontains: String,
    workingSectors_Title: String,
    workingSectors_Title_Icontains: String
  ): VPartnerOptimizedNodeConnection!
  "Название"
  title: String!
}

type VClientTypeNodeConnection {
  "Contains the nodes in this connection."
  edges: [VClientTypeNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VClientTypeNode` and its cursor."
type VClientTypeNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VClientTypeNode
}

"Множественные форматы конструкций"
type VConstructionFormatsNode implements Node {
  "Коды форматов конструкций -> Конструкция"
  construction: VConstructionOptimizedNode
  "Количество сторон с заданным форматом в конструкции"
  count: Int!
  "Коды форматов конструкций -> Форматы"
  format: VFormatNode
  "The ID of the object."
  id: ID!
}

type VConstructionFormatsNodeConnection {
  "Contains the nodes in this connection."
  edges: [VConstructionFormatsNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VConstructionFormatsNode` and its cursor."
type VConstructionFormatsNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VConstructionFormatsNode
}

"Конструкция"
type VConstructionNode implements Node {
  "Активная или демонтировананя"
  active: Boolean!
  "Комментарий"
  backComment: String
  "Инвентарный номер - 1C"
  buhInventNumber: String
  constructionHistorySet(after: String, before: String, first: Int, last: Int, offset: Int, targetId: ID, targetId_Isnull: Boolean): Vconstruction_historyOptimizedNodeConnection!
  "Конструкция"
  constructionnotificationSet(
    after: String,
    before: String,
    first: Int,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    user_Id: ID,
    user_Id_Isnull: Boolean
  ): VConstructionNotificationOptimizedNodeConnection!
  "Координаты"
  coordinates: String
  "Дата создания"
  createdAt: DateTime
  "Дата создания"
  creationDate: DateTime
  "Конструкции -> Экипаж"
  crew: VCrewOptimizedNode
  "Сторонам конструкции присвоены специализированные экипажи"
  crewsHasSpecialForSides: Boolean
  "Коды форматов конструкций -> Конструкция"
  formats(after: String, before: String, count: Int, count_Gt: Int, count_Gte: Int, count_Lt: Int, count_Lte: Int, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VConstructionFormatsNodeConnection!
  formatsCodesList: String
  formatsCount: Int
  formatsList: String
  "The ID of the object."
  id: ID!
  "В архиве"
  isArchive: Boolean!
  "Конструкция НОН РТС"
  isNonrts: Boolean!
  "Местоположения -> Юридический адрес"
  legalAddress: VAddressesNode
  "Конструкции -> Местоположение"
  location: VLocationOptimizedNode
  "Местоположения -> Маркетинговый адрес"
  marketingAddress: VAddressesNode
  "Конструкции -> Модель конструкции"
  model: VModelConstructionNode
  "Монтажи -> конструкци"
  mountings(after: String, before: String, crew_Name: String, crew_Name_Icontains: String, endMounting: DateTime, endMounting_Gt: DateTime, endMounting_Gte: DateTime, endMounting_Lt: DateTime, endMounting_Lte: DateTime, first: Int, id: ID, id_Isnull: Boolean, last: Int, mountingDone: Boolean, mountingDone_Isnull: Boolean, mountingTask_Title: String, mountingTask_Title_Icontains: String, offset: Int, reservation_ConstructionSide_Construction_Location_LegalAddress_Address_Isnull: Boolean, reservation_ConstructionSide_Construction_Location_MarketingAddress_Address_Isnull: Boolean, startMounting: DateTime, startMounting_Gt: DateTime, startMounting_Gte: DateTime, startMounting_Lt: DateTime, startMounting_Lte: DateTime, unmountingDone: Boolean, unmountingDone_Isnull: Boolean): VMountingNodeConnection!
  "Конструкции -> Владелец НОН РТС"
  nonrtsOwner: VPartnerOptimizedNode
  "Коментарий о владельце НОН РТС"
  nonrtsOwnerComment: String
  "Порядковый номер конструкции в районе"
  numInDistrict: Int
  "Конструкции -> Помеха"
  obstruction: VObstructionNode
  "Стророны конструкции -> Конструкция"
  ownedSides(advertisingSide_Code: String, advertisingSide_Code_Isnull: Boolean, advertisingSide_Side_Code: String, advertisingSide_Side_Code_Isnull: Boolean, advertisingSide_Side_Format_Code: String, advertisingSide_Side_Format_Code_Isnull: Boolean, advertisingSide_Side_Format_Model_Title: String, advertisingSide_Side_Format_Model_Title_Icontains: String, advertisingSide_Side_Format_Model_Underfamily_Family_Id: ID, advertisingSide_Side_Format_Model_Underfamily_Family_Id_Isnull: Boolean, advertisingSide_Side_Format_Model_Underfamily_Family_Title: String, advertisingSide_Side_Format_Model_Underfamily_Family_Title_Icontains: String, advertisingSide_Side_Format_Model_Underfamily_Title: String, advertisingSide_Side_Format_Model_Underfamily_Title_Icontains: String, advertisingSide_Side_Format_Title: String, advertisingSide_Side_Format_Title_Icontains: String, advertisingSide_Side_Size: String, advertisingSide_Side_Size_Icontains: String, advertisingSide_Side_Title: String, advertisingSide_Side_Title_Icontains: String, after: String, before: String, constructionId: ID, constructionId_Isnull: Boolean, construction_Location_LegalAddress_Address: String, construction_Location_LegalAddress_Address_Icontains: String, construction_Location_MarketingAddress_Address: String, construction_Location_MarketingAddress_Address_Icontains: String, construction_Location_Postcode_District_City_Id: ID, construction_Location_Postcode_District_City_Id_Isnull: Boolean, construction_Location_Postcode_District_City_Title: String, construction_Location_Postcode_District_City_Title_Icontains: String, construction_Location_Postcode_District_Id: ID, construction_Location_Postcode_District_Id_Isnull: Boolean, construction_Location_Postcode_District_Title: String, construction_Location_Postcode_District_Title_Icontains: String, construction_Location_Postcode_Title: String, construction_Location_Postcode_Title_Isnull: Boolean, construction_NonrtsOwner_Id: ID, construction_NonrtsOwner_Id_Isnull: Boolean, construction_NonrtsOwner_Title: String, construction_NonrtsOwner_Title_Icontains: String, construction_NumInDistrict: Int, construction_NumInDistrict_Gt: Int, construction_NumInDistrict_Gte: Int, construction_NumInDistrict_Lt: Int, construction_NumInDistrict_Lte: Int, construction_StatusConnection: Boolean, construction_StatusConnection_Isnull: Boolean, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, reservation_DateFrom: DateTime, reservation_DateFrom_Gt: DateTime, reservation_DateFrom_Gte: DateTime, reservation_DateFrom_Lt: DateTime, reservation_DateFrom_Lte: DateTime, reservation_DateTo: DateTime, reservation_DateTo_Gt: DateTime, reservation_DateTo_Gte: DateTime, reservation_DateTo_Lt: DateTime, reservation_DateTo_Lte: DateTime, reservation_ReservationType_Title: String, reservation_ReservationType_Title_Icontains: String, reservation_ReservationType_Title_Iregex: String, reservation_ReservationType_Title_Regex: String): VConstructionSideOptimizedNodeConnection!
  "Изображение"
  photo: String
  "Местоположения -> Почтовый индекс"
  postcode: VPostcodeNode
  "Ссылка на сайт с презентацией конструкции"
  presentationUrl: String
  rowIdx: Int
  "Статус доступности конструкции"
  statusAvailability: Boolean!
  "Статус по подключению"
  statusConnection: Boolean!
  "Комментарий тех. отдела"
  techComment: String
  "Инвентарный номер - Техотдел"
  techInventNumber: String
  "Номер телефона конструкции"
  techPhoneConstruction: String
  "Конструкция -> Технические проблемы"
  techProblem(after: String, before: String, comment: String, comment_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, title: String, title_Icontains: String): VTechProblemsNodeConnection!
  "Список комментариев к тех. проблемам"
  techProblemAllComment: String
  "Дата обновления"
  updatedAt: DateTime
}

type VConstructionNodeConnection {
  "Contains the nodes in this connection."
  edges: [VConstructionNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VConstructionNode` and its cursor."
type VConstructionNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VConstructionNode
}

"construction notification"
type VConstructionNotificationNode implements Node {
  "Конструкция"
  construction: VConstructionOptimizedNode
  "Дата создания"
  createdAt: DateTime
  "The ID of the object."
  id: ID!
  notificationPtr: VNotificationOptimizedNode!
  "Прочитано"
  read: Boolean!
  "Тема"
  topic: String!
  "Дата редактирования"
  updatedAt: DateTime
  "Пользователь"
  user: VCustomUserNode
}

type VConstructionNotificationNodeConnection {
  "Contains the nodes in this connection."
  edges: [VConstructionNotificationNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VConstructionNotificationNode` and its cursor."
type VConstructionNotificationNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VConstructionNotificationNode
}

"construction notification"
type VConstructionNotificationOptimizedNode implements Node {
  "Конструкция"
  construction: VConstructionOptimizedNode
  "Дата создания"
  createdAt: DateTime
  "The ID of the object."
  id: ID!
  notificationPtr: VNotificationOptimizedNode!
  "Прочитано"
  read: Boolean!
  "Тема"
  topic: String!
  "Дата редактирования"
  updatedAt: DateTime
  "Пользователь"
  user: VCustomUserNode
}

type VConstructionNotificationOptimizedNodeConnection {
  "Contains the nodes in this connection."
  edges: [VConstructionNotificationOptimizedNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VConstructionNotificationOptimizedNode` and its cursor."
type VConstructionNotificationOptimizedNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VConstructionNotificationOptimizedNode
}

"Конструкция"
type VConstructionOptimizedNode implements Node {
  "Активная или демонтировананя"
  active: Boolean!
  "Комментарий"
  backComment: String
  "Инвентарный номер - 1C"
  buhInventNumber: String
  constructionHistorySet(after: String, before: String, first: Int, last: Int, offset: Int, targetId: ID, targetId_Isnull: Boolean): Vconstruction_historyOptimizedNodeConnection!
  "Конструкция"
  constructionnotificationSet(
    after: String,
    before: String,
    first: Int,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    user_Id: ID,
    user_Id_Isnull: Boolean
  ): VConstructionNotificationOptimizedNodeConnection!
  "Координаты"
  coordinates: String
  "Дата создания"
  createdAt: DateTime
  "Дата создания"
  creationDate: DateTime
  "Конструкции -> Экипаж"
  crew: VCrewOptimizedNode
  "Сторонам конструкции присвоены специализированные экипажи"
  crewsHasSpecialForSides: Boolean
  "Коды форматов конструкций -> Конструкция"
  formats(after: String, before: String, count: Int, count_Gt: Int, count_Gte: Int, count_Lt: Int, count_Lte: Int, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VConstructionFormatsNodeConnection!
  formatsCodesList: String
  formatsCount: Int
  formatsList: String
  "The ID of the object."
  id: ID!
  "В архиве"
  isArchive: Boolean!
  "Конструкция НОН РТС"
  isNonrts: Boolean!
  "Местоположения -> Юридический адрес"
  legalAddress: VAddressesNode
  "Конструкции -> Местоположение"
  location: VLocationOptimizedNode
  "Местоположения -> Маркетинговый адрес"
  marketingAddress: VAddressesNode
  "Конструкции -> Модель конструкции"
  model: VModelConstructionNode
  "Монтажи -> конструкци"
  mountings(after: String, before: String, crew_Name: String, crew_Name_Icontains: String, endMounting: DateTime, endMounting_Gt: DateTime, endMounting_Gte: DateTime, endMounting_Lt: DateTime, endMounting_Lte: DateTime, first: Int, id: ID, id_Isnull: Boolean, last: Int, mountingDone: Boolean, mountingDone_Isnull: Boolean, mountingTask_Title: String, mountingTask_Title_Icontains: String, offset: Int, reservation_ConstructionSide_Construction_Location_LegalAddress_Address_Isnull: Boolean, reservation_ConstructionSide_Construction_Location_MarketingAddress_Address_Isnull: Boolean, startMounting: DateTime, startMounting_Gt: DateTime, startMounting_Gte: DateTime, startMounting_Lt: DateTime, startMounting_Lte: DateTime, unmountingDone: Boolean, unmountingDone_Isnull: Boolean): VMountingNodeConnection!
  "Конструкции -> Владелец НОН РТС"
  nonrtsOwner: VPartnerOptimizedNode
  "Коментарий о владельце НОН РТС"
  nonrtsOwnerComment: String
  "Порядковый номер конструкции в районе"
  numInDistrict: Int
  "Конструкции -> Помеха"
  obstruction: VObstructionNode
  "Стророны конструкции -> Конструкция"
  ownedSides(advertisingSide_Code: String, advertisingSide_Code_Isnull: Boolean, advertisingSide_Side_Code: String, advertisingSide_Side_Code_Isnull: Boolean, advertisingSide_Side_Format_Code: String, advertisingSide_Side_Format_Code_Isnull: Boolean, advertisingSide_Side_Format_Model_Title: String, advertisingSide_Side_Format_Model_Title_Icontains: String, advertisingSide_Side_Format_Model_Underfamily_Family_Id: ID, advertisingSide_Side_Format_Model_Underfamily_Family_Id_Isnull: Boolean, advertisingSide_Side_Format_Model_Underfamily_Family_Title: String, advertisingSide_Side_Format_Model_Underfamily_Family_Title_Icontains: String, advertisingSide_Side_Format_Model_Underfamily_Title: String, advertisingSide_Side_Format_Model_Underfamily_Title_Icontains: String, advertisingSide_Side_Format_Title: String, advertisingSide_Side_Format_Title_Icontains: String, advertisingSide_Side_Size: String, advertisingSide_Side_Size_Icontains: String, advertisingSide_Side_Title: String, advertisingSide_Side_Title_Icontains: String, after: String, before: String, constructionId: ID, constructionId_Isnull: Boolean, construction_Location_LegalAddress_Address: String, construction_Location_LegalAddress_Address_Icontains: String, construction_Location_MarketingAddress_Address: String, construction_Location_MarketingAddress_Address_Icontains: String, construction_Location_Postcode_District_City_Id: ID, construction_Location_Postcode_District_City_Id_Isnull: Boolean, construction_Location_Postcode_District_City_Title: String, construction_Location_Postcode_District_City_Title_Icontains: String, construction_Location_Postcode_District_Id: ID, construction_Location_Postcode_District_Id_Isnull: Boolean, construction_Location_Postcode_District_Title: String, construction_Location_Postcode_District_Title_Icontains: String, construction_Location_Postcode_Title: String, construction_Location_Postcode_Title_Isnull: Boolean, construction_NonrtsOwner_Id: ID, construction_NonrtsOwner_Id_Isnull: Boolean, construction_NonrtsOwner_Title: String, construction_NonrtsOwner_Title_Icontains: String, construction_NumInDistrict: Int, construction_NumInDistrict_Gt: Int, construction_NumInDistrict_Gte: Int, construction_NumInDistrict_Lt: Int, construction_NumInDistrict_Lte: Int, construction_StatusConnection: Boolean, construction_StatusConnection_Isnull: Boolean, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, reservation_DateFrom: DateTime, reservation_DateFrom_Gt: DateTime, reservation_DateFrom_Gte: DateTime, reservation_DateFrom_Lt: DateTime, reservation_DateFrom_Lte: DateTime, reservation_DateTo: DateTime, reservation_DateTo_Gt: DateTime, reservation_DateTo_Gte: DateTime, reservation_DateTo_Lt: DateTime, reservation_DateTo_Lte: DateTime, reservation_ReservationType_Title: String, reservation_ReservationType_Title_Icontains: String, reservation_ReservationType_Title_Iregex: String, reservation_ReservationType_Title_Regex: String): VConstructionSideOptimizedNodeConnection!
  "Изображение"
  photo: String
  "Местоположения -> Почтовый индекс"
  postcode: VPostcodeNode
  "Ссылка на сайт с презентацией конструкции"
  presentationUrl: String
  rowIdx: Int
  "Статус доступности конструкции"
  statusAvailability: Boolean!
  "Статус по подключению"
  statusConnection: Boolean!
  "Комментарий тех. отдела"
  techComment: String
  "Инвентарный номер - Техотдел"
  techInventNumber: String
  "Номер телефона конструкции"
  techPhoneConstruction: String
  "Конструкция -> Технические проблемы"
  techProblem(after: String, before: String, comment: String, comment_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, title: String, title_Icontains: String): VTechProblemsNodeConnection!
  "Список комментариев к тех. проблемам"
  techProblemAllComment: String
  "Дата обновления"
  updatedAt: DateTime
}

type VConstructionOptimizedNodeConnection {
  "Contains the nodes in this connection."
  edges: [VConstructionOptimizedNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VConstructionOptimizedNode` and its cursor."
type VConstructionOptimizedNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VConstructionOptimizedNode
}

"Сторона конструкции"
type VConstructionSideNode implements Node {
  "Стророны конструкции -> Рекламная сторона"
  advertisingSide: VAdvertisingSideNode
  "Статус доступности стороны"
  availabilitySide: Boolean!
  "Стророны конструкции -> Конструкция"
  construction: VConstructionOptimizedNode
  constructionSideHistorySet(after: String, before: String, first: Int, last: Int, offset: Int, targetId: ID, targetId_Isnull: Boolean): Vconstruction_side_historyOptimizedNodeConnection!
  "Дата создания"
  createdAt: DateTime
  "Конструкции -> Экипаж"
  crew: VCrewOptimizedNode
  "Данные о НОН РТС стоимости -> Сторона конструкции"
  estimateNonRts(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VEstimateNonRtsNodeConnection!
  "The ID of the object."
  id: ID!
  "В архиве"
  isArchive: Boolean!
  "Монтажи -> стороны конструкций"
  mountings(after: String, before: String, crew_Name: String, crew_Name_Icontains: String, endMounting: DateTime, endMounting_Gt: DateTime, endMounting_Gte: DateTime, endMounting_Lt: DateTime, endMounting_Lte: DateTime, first: Int, id: ID, id_Isnull: Boolean, last: Int, mountingDone: Boolean, mountingDone_Isnull: Boolean, mountingTask_Title: String, mountingTask_Title_Icontains: String, offset: Int, reservation_ConstructionSide_Construction_Location_LegalAddress_Address_Isnull: Boolean, reservation_ConstructionSide_Construction_Location_MarketingAddress_Address_Isnull: Boolean, startMounting: DateTime, startMounting_Gt: DateTime, startMounting_Gte: DateTime, startMounting_Lt: DateTime, startMounting_Lte: DateTime, unmountingDone: Boolean, unmountingDone_Isnull: Boolean): VMountingNodeConnection!
  "Стророны конструкции -> Пакет"
  package: PackageType
  "Стророны конструкции -> Назначение стороны"
  purposeSide: VPurposeSideNode
  "Бронирования -> Сторона конструкции"
  reservation(
    after: String,
    appendix_Id: ID,
    appendix_Id_Isnull: Boolean,
    before: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Id: ID,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Id_Isnull: Boolean,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Format_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Size: String,
    constructionSide_AdvertisingSide_Side_Size_Icontains: String,
    constructionSide_AdvertisingSide_Side_Title: String,
    constructionSide_AdvertisingSide_Side_Title_Icontains: String,
    constructionSide_Construction_Location_Postcode_District_City_Id: ID,
    constructionSide_Construction_Location_Postcode_District_City_Id_Isnull: Boolean,
    constructionSide_Construction_Location_Postcode_District_City_Title: String,
    constructionSide_Construction_Location_Postcode_District_City_Title_Icontains: String,
    constructionSide_Construction_Location_Postcode_District_Id: ID,
    constructionSide_Construction_Location_Postcode_District_Id_Isnull: Boolean,
    constructionSide_Construction_Location_Postcode_District_Title: String,
    constructionSide_Construction_Location_Postcode_District_Title_Icontains: String,
    constructionSide_Construction_StatusConnection: Boolean,
    constructionSide_Construction_StatusConnection_Isnull: Boolean,
    dateFrom: DateTime,
    dateFrom_Gt: DateTime,
    dateFrom_Gte: DateTime,
    dateFrom_Lt: DateTime,
    dateFrom_Lte: DateTime,
    dateTo: DateTime,
    dateTo_Gt: DateTime,
    dateTo_Gte: DateTime,
    dateTo_Lt: DateTime,
    dateTo_Lte: DateTime,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    projectId: ID,
    projectId_Isnull: Boolean,
    reservationType_Title: String,
    reservationType_Title_Icontains: String,
    reservationType_Title_Iregex: String,
    reservationType_Title_Regex: String
  ): VReservationOptimizedNodeConnection!
  "Ограничение стороны конструкции по продажам"
  saleConstraint: Boolean!
  "Дата обновления"
  updatedAt: DateTime
}

type VConstructionSideNodeConnection {
  "Contains the nodes in this connection."
  edges: [VConstructionSideNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VConstructionSideNode` and its cursor."
type VConstructionSideNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VConstructionSideNode
}

"Сторона конструкции"
type VConstructionSideOptimizedNode implements Node {
  "Стророны конструкции -> Рекламная сторона"
  advertisingSide: VAdvertisingSideNode
  "Статус доступности стороны"
  availabilitySide: Boolean!
  "Стророны конструкции -> Конструкция"
  construction: VConstructionOptimizedNode
  constructionSideHistorySet(after: String, before: String, first: Int, last: Int, offset: Int, targetId: ID, targetId_Isnull: Boolean): Vconstruction_side_historyOptimizedNodeConnection!
  "Дата создания"
  createdAt: DateTime
  "Конструкции -> Экипаж"
  crew: VCrewOptimizedNode
  "Данные о НОН РТС стоимости -> Сторона конструкции"
  estimateNonRts(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VEstimateNonRtsNodeConnection!
  "The ID of the object."
  id: ID!
  "В архиве"
  isArchive: Boolean!
  "Монтажи -> стороны конструкций"
  mountings(after: String, before: String, crew_Name: String, crew_Name_Icontains: String, endMounting: DateTime, endMounting_Gt: DateTime, endMounting_Gte: DateTime, endMounting_Lt: DateTime, endMounting_Lte: DateTime, first: Int, id: ID, id_Isnull: Boolean, last: Int, mountingDone: Boolean, mountingDone_Isnull: Boolean, mountingTask_Title: String, mountingTask_Title_Icontains: String, offset: Int, reservation_ConstructionSide_Construction_Location_LegalAddress_Address_Isnull: Boolean, reservation_ConstructionSide_Construction_Location_MarketingAddress_Address_Isnull: Boolean, startMounting: DateTime, startMounting_Gt: DateTime, startMounting_Gte: DateTime, startMounting_Lt: DateTime, startMounting_Lte: DateTime, unmountingDone: Boolean, unmountingDone_Isnull: Boolean): VMountingNodeConnection!
  "Стророны конструкции -> Пакет"
  package: PackageType
  "Стророны конструкции -> Назначение стороны"
  purposeSide: VPurposeSideNode
  "Бронирования -> Сторона конструкции"
  reservation(
    after: String,
    appendix_Id: ID,
    appendix_Id_Isnull: Boolean,
    before: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Id: ID,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Id_Isnull: Boolean,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Format_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Size: String,
    constructionSide_AdvertisingSide_Side_Size_Icontains: String,
    constructionSide_AdvertisingSide_Side_Title: String,
    constructionSide_AdvertisingSide_Side_Title_Icontains: String,
    constructionSide_Construction_Location_Postcode_District_City_Id: ID,
    constructionSide_Construction_Location_Postcode_District_City_Id_Isnull: Boolean,
    constructionSide_Construction_Location_Postcode_District_City_Title: String,
    constructionSide_Construction_Location_Postcode_District_City_Title_Icontains: String,
    constructionSide_Construction_Location_Postcode_District_Id: ID,
    constructionSide_Construction_Location_Postcode_District_Id_Isnull: Boolean,
    constructionSide_Construction_Location_Postcode_District_Title: String,
    constructionSide_Construction_Location_Postcode_District_Title_Icontains: String,
    constructionSide_Construction_StatusConnection: Boolean,
    constructionSide_Construction_StatusConnection_Isnull: Boolean,
    dateFrom: DateTime,
    dateFrom_Gt: DateTime,
    dateFrom_Gte: DateTime,
    dateFrom_Lt: DateTime,
    dateFrom_Lte: DateTime,
    dateTo: DateTime,
    dateTo_Gt: DateTime,
    dateTo_Gte: DateTime,
    dateTo_Lt: DateTime,
    dateTo_Lte: DateTime,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    projectId: ID,
    projectId_Isnull: Boolean,
    reservationType_Title: String,
    reservationType_Title_Icontains: String,
    reservationType_Title_Iregex: String,
    reservationType_Title_Regex: String
  ): VReservationOptimizedNodeConnection!
  "Ограничение стороны конструкции по продажам"
  saleConstraint: Boolean!
  "Дата обновления"
  updatedAt: DateTime
}

type VConstructionSideOptimizedNodeConnection {
  "Contains the nodes in this connection."
  edges: [VConstructionSideOptimizedNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VConstructionSideOptimizedNode` and its cursor."
type VConstructionSideOptimizedNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VConstructionSideOptimizedNode
}

"Контактное лицо"
type VContactPersonNode implements Node {
  "E-mail"
  email: String!
  "The ID of the object."
  id: ID!
  "ФИО"
  name: String!
  "Контактные лица -> Контрагент"
  partner: VPartnerOptimizedNode
  "Телефон"
  phone: String!
}

type VContactPersonNodeConnection {
  "Contains the nodes in this connection."
  edges: [VContactPersonNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VContactPersonNode` and its cursor."
type VContactPersonNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VContactPersonNode
}

"Договор"
type VContractNode implements Node {
  "Дополнительное соглашение"
  additionallyAgreementPdf: String
  "Документ, на основании которого действует подписант"
  basedOnDocument: String
  "Код"
  code: String
  "Комментарий"
  comment: String
  "Приложения к договору -> Договор"
  contractAppendices(
    after: String,
    before: String,
    code: String,
    code_Icontains: String,
    contractId: ID,
    contractId_Isnull: Boolean,
    contract_Code: String,
    contract_Code_Icontains: String,
    contract_PartnerId: ID,
    contract_PartnerId_Isnull: Boolean,
    contract_Partner_Title: String,
    contract_Partner_Title_Icontains: String,
    contract_SerialNumber: String,
    contract_SerialNumber_Icontains: String,
    createdDate: DateTime,
    createdDate_Gt: DateTime,
    createdDate_Gte: DateTime,
    createdDate_Lt: DateTime,
    createdDate_Lte: DateTime,
    creator: ID,
    creator_Isnull: Boolean,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    periodEndDate: DateTime,
    periodEndDate_Gt: DateTime,
    periodEndDate_Gte: DateTime,
    periodEndDate_Lt: DateTime,
    periodEndDate_Lte: DateTime,
    periodStartDate: DateTime,
    periodStartDate_Gt: DateTime,
    periodStartDate_Gte: DateTime,
    periodStartDate_Lt: DateTime,
    periodStartDate_Lte: DateTime,
    projectId: ID,
    projectId_Isnull: Boolean,
    project_BackOfficeManagerId: ID,
    project_BackOfficeManagerId_Isnull: Boolean,
    project_BackOfficeManager_FirstName: String,
    project_BackOfficeManager_FirstName_Icontains: String,
    project_BackOfficeManager_LastName: String,
    project_BackOfficeManager_LastName_Icontains: String,
    project_BrandId: ID,
    project_BrandId_Isnull: Boolean,
    project_Brand_Title: String,
    project_Brand_Title_Icontains: String,
    project_ClientId: ID,
    project_ClientId_Isnull: Boolean,
    project_Client_Title: String,
    project_Client_Title_Icontains: String,
    project_Code: String,
    project_Code_Icontains: String,
    project_Id: ID,
    project_Id_Isnull: Boolean,
    project_Title: String,
    project_Title_Icontains: String,
    returnStatus: Boolean,
    returnStatus_Isnull: Boolean,
    salesManagerId: ID,
    salesManagerId_Isnull: Boolean,
    salesManager_FirstName: String,
    salesManager_FirstName_Icontains: String,
    salesManager_LastName: String,
    salesManager_LastName_Icontains: String
  ): VAppendixOptimizedNodeConnection!
  "Договор"
  contractPdf: String
  "Договора -> Тип договора"
  contractType: VContractTypeNode
  "Дата создания"
  createdAt: DateTime
  "Договора -> Создатель (кто внес данные)"
  creator: VCustomUserNode
  "Дата окончания действия"
  end: DateTime
  "The ID of the object."
  id: ID!
  "Договора -> Инициатор"
  initiator: VCustomUserNode
  "Счета -> Договор"
  invoices(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VInvoiceNodeConnection!
  "В архиве"
  isArchive: Boolean!
  "Договора -> Контрагент"
  partner: VPartnerOptimizedNode
  "Срок оплаты"
  paymentDate: DateTime
  projectTitlesList: String
  "Дата заключения"
  registrationDate: DateTime
  "Статус возврата"
  returnStatus: Boolean!
  "Договора -> Менеджер по продажам"
  salesManager: VCustomUserNode
  "Порядковый номер договора"
  serialNumber: String
  "Подписант в именительном падеже"
  signatoryOne: String
  "Должность подписанта"
  signatoryPosition: String
  "Подписант в родительном падеже"
  signatoryTwo: String
  "Дата начала действия"
  start: DateTime
  "Дата обновления"
  updatedAt: DateTime
}

type VContractNodeConnection {
  "Contains the nodes in this connection."
  edges: [VContractNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VContractNode` and its cursor."
type VContractNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VContractNode
}

"Договор"
type VContractOptimizedNode implements Node {
  "Дополнительное соглашение"
  additionallyAgreementPdf: String
  "Документ, на основании которого действует подписант"
  basedOnDocument: String
  "Код"
  code: String
  "Комментарий"
  comment: String
  "Приложения к договору -> Договор"
  contractAppendices(
    after: String,
    before: String,
    code: String,
    code_Icontains: String,
    contractId: ID,
    contractId_Isnull: Boolean,
    contract_Code: String,
    contract_Code_Icontains: String,
    contract_PartnerId: ID,
    contract_PartnerId_Isnull: Boolean,
    contract_Partner_Title: String,
    contract_Partner_Title_Icontains: String,
    contract_SerialNumber: String,
    contract_SerialNumber_Icontains: String,
    createdDate: DateTime,
    createdDate_Gt: DateTime,
    createdDate_Gte: DateTime,
    createdDate_Lt: DateTime,
    createdDate_Lte: DateTime,
    creator: ID,
    creator_Isnull: Boolean,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    periodEndDate: DateTime,
    periodEndDate_Gt: DateTime,
    periodEndDate_Gte: DateTime,
    periodEndDate_Lt: DateTime,
    periodEndDate_Lte: DateTime,
    periodStartDate: DateTime,
    periodStartDate_Gt: DateTime,
    periodStartDate_Gte: DateTime,
    periodStartDate_Lt: DateTime,
    periodStartDate_Lte: DateTime,
    projectId: ID,
    projectId_Isnull: Boolean,
    project_BackOfficeManagerId: ID,
    project_BackOfficeManagerId_Isnull: Boolean,
    project_BackOfficeManager_FirstName: String,
    project_BackOfficeManager_FirstName_Icontains: String,
    project_BackOfficeManager_LastName: String,
    project_BackOfficeManager_LastName_Icontains: String,
    project_BrandId: ID,
    project_BrandId_Isnull: Boolean,
    project_Brand_Title: String,
    project_Brand_Title_Icontains: String,
    project_ClientId: ID,
    project_ClientId_Isnull: Boolean,
    project_Client_Title: String,
    project_Client_Title_Icontains: String,
    project_Code: String,
    project_Code_Icontains: String,
    project_Id: ID,
    project_Id_Isnull: Boolean,
    project_Title: String,
    project_Title_Icontains: String,
    returnStatus: Boolean,
    returnStatus_Isnull: Boolean,
    salesManagerId: ID,
    salesManagerId_Isnull: Boolean,
    salesManager_FirstName: String,
    salesManager_FirstName_Icontains: String,
    salesManager_LastName: String,
    salesManager_LastName_Icontains: String
  ): VAppendixOptimizedNodeConnection!
  "Договор"
  contractPdf: String
  "Договора -> Тип договора"
  contractType: VContractTypeNode
  "Дата создания"
  createdAt: DateTime
  "Договора -> Создатель (кто внес данные)"
  creator: VCustomUserNode
  "Дата окончания действия"
  end: DateTime
  "The ID of the object."
  id: ID!
  "Договора -> Инициатор"
  initiator: VCustomUserNode
  "Счета -> Договор"
  invoices(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VInvoiceNodeConnection!
  "В архиве"
  isArchive: Boolean!
  "Договора -> Контрагент"
  partner: VPartnerOptimizedNode
  "Срок оплаты"
  paymentDate: DateTime
  projectTitlesList: String
  "Дата заключения"
  registrationDate: DateTime
  "Статус возврата"
  returnStatus: Boolean!
  "Договора -> Менеджер по продажам"
  salesManager: VCustomUserNode
  "Порядковый номер договора"
  serialNumber: String
  "Подписант в именительном падеже"
  signatoryOne: String
  "Должность подписанта"
  signatoryPosition: String
  "Подписант в родительном падеже"
  signatoryTwo: String
  "Дата начала действия"
  start: DateTime
  "Дата обновления"
  updatedAt: DateTime
}

type VContractOptimizedNodeConnection {
  "Contains the nodes in this connection."
  edges: [VContractOptimizedNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VContractOptimizedNode` and its cursor."
type VContractOptimizedNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VContractOptimizedNode
}

"Тип договора"
type VContractTypeNode implements Node {
  "Договора -> Тип договора"
  contracts(
    after: String,
    before: String,
    code: String,
    code_Icontains: String,
    contractType_Name: String,
    contractType_Name_Icontains: String,
    creator_Name: String,
    creator_Name_Icontains: String,
    end: DateTime,
    end_Gt: DateTime,
    end_Gte: DateTime,
    end_Lt: DateTime,
    end_Lte: DateTime,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    initiator_Name: String,
    initiator_Name_Icontains: String,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partner_Title: String,
    partner_Title_Icontains: String,
    registrationDate: DateTime,
    registrationDate_Gt: DateTime,
    registrationDate_Gte: DateTime,
    registrationDate_Lt: DateTime,
    registrationDate_Lte: DateTime,
    returnStatus: Boolean,
    returnStatus_Isnull: Boolean,
    start: DateTime,
    start_Gt: DateTime,
    start_Gte: DateTime,
    start_Lt: DateTime,
    start_Lte: DateTime
  ): VContractOptimizedNodeConnection!
  "The ID of the object."
  id: ID!
  "Тип договора"
  name: String
}

type VContractTypeNodeConnection {
  "Contains the nodes in this connection."
  edges: [VContractTypeNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VContractTypeNode` and its cursor."
type VContractTypeNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VContractTypeNode
}

"Страна"
type VCountryNode implements Node {
  "Города -> Страна"
  cities(after: String, before: String, country_Id: ID, country_Id_Isnull: Boolean, country_Title: String, country_Title_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, title: String, title_Icontains: String): VCityNodeConnection!
  "The ID of the object."
  id: ID!
  "Страна"
  title: String
}

type VCountryNodeConnection {
  "Contains the nodes in this connection."
  edges: [VCountryNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VCountryNode` and its cursor."
type VCountryNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VCountryNode
}

"Экипаж"
type VCrewNode implements Node {
  "Экипажи -> Город"
  city: VCityNode
  "Конструкции -> Экипаж"
  constructionSides(advertisingSide_Code: String, advertisingSide_Code_Isnull: Boolean, advertisingSide_Side_Code: String, advertisingSide_Side_Code_Isnull: Boolean, advertisingSide_Side_Format_Code: String, advertisingSide_Side_Format_Code_Isnull: Boolean, advertisingSide_Side_Format_Model_Title: String, advertisingSide_Side_Format_Model_Title_Icontains: String, advertisingSide_Side_Format_Model_Underfamily_Family_Id: ID, advertisingSide_Side_Format_Model_Underfamily_Family_Id_Isnull: Boolean, advertisingSide_Side_Format_Model_Underfamily_Family_Title: String, advertisingSide_Side_Format_Model_Underfamily_Family_Title_Icontains: String, advertisingSide_Side_Format_Model_Underfamily_Title: String, advertisingSide_Side_Format_Model_Underfamily_Title_Icontains: String, advertisingSide_Side_Format_Title: String, advertisingSide_Side_Format_Title_Icontains: String, advertisingSide_Side_Size: String, advertisingSide_Side_Size_Icontains: String, advertisingSide_Side_Title: String, advertisingSide_Side_Title_Icontains: String, after: String, before: String, constructionId: ID, constructionId_Isnull: Boolean, construction_Location_LegalAddress_Address: String, construction_Location_LegalAddress_Address_Icontains: String, construction_Location_MarketingAddress_Address: String, construction_Location_MarketingAddress_Address_Icontains: String, construction_Location_Postcode_District_City_Id: ID, construction_Location_Postcode_District_City_Id_Isnull: Boolean, construction_Location_Postcode_District_City_Title: String, construction_Location_Postcode_District_City_Title_Icontains: String, construction_Location_Postcode_District_Id: ID, construction_Location_Postcode_District_Id_Isnull: Boolean, construction_Location_Postcode_District_Title: String, construction_Location_Postcode_District_Title_Icontains: String, construction_Location_Postcode_Title: String, construction_Location_Postcode_Title_Isnull: Boolean, construction_NonrtsOwner_Id: ID, construction_NonrtsOwner_Id_Isnull: Boolean, construction_NonrtsOwner_Title: String, construction_NonrtsOwner_Title_Icontains: String, construction_NumInDistrict: Int, construction_NumInDistrict_Gt: Int, construction_NumInDistrict_Gte: Int, construction_NumInDistrict_Lt: Int, construction_NumInDistrict_Lte: Int, construction_StatusConnection: Boolean, construction_StatusConnection_Isnull: Boolean, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, reservation_DateFrom: DateTime, reservation_DateFrom_Gt: DateTime, reservation_DateFrom_Gte: DateTime, reservation_DateFrom_Lt: DateTime, reservation_DateFrom_Lte: DateTime, reservation_DateTo: DateTime, reservation_DateTo_Gt: DateTime, reservation_DateTo_Gte: DateTime, reservation_DateTo_Lt: DateTime, reservation_DateTo_Lte: DateTime, reservation_ReservationType_Title: String, reservation_ReservationType_Title_Icontains: String, reservation_ReservationType_Title_Iregex: String, reservation_ReservationType_Title_Regex: String): VConstructionSideOptimizedNodeConnection!
  "Конструкции -> Экипаж"
  constructions(
    active: Boolean,
    active_Isnull: Boolean,
    after: String,
    before: String,
    buhInventNumber: String,
    buhInventNumber_Icontains: String,
    coordinates: String,
    coordinates_Isnull: Boolean,
    createdAt: DateTime,
    createdAt_Gt: DateTime,
    createdAt_Gte: DateTime,
    createdAt_Lt: DateTime,
    createdAt_Lte: DateTime,
    crew: ID,
    crew_Isnull: Boolean,
    first: Int,
    format_Title: String,
    id: ID,
    id_Isnull: Boolean,
    isNonrts: Boolean,
    isNonrts_Isnull: Boolean,
    last: Int,
    locationId_Isnull: Boolean,
    location_Area: Float,
    location_Area_Gt: Float,
    location_Area_Gte: Float,
    location_Area_Lt: Float,
    location_Area_Lte: Float,
    location_HasArea: Boolean,
    location_HasArea_Isnull: Boolean,
    location_LegalAddress_Address: String,
    location_LegalAddress_Address_Icontains: String,
    location_MarketingAddress_Address: String,
    location_MarketingAddress_Address_Icontains: String,
    location_Postcode_District_City_Country_Title: String,
    location_Postcode_District_City_Country_Title_Icontains: String,
    location_Postcode_District_City_Title: String,
    location_Postcode_District_City_Title_Icontains: String,
    location_Postcode_District_Title: String,
    location_Postcode_District_Title_Icontains: String,
    location_Postcode_Title: String,
    location_Postcode_Title_Icontains: String,
    model_Title: String,
    model_Title_Icontains: String,
    model_Underfamily_Family_Title: String,
    model_Underfamily_Family_Title_Icontains: String,
    model_Underfamily_Title: String,
    model_Underfamily_Title_Icontains: String,
    obstruction_Title: String,
    obstruction_Title_Icontains: String,
    offset: Int,
    "Порядок"
    orderBy: String,
    statusConnection: Boolean,
    statusConnection_Isnull: Boolean,
    techInventNumber: String,
    techInventNumber_Icontains: String,
    techPhoneConstruction: String,
    techPhoneConstruction_Icontains: String,
    updatedAt: DateTime,
    updatedAt_Gt: DateTime,
    updatedAt_Gte: DateTime,
    updatedAt_Lt: DateTime,
    updatedAt_Lte: DateTime
  ): VConstructionOptimizedNodeConnection!
  "The ID of the object."
  id: ID!
  "Монтажи -> Экипаж"
  mountings(after: String, before: String, crew_Name: String, crew_Name_Icontains: String, endMounting: DateTime, endMounting_Gt: DateTime, endMounting_Gte: DateTime, endMounting_Lt: DateTime, endMounting_Lte: DateTime, first: Int, id: ID, id_Isnull: Boolean, last: Int, mountingDone: Boolean, mountingDone_Isnull: Boolean, mountingTask_Title: String, mountingTask_Title_Icontains: String, offset: Int, reservation_ConstructionSide_Construction_Location_LegalAddress_Address_Isnull: Boolean, reservation_ConstructionSide_Construction_Location_MarketingAddress_Address_Isnull: Boolean, startMounting: DateTime, startMounting_Gt: DateTime, startMounting_Gte: DateTime, startMounting_Lt: DateTime, startMounting_Lte: DateTime, unmountingDone: Boolean, unmountingDone_Isnull: Boolean): VMountingNodeConnection!
  "Имя человека"
  name: String
  "Номер экипажа"
  num: String
  "Номер телефона монтажника"
  phone: String
}

type VCrewNodeConnection {
  "Contains the nodes in this connection."
  edges: [VCrewNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VCrewNode` and its cursor."
type VCrewNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VCrewNode
}

"Экипаж"
type VCrewOptimizedNode implements Node {
  "Экипажи -> Город"
  city: VCityNode
  "Конструкции -> Экипаж"
  constructionSides(advertisingSide_Code: String, advertisingSide_Code_Isnull: Boolean, advertisingSide_Side_Code: String, advertisingSide_Side_Code_Isnull: Boolean, advertisingSide_Side_Format_Code: String, advertisingSide_Side_Format_Code_Isnull: Boolean, advertisingSide_Side_Format_Model_Title: String, advertisingSide_Side_Format_Model_Title_Icontains: String, advertisingSide_Side_Format_Model_Underfamily_Family_Id: ID, advertisingSide_Side_Format_Model_Underfamily_Family_Id_Isnull: Boolean, advertisingSide_Side_Format_Model_Underfamily_Family_Title: String, advertisingSide_Side_Format_Model_Underfamily_Family_Title_Icontains: String, advertisingSide_Side_Format_Model_Underfamily_Title: String, advertisingSide_Side_Format_Model_Underfamily_Title_Icontains: String, advertisingSide_Side_Format_Title: String, advertisingSide_Side_Format_Title_Icontains: String, advertisingSide_Side_Size: String, advertisingSide_Side_Size_Icontains: String, advertisingSide_Side_Title: String, advertisingSide_Side_Title_Icontains: String, after: String, before: String, constructionId: ID, constructionId_Isnull: Boolean, construction_Location_LegalAddress_Address: String, construction_Location_LegalAddress_Address_Icontains: String, construction_Location_MarketingAddress_Address: String, construction_Location_MarketingAddress_Address_Icontains: String, construction_Location_Postcode_District_City_Id: ID, construction_Location_Postcode_District_City_Id_Isnull: Boolean, construction_Location_Postcode_District_City_Title: String, construction_Location_Postcode_District_City_Title_Icontains: String, construction_Location_Postcode_District_Id: ID, construction_Location_Postcode_District_Id_Isnull: Boolean, construction_Location_Postcode_District_Title: String, construction_Location_Postcode_District_Title_Icontains: String, construction_Location_Postcode_Title: String, construction_Location_Postcode_Title_Isnull: Boolean, construction_NonrtsOwner_Id: ID, construction_NonrtsOwner_Id_Isnull: Boolean, construction_NonrtsOwner_Title: String, construction_NonrtsOwner_Title_Icontains: String, construction_NumInDistrict: Int, construction_NumInDistrict_Gt: Int, construction_NumInDistrict_Gte: Int, construction_NumInDistrict_Lt: Int, construction_NumInDistrict_Lte: Int, construction_StatusConnection: Boolean, construction_StatusConnection_Isnull: Boolean, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, reservation_DateFrom: DateTime, reservation_DateFrom_Gt: DateTime, reservation_DateFrom_Gte: DateTime, reservation_DateFrom_Lt: DateTime, reservation_DateFrom_Lte: DateTime, reservation_DateTo: DateTime, reservation_DateTo_Gt: DateTime, reservation_DateTo_Gte: DateTime, reservation_DateTo_Lt: DateTime, reservation_DateTo_Lte: DateTime, reservation_ReservationType_Title: String, reservation_ReservationType_Title_Icontains: String, reservation_ReservationType_Title_Iregex: String, reservation_ReservationType_Title_Regex: String): VConstructionSideOptimizedNodeConnection!
  "Конструкции -> Экипаж"
  constructions(
    active: Boolean,
    active_Isnull: Boolean,
    after: String,
    before: String,
    buhInventNumber: String,
    buhInventNumber_Icontains: String,
    coordinates: String,
    coordinates_Isnull: Boolean,
    createdAt: DateTime,
    createdAt_Gt: DateTime,
    createdAt_Gte: DateTime,
    createdAt_Lt: DateTime,
    createdAt_Lte: DateTime,
    crew: ID,
    crew_Isnull: Boolean,
    first: Int,
    format_Title: String,
    id: ID,
    id_Isnull: Boolean,
    isNonrts: Boolean,
    isNonrts_Isnull: Boolean,
    last: Int,
    locationId_Isnull: Boolean,
    location_Area: Float,
    location_Area_Gt: Float,
    location_Area_Gte: Float,
    location_Area_Lt: Float,
    location_Area_Lte: Float,
    location_HasArea: Boolean,
    location_HasArea_Isnull: Boolean,
    location_LegalAddress_Address: String,
    location_LegalAddress_Address_Icontains: String,
    location_MarketingAddress_Address: String,
    location_MarketingAddress_Address_Icontains: String,
    location_Postcode_District_City_Country_Title: String,
    location_Postcode_District_City_Country_Title_Icontains: String,
    location_Postcode_District_City_Title: String,
    location_Postcode_District_City_Title_Icontains: String,
    location_Postcode_District_Title: String,
    location_Postcode_District_Title_Icontains: String,
    location_Postcode_Title: String,
    location_Postcode_Title_Icontains: String,
    model_Title: String,
    model_Title_Icontains: String,
    model_Underfamily_Family_Title: String,
    model_Underfamily_Family_Title_Icontains: String,
    model_Underfamily_Title: String,
    model_Underfamily_Title_Icontains: String,
    obstruction_Title: String,
    obstruction_Title_Icontains: String,
    offset: Int,
    "Порядок"
    orderBy: String,
    statusConnection: Boolean,
    statusConnection_Isnull: Boolean,
    techInventNumber: String,
    techInventNumber_Icontains: String,
    techPhoneConstruction: String,
    techPhoneConstruction_Icontains: String,
    updatedAt: DateTime,
    updatedAt_Gt: DateTime,
    updatedAt_Gte: DateTime,
    updatedAt_Lt: DateTime,
    updatedAt_Lte: DateTime
  ): VConstructionOptimizedNodeConnection!
  "The ID of the object."
  id: ID!
  "Монтажи -> Экипаж"
  mountings(after: String, before: String, crew_Name: String, crew_Name_Icontains: String, endMounting: DateTime, endMounting_Gt: DateTime, endMounting_Gte: DateTime, endMounting_Lt: DateTime, endMounting_Lte: DateTime, first: Int, id: ID, id_Isnull: Boolean, last: Int, mountingDone: Boolean, mountingDone_Isnull: Boolean, mountingTask_Title: String, mountingTask_Title_Icontains: String, offset: Int, reservation_ConstructionSide_Construction_Location_LegalAddress_Address_Isnull: Boolean, reservation_ConstructionSide_Construction_Location_MarketingAddress_Address_Isnull: Boolean, startMounting: DateTime, startMounting_Gt: DateTime, startMounting_Gte: DateTime, startMounting_Lt: DateTime, startMounting_Lte: DateTime, unmountingDone: Boolean, unmountingDone_Isnull: Boolean): VMountingNodeConnection!
  "Имя человека"
  name: String
  "Номер экипажа"
  num: String
  "Номер телефона монтажника"
  phone: String
}

type VCrewOptimizedNodeConnection {
  "Contains the nodes in this connection."
  edges: [VCrewOptimizedNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VCrewOptimizedNode` and its cursor."
type VCrewOptimizedNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VCrewOptimizedNode
}

"Пользователь"
type VCustomUserNode implements Node {
  "Проекты -> Менеджер Бэк-оффиса"
  backOfficeManagersOfProjects(after: String, backOfficeManager_Email: String, backOfficeManager_Email_Icontains: String, backOfficeManager_FirstName: String, backOfficeManager_FirstName_Icontains: String, backOfficeManager_Id: ID, backOfficeManager_Id_Isnull: Boolean, backOfficeManager_LastName: String, backOfficeManager_LastName_Icontains: String, backOfficeManager_Name: String, backOfficeManager_Name_Icontains: String, backOfficeManager_Phone: String, backOfficeManager_Phone_Icontains: String, before: String, brand_Id: ID, brand_Id_Isnull: Boolean, brand_Title: String, brand_Title_Icontains: String, client_Id: ID, client_Id_Isnull: Boolean, client_PartnerType_Id: ID, client_PartnerType_Id_Isnull: Boolean, client_PartnerType_Title: String, client_PartnerType_Title_Icontains: String, client_Title: String, client_Title_Icontains: String, client_WorkingSectors_Description: String, client_WorkingSectors_Description_Icontains: String, client_WorkingSectors_Id: ID, client_WorkingSectors_Id_Isnull: Boolean, client_WorkingSectors_Title: String, client_WorkingSectors_Title_Icontains: String, code: String, code_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, numInYear: Int, numInYear_Isnull: Boolean, offset: Int, salesManager_Email: String, salesManager_Email_Icontains: String, salesManager_FirstName: String, salesManager_FirstName_Icontains: String, salesManager_Id: ID, salesManager_Id_Isnull: Boolean, salesManager_LastName: String, salesManager_LastName_Icontains: String, salesManager_Name: String, salesManager_Name_Icontains: String, salesManager_Phone: String, salesManager_Phone_Icontains: String, startDate: DateTime, startDate_Gt: DateTime, startDate_Gte: DateTime, startDate_Lt: DateTime, startDate_Lte: DateTime, title: String, title_Icontains: String): VProjectNodeConnection!
  changelogSet(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VChangeLogNodeConnection!
  constructionHistorySet(after: String, before: String, first: Int, last: Int, offset: Int, targetId: ID, targetId_Isnull: Boolean): Vconstruction_historyOptimizedNodeConnection!
  constructionSideHistorySet(after: String, before: String, first: Int, last: Int, offset: Int, targetId: ID, targetId_Isnull: Boolean): Vconstruction_side_historyOptimizedNodeConnection!
  "Договора -> Создатель (кто внес данные)"
  createdContracts(
    after: String,
    before: String,
    code: String,
    code_Icontains: String,
    contractType_Name: String,
    contractType_Name_Icontains: String,
    creator_Name: String,
    creator_Name_Icontains: String,
    end: DateTime,
    end_Gt: DateTime,
    end_Gte: DateTime,
    end_Lt: DateTime,
    end_Lte: DateTime,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    initiator_Name: String,
    initiator_Name_Icontains: String,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partner_Title: String,
    partner_Title_Icontains: String,
    registrationDate: DateTime,
    registrationDate_Gt: DateTime,
    registrationDate_Gte: DateTime,
    registrationDate_Lt: DateTime,
    registrationDate_Lte: DateTime,
    returnStatus: Boolean,
    returnStatus_Isnull: Boolean,
    start: DateTime,
    start_Gt: DateTime,
    start_Gte: DateTime,
    start_Lt: DateTime,
    start_Lte: DateTime
  ): VContractOptimizedNodeConnection!
  "Приложения к договору -> Создатель (кто внес данные)"
  createdContractsAppendices(
    after: String,
    before: String,
    code: String,
    code_Icontains: String,
    contractId: ID,
    contractId_Isnull: Boolean,
    contract_Code: String,
    contract_Code_Icontains: String,
    contract_PartnerId: ID,
    contract_PartnerId_Isnull: Boolean,
    contract_Partner_Title: String,
    contract_Partner_Title_Icontains: String,
    contract_SerialNumber: String,
    contract_SerialNumber_Icontains: String,
    createdDate: DateTime,
    createdDate_Gt: DateTime,
    createdDate_Gte: DateTime,
    createdDate_Lt: DateTime,
    createdDate_Lte: DateTime,
    creator: ID,
    creator_Isnull: Boolean,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    periodEndDate: DateTime,
    periodEndDate_Gt: DateTime,
    periodEndDate_Gte: DateTime,
    periodEndDate_Lt: DateTime,
    periodEndDate_Lte: DateTime,
    periodStartDate: DateTime,
    periodStartDate_Gt: DateTime,
    periodStartDate_Gte: DateTime,
    periodStartDate_Lt: DateTime,
    periodStartDate_Lte: DateTime,
    projectId: ID,
    projectId_Isnull: Boolean,
    project_BackOfficeManagerId: ID,
    project_BackOfficeManagerId_Isnull: Boolean,
    project_BackOfficeManager_FirstName: String,
    project_BackOfficeManager_FirstName_Icontains: String,
    project_BackOfficeManager_LastName: String,
    project_BackOfficeManager_LastName_Icontains: String,
    project_BrandId: ID,
    project_BrandId_Isnull: Boolean,
    project_Brand_Title: String,
    project_Brand_Title_Icontains: String,
    project_ClientId: ID,
    project_ClientId_Isnull: Boolean,
    project_Client_Title: String,
    project_Client_Title_Icontains: String,
    project_Code: String,
    project_Code_Icontains: String,
    project_Id: ID,
    project_Id_Isnull: Boolean,
    project_Title: String,
    project_Title_Icontains: String,
    returnStatus: Boolean,
    returnStatus_Isnull: Boolean,
    salesManagerId: ID,
    salesManagerId_Isnull: Boolean,
    salesManager_FirstName: String,
    salesManager_FirstName_Icontains: String,
    salesManager_LastName: String,
    salesManager_LastName_Icontains: String
  ): VAppendixOptimizedNodeConnection!
  "Проекты -> Создатель (кто внес данные)"
  createdProjects(after: String, backOfficeManager_Email: String, backOfficeManager_Email_Icontains: String, backOfficeManager_FirstName: String, backOfficeManager_FirstName_Icontains: String, backOfficeManager_Id: ID, backOfficeManager_Id_Isnull: Boolean, backOfficeManager_LastName: String, backOfficeManager_LastName_Icontains: String, backOfficeManager_Name: String, backOfficeManager_Name_Icontains: String, backOfficeManager_Phone: String, backOfficeManager_Phone_Icontains: String, before: String, brand_Id: ID, brand_Id_Isnull: Boolean, brand_Title: String, brand_Title_Icontains: String, client_Id: ID, client_Id_Isnull: Boolean, client_PartnerType_Id: ID, client_PartnerType_Id_Isnull: Boolean, client_PartnerType_Title: String, client_PartnerType_Title_Icontains: String, client_Title: String, client_Title_Icontains: String, client_WorkingSectors_Description: String, client_WorkingSectors_Description_Icontains: String, client_WorkingSectors_Id: ID, client_WorkingSectors_Id_Isnull: Boolean, client_WorkingSectors_Title: String, client_WorkingSectors_Title_Icontains: String, code: String, code_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, numInYear: Int, numInYear_Isnull: Boolean, offset: Int, salesManager_Email: String, salesManager_Email_Icontains: String, salesManager_FirstName: String, salesManager_FirstName_Icontains: String, salesManager_Id: ID, salesManager_Id_Isnull: Boolean, salesManager_LastName: String, salesManager_LastName_Icontains: String, salesManager_Name: String, salesManager_Name_Icontains: String, salesManager_Phone: String, salesManager_Phone_Icontains: String, startDate: DateTime, startDate_Gt: DateTime, startDate_Gte: DateTime, startDate_Lt: DateTime, startDate_Lte: DateTime, title: String, title_Icontains: String): VProjectNodeConnection!
  "date joined"
  dateJoined: DateTime!
  "Почтовый адрес"
  email: String
  "Пользователи -> Должность"
  employeePosition: VEmployeePositionNode
  "first name"
  firstName: String
  "Пользователи <-> Группы"
  groups(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VGroupNodeConnection!
  "The ID of the object."
  id: ID!
  "Договора -> Инициатор"
  initiatedContracts(
    after: String,
    before: String,
    code: String,
    code_Icontains: String,
    contractType_Name: String,
    contractType_Name_Icontains: String,
    creator_Name: String,
    creator_Name_Icontains: String,
    end: DateTime,
    end_Gt: DateTime,
    end_Gte: DateTime,
    end_Lt: DateTime,
    end_Lte: DateTime,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    initiator_Name: String,
    initiator_Name_Icontains: String,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partner_Title: String,
    partner_Title_Icontains: String,
    registrationDate: DateTime,
    registrationDate_Gt: DateTime,
    registrationDate_Gte: DateTime,
    registrationDate_Lt: DateTime,
    registrationDate_Lte: DateTime,
    returnStatus: Boolean,
    returnStatus_Isnull: Boolean,
    start: DateTime,
    start_Gt: DateTime,
    start_Gte: DateTime,
    start_Lt: DateTime,
    start_Lte: DateTime
  ): VContractOptimizedNodeConnection!
  "active Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
  isActive: Boolean!
  "staff status. Designates whether the user can log into this admin site."
  isStaff: Boolean!
  "Наличие прав суперпользователя"
  isSuperuser: Boolean!
  "last login"
  lastLogin: DateTime
  "last name"
  lastName: String
  "Ф.И.О."
  name: String
  "Пользователь"
  notificationSet(
    after: String,
    before: String,
    first: Int,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    user_Id: ID,
    user_Id_Isnull: Boolean
  ): VNotificationOptimizedNodeConnection!
  "password"
  password: String
  "Номер телефона"
  phone: String
  "Проекты -> Менеджер по продажам"
  salesManagerOfProjects(after: String, backOfficeManager_Email: String, backOfficeManager_Email_Icontains: String, backOfficeManager_FirstName: String, backOfficeManager_FirstName_Icontains: String, backOfficeManager_Id: ID, backOfficeManager_Id_Isnull: Boolean, backOfficeManager_LastName: String, backOfficeManager_LastName_Icontains: String, backOfficeManager_Name: String, backOfficeManager_Name_Icontains: String, backOfficeManager_Phone: String, backOfficeManager_Phone_Icontains: String, before: String, brand_Id: ID, brand_Id_Isnull: Boolean, brand_Title: String, brand_Title_Icontains: String, client_Id: ID, client_Id_Isnull: Boolean, client_PartnerType_Id: ID, client_PartnerType_Id_Isnull: Boolean, client_PartnerType_Title: String, client_PartnerType_Title_Icontains: String, client_Title: String, client_Title_Icontains: String, client_WorkingSectors_Description: String, client_WorkingSectors_Description_Icontains: String, client_WorkingSectors_Id: ID, client_WorkingSectors_Id_Isnull: Boolean, client_WorkingSectors_Title: String, client_WorkingSectors_Title_Icontains: String, code: String, code_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, numInYear: Int, numInYear_Isnull: Boolean, offset: Int, salesManager_Email: String, salesManager_Email_Icontains: String, salesManager_FirstName: String, salesManager_FirstName_Icontains: String, salesManager_Id: ID, salesManager_Id_Isnull: Boolean, salesManager_LastName: String, salesManager_LastName_Icontains: String, salesManager_Name: String, salesManager_Name_Icontains: String, salesManager_Phone: String, salesManager_Phone_Icontains: String, startDate: DateTime, startDate_Gt: DateTime, startDate_Gte: DateTime, startDate_Lt: DateTime, startDate_Lte: DateTime, title: String, title_Icontains: String): VProjectNodeConnection!
  "Договора -> Менеджер по продажам"
  salesManagerOnContracts(
    after: String,
    before: String,
    code: String,
    code_Icontains: String,
    contractType_Name: String,
    contractType_Name_Icontains: String,
    creator_Name: String,
    creator_Name_Icontains: String,
    end: DateTime,
    end_Gt: DateTime,
    end_Gte: DateTime,
    end_Lt: DateTime,
    end_Lte: DateTime,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    initiator_Name: String,
    initiator_Name_Icontains: String,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partner_Title: String,
    partner_Title_Icontains: String,
    registrationDate: DateTime,
    registrationDate_Gt: DateTime,
    registrationDate_Gte: DateTime,
    registrationDate_Lt: DateTime,
    registrationDate_Lte: DateTime,
    returnStatus: Boolean,
    returnStatus_Isnull: Boolean,
    start: DateTime,
    start_Gt: DateTime,
    start_Gte: DateTime,
    start_Lt: DateTime,
    start_Lte: DateTime
  ): VContractOptimizedNodeConnection!
  "Приложения к договору -> Менеджер по продажам"
  salesManagerOnContractsAppendices(
    after: String,
    before: String,
    code: String,
    code_Icontains: String,
    contractId: ID,
    contractId_Isnull: Boolean,
    contract_Code: String,
    contract_Code_Icontains: String,
    contract_PartnerId: ID,
    contract_PartnerId_Isnull: Boolean,
    contract_Partner_Title: String,
    contract_Partner_Title_Icontains: String,
    contract_SerialNumber: String,
    contract_SerialNumber_Icontains: String,
    createdDate: DateTime,
    createdDate_Gt: DateTime,
    createdDate_Gte: DateTime,
    createdDate_Lt: DateTime,
    createdDate_Lte: DateTime,
    creator: ID,
    creator_Isnull: Boolean,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    periodEndDate: DateTime,
    periodEndDate_Gt: DateTime,
    periodEndDate_Gte: DateTime,
    periodEndDate_Lt: DateTime,
    periodEndDate_Lte: DateTime,
    periodStartDate: DateTime,
    periodStartDate_Gt: DateTime,
    periodStartDate_Gte: DateTime,
    periodStartDate_Lt: DateTime,
    periodStartDate_Lte: DateTime,
    projectId: ID,
    projectId_Isnull: Boolean,
    project_BackOfficeManagerId: ID,
    project_BackOfficeManagerId_Isnull: Boolean,
    project_BackOfficeManager_FirstName: String,
    project_BackOfficeManager_FirstName_Icontains: String,
    project_BackOfficeManager_LastName: String,
    project_BackOfficeManager_LastName_Icontains: String,
    project_BrandId: ID,
    project_BrandId_Isnull: Boolean,
    project_Brand_Title: String,
    project_Brand_Title_Icontains: String,
    project_ClientId: ID,
    project_ClientId_Isnull: Boolean,
    project_Client_Title: String,
    project_Client_Title_Icontains: String,
    project_Code: String,
    project_Code_Icontains: String,
    project_Id: ID,
    project_Id_Isnull: Boolean,
    project_Title: String,
    project_Title_Icontains: String,
    returnStatus: Boolean,
    returnStatus_Isnull: Boolean,
    salesManagerId: ID,
    salesManagerId_Isnull: Boolean,
    salesManager_FirstName: String,
    salesManager_FirstName_Icontains: String,
    salesManager_LastName: String,
    salesManager_LastName_Icontains: String
  ): VAppendixOptimizedNodeConnection!
  "План по продажам на год"
  salesYearPlan: Decimal
  "Индивидуальные права данного пользователя."
  userPermissions(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VPermissionNodeConnection!
  "username, Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
  username: String!
}

type VCustomUserNodeConnection {
  "Contains the nodes in this connection."
  edges: [VCustomUserNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VCustomUserNode` and its cursor."
type VCustomUserNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VCustomUserNode
}

"Дизайн"
type VDesignNode implements Node {
  "Дизайн -> Рекламная компания"
  advertPromoCompany: VAdvertPromoCompanyOptimizedNode
  "Дизайн в архиве"
  archived: Boolean!
  "Связанные дизайны"
  brandsForDesign(
    after: String,
    before: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partners_Id: ID,
    partners_Id_Isnull: Boolean,
    partners_Title: String,
    partners_Title_Icontains: String,
    title: String,
    title_Icontains: String,
    workingSector_Description: String,
    workingSector_Description_Icontains: String
  ): VBrandOptimizedNodeConnection!
  "Монтажи -> Монтируемый Дизайн"
  designMountings(after: String, before: String, crew_Name: String, crew_Name_Icontains: String, endMounting: DateTime, endMounting_Gt: DateTime, endMounting_Gte: DateTime, endMounting_Lt: DateTime, endMounting_Lte: DateTime, first: Int, id: ID, id_Isnull: Boolean, last: Int, mountingDone: Boolean, mountingDone_Isnull: Boolean, mountingTask_Title: String, mountingTask_Title_Icontains: String, offset: Int, reservation_ConstructionSide_Construction_Location_LegalAddress_Address_Isnull: Boolean, reservation_ConstructionSide_Construction_Location_MarketingAddress_Address_Isnull: Boolean, startMounting: DateTime, startMounting_Gt: DateTime, startMounting_Gte: DateTime, startMounting_Lt: DateTime, startMounting_Lte: DateTime, unmountingDone: Boolean, unmountingDone_Isnull: Boolean): VMountingNodeConnection!
  "Монтажи -> Демонтируемый Дизайн"
  designUnmountings(after: String, before: String, crew_Name: String, crew_Name_Icontains: String, endMounting: DateTime, endMounting_Gt: DateTime, endMounting_Gte: DateTime, endMounting_Lt: DateTime, endMounting_Lte: DateTime, first: Int, id: ID, id_Isnull: Boolean, last: Int, mountingDone: Boolean, mountingDone_Isnull: Boolean, mountingTask_Title: String, mountingTask_Title_Icontains: String, offset: Int, reservation_ConstructionSide_Construction_Location_LegalAddress_Address_Isnull: Boolean, reservation_ConstructionSide_Construction_Location_MarketingAddress_Address_Isnull: Boolean, startMounting: DateTime, startMounting_Gt: DateTime, startMounting_Gte: DateTime, startMounting_Lt: DateTime, startMounting_Lte: DateTime, unmountingDone: Boolean, unmountingDone_Isnull: Boolean): VMountingNodeConnection!
  "The ID of the object."
  id: ID!
  "Изображение"
  img: String
  "Текущий дизайн"
  isCurrent: Boolean!
  "Предыдущий дизайн"
  previousDesignMountings(after: String, before: String, crew_Name: String, crew_Name_Icontains: String, endMounting: DateTime, endMounting_Gt: DateTime, endMounting_Gte: DateTime, endMounting_Lt: DateTime, endMounting_Lte: DateTime, first: Int, id: ID, id_Isnull: Boolean, last: Int, mountingDone: Boolean, mountingDone_Isnull: Boolean, mountingTask_Title: String, mountingTask_Title_Icontains: String, offset: Int, reservation_ConstructionSide_Construction_Location_LegalAddress_Address_Isnull: Boolean, reservation_ConstructionSide_Construction_Location_MarketingAddress_Address_Isnull: Boolean, startMounting: DateTime, startMounting_Gt: DateTime, startMounting_Gte: DateTime, startMounting_Lt: DateTime, startMounting_Lte: DateTime, unmountingDone: Boolean, unmountingDone_Isnull: Boolean): VMountingNodeConnection!
  "Дата начала действия дизайна"
  startedAt: DateTime
  "Название дизайна"
  title: String
}

type VDesignNodeConnection {
  "Contains the nodes in this connection."
  edges: [VDesignNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VDesignNode` and its cursor."
type VDesignNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VDesignNode
}

"Район"
type VDistrictNode implements Node {
  "Районы -> Город"
  city: VCityNode!
  "The ID of the object."
  id: ID!
  "Контрагенты -> Район"
  partners(
    advertisers_Id: ID,
    advertisers_Id_Isnull: Boolean,
    advertisers_Title: String,
    advertisers_Title_Icontains: String,
    after: String,
    before: String,
    binNumber: String,
    binNumber_Icontains: String,
    brands_Title: String,
    brands_Title_Icontains: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    isNonrtsOwner: Boolean,
    isNonrtsOwner_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partnerType_Title: String,
    partnerType_Title_Icontains: String,
    title: String,
    title_Icontains: String,
    workingSectors_Title: String,
    workingSectors_Title_Icontains: String
  ): VPartnerOptimizedNodeConnection!
  "Почтовые индексы -> Район"
  postcodes(after: String, before: String, district_City_Title: String, district_City_Title_Icontains: String, district_Id: ID, district_Id_Isnull: Boolean, district_Title: String, district_Title_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, title: String, title_Icontains: String): VPostcodeNodeConnection!
  "Название"
  title: String
}

type VDistrictNodeConnection {
  "Contains the nodes in this connection."
  edges: [VDistrictNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VDistrictNode` and its cursor."
type VDistrictNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VDistrictNode
}

"Должность"
type VEmployeePositionNode implements Node {
  "The ID of the object."
  id: ID!
  "Наименование"
  title: String!
  "Пользователи -> Должность"
  users(after: String, before: String, email: String, email_Icontains: String, employeePosition_Title: String, employeePosition_Title_Icontains: String, first: Int, firstName: String, firstName_Icontains: String, groups_Name: String, groups_Name_Icontains: String, id: ID, id_Isnull: Boolean, isSuperuser: Boolean, isSuperuser_Isnull: Boolean, last: Int, lastName: String, lastName_Icontains: String, name: String, name_Icontains: String, offset: Int, phone: String, phone_Icontains: String, username: String, username_Icontains: String): VCustomUserNodeConnection!
}

type VEmployeePositionNodeConnection {
  "Contains the nodes in this connection."
  edges: [VEmployeePositionNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VEmployeePositionNode` and its cursor."
type VEmployeePositionNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VEmployeePositionNode
}

"Дополнительный расход НОН РТС"
type VEstimateNonRtsNode implements Node {
  "Дополнительные расходы НОН РТС -> Агентская комиссия"
  agencyCommission: VAgencyCommissionNode
  "Дополнительные расходы НОН РТС -> Приложение"
  appendix(
    after: String,
    before: String,
    code: String,
    code_Icontains: String,
    contractId: ID,
    contractId_Isnull: Boolean,
    contract_Code: String,
    contract_Code_Icontains: String,
    contract_PartnerId: ID,
    contract_PartnerId_Isnull: Boolean,
    contract_Partner_Title: String,
    contract_Partner_Title_Icontains: String,
    contract_SerialNumber: String,
    contract_SerialNumber_Icontains: String,
    createdDate: DateTime,
    createdDate_Gt: DateTime,
    createdDate_Gte: DateTime,
    createdDate_Lt: DateTime,
    createdDate_Lte: DateTime,
    creator: ID,
    creator_Isnull: Boolean,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    periodEndDate: DateTime,
    periodEndDate_Gt: DateTime,
    periodEndDate_Gte: DateTime,
    periodEndDate_Lt: DateTime,
    periodEndDate_Lte: DateTime,
    periodStartDate: DateTime,
    periodStartDate_Gt: DateTime,
    periodStartDate_Gte: DateTime,
    periodStartDate_Lt: DateTime,
    periodStartDate_Lte: DateTime,
    projectId: ID,
    projectId_Isnull: Boolean,
    project_BackOfficeManagerId: ID,
    project_BackOfficeManagerId_Isnull: Boolean,
    project_BackOfficeManager_FirstName: String,
    project_BackOfficeManager_FirstName_Icontains: String,
    project_BackOfficeManager_LastName: String,
    project_BackOfficeManager_LastName_Icontains: String,
    project_BrandId: ID,
    project_BrandId_Isnull: Boolean,
    project_Brand_Title: String,
    project_Brand_Title_Icontains: String,
    project_ClientId: ID,
    project_ClientId_Isnull: Boolean,
    project_Client_Title: String,
    project_Client_Title_Icontains: String,
    project_Code: String,
    project_Code_Icontains: String,
    project_Id: ID,
    project_Id_Isnull: Boolean,
    project_Title: String,
    project_Title_Icontains: String,
    returnStatus: Boolean,
    returnStatus_Isnull: Boolean,
    salesManagerId: ID,
    salesManagerId_Isnull: Boolean,
    salesManager_FirstName: String,
    salesManager_FirstName_Icontains: String,
    salesManager_LastName: String,
    salesManager_LastName_Icontains: String
  ): VAppendixOptimizedNodeConnection!
  "Дополнительные расходы НОН РТС -> Город"
  city: VCityNode
  "Данные о НОН РТС стоимости -> Сторона конструкции"
  constructionSide: VConstructionSideOptimizedNode
  "Количество (НОН РТС)"
  count: Int
  "Конец периода"
  endPeriod: DateTime
  "The ID of the object."
  id: ID!
  "Входящая стоимость - Доп. расходы"
  incomingAdditional: Decimal
  "Входящая стоимость - Монтаж"
  incomingInstallation: Decimal
  "Входящая стоимость - Производство"
  incomingManufacturing: Decimal
  "Входящая стоимость - Печать"
  incomingPrinting: Decimal
  "Входящая стоимость - Аренда"
  incomingRent: Decimal
  "Входящая стоимость - Налог"
  incomingTax: Decimal
  "Дополнительные расходы НОН РТС -> Проект"
  project: VProjectNode
  reservation: VReservationOptimizedNode
  "Стоимость продажи - Доп. расходы"
  saleAdditional: Decimal
  "Стоимость продажи - Монтаж"
  saleInstallation: Decimal
  "Стоимость продажи - Производство"
  saleManufacturing: Decimal
  "Стоимость продажи - Печать"
  salePrinting: Decimal
  "Стоимость продажи - Аренда"
  saleRent: Decimal
  "Стоимость продажи - Налог"
  saleTax: Decimal
  "Начало периода"
  startPeriod: DateTime
  "Тип (наружная реклама, ТВ, радио, метро, другое)"
  title: String
}

type VEstimateNonRtsNodeConnection {
  "Contains the nodes in this connection."
  edges: [VEstimateNonRtsNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VEstimateNonRtsNode` and its cursor."
type VEstimateNonRtsNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VEstimateNonRtsNode
}

"Семейство конструкции"
type VFamilyConstructionNode implements Node {
  "The ID of the object."
  id: ID!
  "Местоположения -> Семейство устанавливаемых конструкций в данном месте"
  locations(
    after: String,
    area: Float,
    areaAct: String,
    areaActDate: DateTime,
    areaActDate_Gt: DateTime,
    areaActDate_Gte: DateTime,
    areaActDate_Lt: DateTime,
    areaActDate_Lte: DateTime,
    areaAct_Icontains: String,
    area_Gt: Float,
    area_Gte: Float,
    area_Lt: Float,
    area_Lte: Float,
    before: String,
    cadastralNumber: String,
    cadastralNumber_Icontains: String,
    comment: String,
    comment_Icontains: String,
    constructionsCount: Float,
    constructionsCount_Gt: Float,
    constructionsCount_Lt: Float,
    familyConstruction_Id: ID,
    familyConstruction_Id_Isnull: Boolean,
    familyConstruction_Title: String,
    familyConstruction_Title_Icontains: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    legalAddress_Address: String,
    legalAddress_Address_Icontains: String,
    marketingAddress_Address: String,
    marketingAddress_Address_Icontains: String,
    offset: Int,
    "Порядок"
    orderBy: String,
    postcode_District_City_Country_Title: String,
    postcode_District_City_Country_Title_Icontains: String,
    postcode_District_City_Title: String,
    postcode_District_City_Title_Icontains: String,
    postcode_District_Title: String,
    postcode_District_Title_Icontains: String,
    postcode_Title: String,
    postcode_Title_Icontains: String,
    purposeLocation_Title: String,
    purposeLocation_Title_Icontains: String,
    registrationStatusLocation_Title: String,
    registrationStatusLocation_Title_Icontains: String,
    rentContractEnd: DateTime,
    rentContractEnd_Gt: DateTime,
    rentContractEnd_Gte: DateTime,
    rentContractEnd_Lt: DateTime,
    rentContractEnd_Lte: DateTime,
    rentContractNumber: String,
    rentContractNumber_Isnull: Boolean,
    rentContractStart: DateTime,
    rentContractStart_Gt: DateTime,
    rentContractStart_Gte: DateTime,
    rentContractStart_Lt: DateTime,
    rentContractStart_Lte: DateTime,
    resolutionNumber: String,
    resolutionNumber_Icontains: String
  ): VLocationOptimizedNodeConnection!
  "Наименование"
  title: String
  "Подсемейства -> Семейство конструкции"
  underfamilies(after: String, before: String, family_Id: ID, family_Id_Isnull: Boolean, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, title: String, title_Icontains: String): VUnderFamilyConstructionNodeConnection!
}

type VFamilyConstructionNodeConnection {
  "Contains the nodes in this connection."
  edges: [VFamilyConstructionNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VFamilyConstructionNode` and its cursor."
type VFamilyConstructionNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VFamilyConstructionNode
}

"Формат"
type VFormatNode implements Node {
  "Код формата"
  code: String
  "Коды форматов конструкций -> Форматы"
  constructionsForFormat(after: String, before: String, count: Int, count_Gt: Int, count_Gte: Int, count_Lt: Int, count_Lte: Int, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VConstructionFormatsNodeConnection!
  "The ID of the object."
  id: ID!
  "Форматы -> Модель конструкции"
  model: VModelConstructionNode!
  "Прайсовая стоимость -> Формат"
  placementPrices(after: String, before: String, city: ID, city_Isnull: Boolean, first: Int, format: ID, format_Isnull: Boolean, id: ID, id_Isnull: Boolean, last: Int, offset: Int, period: Int, period_Isnull: Boolean): VPlacementPriceNodeConnection!
  "Стророны -> Формат"
  sides(after: String, before: String, first: Int, format_Id: ID, format_Id_Isnull: Boolean, format_Model_Id: ID, format_Model_Id_Isnull: Boolean, format_Model_Underfamily_Family_Id: ID, format_Model_Underfamily_Family_Id_Isnull: Boolean, format_Model_Underfamily_Id: ID, format_Model_Underfamily_Id_Isnull: Boolean, format_Title: String, format_Title_Icontains: String, id: ID, id_Isnull: Boolean, last: Int, offset: Int, size: String, size_Icontains: String, title: String, title_Icontains: String): VSideNodeConnection!
  "Статические, конфигурационные доп. расходы -> Формат"
  staticAdditionalCosts(after: String, before: String, category: String, category_Isnull: Boolean, city: ID, city_Isnull: Boolean, first: Int, format: ID, format_Isnull: Boolean, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VStaticAdditionalCostsNodeConnection!
  "Наименование формата"
  title: String
}

type VFormatNodeConnection {
  "Contains the nodes in this connection."
  edges: [VFormatNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VFormatNode` and its cursor."
type VFormatNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VFormatNode
}

"группа"
type VGroupNode implements Node {
  "Пользователи <-> Группы"
  customUser(after: String, before: String, email: String, email_Icontains: String, employeePosition_Title: String, employeePosition_Title_Icontains: String, first: Int, firstName: String, firstName_Icontains: String, groups_Name: String, groups_Name_Icontains: String, id: ID, id_Isnull: Boolean, isSuperuser: Boolean, isSuperuser_Isnull: Boolean, last: Int, lastName: String, lastName_Icontains: String, name: String, name_Icontains: String, offset: Int, phone: String, phone_Icontains: String, username: String, username_Icontains: String): VCustomUserNodeConnection!
  "The ID of the object."
  id: ID!
  name: String!
  permissions(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VPermissionNodeConnection!
}

type VGroupNodeConnection {
  "Contains the nodes in this connection."
  edges: [VGroupNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VGroupNode` and its cursor."
type VGroupNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VGroupNode
}

"Счет"
type VInvoiceNode implements Node {
  "Счета -> Приложение к договору"
  appendix: VAppendixOptimizedNode
  "Выставление АВР"
  avr: Boolean!
  "Счета -> Договор"
  contract: VContractOptimizedNode
  "Способ оплаты клиентом"
  customerPaymentMethod: String
  "The ID of the object."
  id: ID!
  "Счета -> Контрагент, на котрого выставляется счет"
  partner: VPartnerOptimizedNode
  "Оплата не позднее"
  paymentLastDate: DateTime
  "Счета -> Проект"
  project: VProjectNode
  "Сумма без НДС"
  sumWithoutNds: Decimal
  "Общая сумма"
  wholeSum: Decimal
}

type VInvoiceNodeConnection {
  "Contains the nodes in this connection."
  edges: [VInvoiceNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VInvoiceNode` and its cursor."
type VInvoiceNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VInvoiceNode
}

"Местоположение"
type VLocationNode implements Node {
  "Площадь (га)"
  area: Decimal
  "Номер гос акта на землю"
  areaAct: String
  "Дата гос акта на землю"
  areaActDate: DateTime
  "Кадастровый номер"
  cadastralNumber: String
  "Комментарий"
  comment: String
  constructionRowIdx: Int
  "Конструкции -> Местоположение"
  constructions(
    active: Boolean,
    active_Isnull: Boolean,
    after: String,
    before: String,
    buhInventNumber: String,
    buhInventNumber_Icontains: String,
    coordinates: String,
    coordinates_Isnull: Boolean,
    createdAt: DateTime,
    createdAt_Gt: DateTime,
    createdAt_Gte: DateTime,
    createdAt_Lt: DateTime,
    createdAt_Lte: DateTime,
    crew: ID,
    crew_Isnull: Boolean,
    first: Int,
    format_Title: String,
    id: ID,
    id_Isnull: Boolean,
    isNonrts: Boolean,
    isNonrts_Isnull: Boolean,
    last: Int,
    locationId_Isnull: Boolean,
    location_Area: Float,
    location_Area_Gt: Float,
    location_Area_Gte: Float,
    location_Area_Lt: Float,
    location_Area_Lte: Float,
    location_HasArea: Boolean,
    location_HasArea_Isnull: Boolean,
    location_LegalAddress_Address: String,
    location_LegalAddress_Address_Icontains: String,
    location_MarketingAddress_Address: String,
    location_MarketingAddress_Address_Icontains: String,
    location_Postcode_District_City_Country_Title: String,
    location_Postcode_District_City_Country_Title_Icontains: String,
    location_Postcode_District_City_Title: String,
    location_Postcode_District_City_Title_Icontains: String,
    location_Postcode_District_Title: String,
    location_Postcode_District_Title_Icontains: String,
    location_Postcode_Title: String,
    location_Postcode_Title_Icontains: String,
    model_Title: String,
    model_Title_Icontains: String,
    model_Underfamily_Family_Title: String,
    model_Underfamily_Family_Title_Icontains: String,
    model_Underfamily_Title: String,
    model_Underfamily_Title_Icontains: String,
    obstruction_Title: String,
    obstruction_Title_Icontains: String,
    offset: Int,
    "Порядок"
    orderBy: String,
    statusConnection: Boolean,
    statusConnection_Isnull: Boolean,
    techInventNumber: String,
    techInventNumber_Icontains: String,
    techPhoneConstruction: String,
    techPhoneConstruction_Icontains: String,
    updatedAt: DateTime,
    updatedAt_Gt: DateTime,
    updatedAt_Gte: DateTime,
    updatedAt_Lt: DateTime,
    updatedAt_Lte: DateTime
  ): VConstructionOptimizedNodeConnection!
  constructionsCount: Int
  "Дата создания"
  createdAt: DateTime
  "Правоустанавливающие документы на земельный участок"
  document: String
  "Местоположения -> Семейство устанавливаемых конструкций в данном месте"
  familyConstruction: VFamilyConstructionNode
  "Наличие земли"
  hasArea: Boolean!
  "The ID of the object."
  id: ID!
  "В архиве"
  isArchive: Boolean!
  "Местоположение конструкций, не принадлежащих РТС"
  isNonrtsLocation: Boolean!
  "Местоположения -> Юридический адрес"
  legalAddress: VAddressesNode
  "Местоположения -> Маркетинговый адрес"
  marketingAddress: VAddressesNode
  "Местоположения -> Почтовый индекс"
  postcode: VPostcodeNode
  "Местоположения -> Целевое назначение местоположения"
  purposeLocation: VPurposeLocationNode
  "Местоположения -> Статус оформления земельного участка"
  registrationStatusLocation: VRegistrationStatusLocationNode
  "Регистрация договора"
  rentContractCreatedAt: DateTime
  "Дата окончания договора"
  rentContractEnd: DateTime
  "Номер договора"
  rentContractNumber: String
  "Дата начала договора"
  rentContractStart: DateTime
  "Номер постановления от Акимата"
  resolutionNumber: String
  "Дата постановления от Акимата"
  resolutionNumberDate: DateTime
  rowIdx: Int
  "Дата обновления"
  updatedAt: DateTime
}

type VLocationNodeConnection {
  "Contains the nodes in this connection."
  edges: [VLocationNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VLocationNode` and its cursor."
type VLocationNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VLocationNode
}

"Местоположение"
type VLocationOptimizedNode implements Node {
  "Площадь (га)"
  area: Decimal
  "Номер гос акта на землю"
  areaAct: String
  "Дата гос акта на землю"
  areaActDate: DateTime
  "Кадастровый номер"
  cadastralNumber: String
  "Комментарий"
  comment: String
  constructionRowIdx: Int
  "Конструкции -> Местоположение"
  constructions(
    active: Boolean,
    active_Isnull: Boolean,
    after: String,
    before: String,
    buhInventNumber: String,
    buhInventNumber_Icontains: String,
    coordinates: String,
    coordinates_Isnull: Boolean,
    createdAt: DateTime,
    createdAt_Gt: DateTime,
    createdAt_Gte: DateTime,
    createdAt_Lt: DateTime,
    createdAt_Lte: DateTime,
    crew: ID,
    crew_Isnull: Boolean,
    first: Int,
    format_Title: String,
    id: ID,
    id_Isnull: Boolean,
    isNonrts: Boolean,
    isNonrts_Isnull: Boolean,
    last: Int,
    locationId_Isnull: Boolean,
    location_Area: Float,
    location_Area_Gt: Float,
    location_Area_Gte: Float,
    location_Area_Lt: Float,
    location_Area_Lte: Float,
    location_HasArea: Boolean,
    location_HasArea_Isnull: Boolean,
    location_LegalAddress_Address: String,
    location_LegalAddress_Address_Icontains: String,
    location_MarketingAddress_Address: String,
    location_MarketingAddress_Address_Icontains: String,
    location_Postcode_District_City_Country_Title: String,
    location_Postcode_District_City_Country_Title_Icontains: String,
    location_Postcode_District_City_Title: String,
    location_Postcode_District_City_Title_Icontains: String,
    location_Postcode_District_Title: String,
    location_Postcode_District_Title_Icontains: String,
    location_Postcode_Title: String,
    location_Postcode_Title_Icontains: String,
    model_Title: String,
    model_Title_Icontains: String,
    model_Underfamily_Family_Title: String,
    model_Underfamily_Family_Title_Icontains: String,
    model_Underfamily_Title: String,
    model_Underfamily_Title_Icontains: String,
    obstruction_Title: String,
    obstruction_Title_Icontains: String,
    offset: Int,
    "Порядок"
    orderBy: String,
    statusConnection: Boolean,
    statusConnection_Isnull: Boolean,
    techInventNumber: String,
    techInventNumber_Icontains: String,
    techPhoneConstruction: String,
    techPhoneConstruction_Icontains: String,
    updatedAt: DateTime,
    updatedAt_Gt: DateTime,
    updatedAt_Gte: DateTime,
    updatedAt_Lt: DateTime,
    updatedAt_Lte: DateTime
  ): VConstructionOptimizedNodeConnection!
  constructionsCount: Int
  "Дата создания"
  createdAt: DateTime
  "Правоустанавливающие документы на земельный участок"
  document: String
  "Местоположения -> Семейство устанавливаемых конструкций в данном месте"
  familyConstruction: VFamilyConstructionNode
  "Наличие земли"
  hasArea: Boolean!
  "The ID of the object."
  id: ID!
  "В архиве"
  isArchive: Boolean!
  "Местоположение конструкций, не принадлежащих РТС"
  isNonrtsLocation: Boolean!
  "Местоположения -> Юридический адрес"
  legalAddress: VAddressesNode
  "Местоположения -> Маркетинговый адрес"
  marketingAddress: VAddressesNode
  "Местоположения -> Почтовый индекс"
  postcode: VPostcodeNode
  "Местоположения -> Целевое назначение местоположения"
  purposeLocation: VPurposeLocationNode
  "Местоположения -> Статус оформления земельного участка"
  registrationStatusLocation: VRegistrationStatusLocationNode
  "Регистрация договора"
  rentContractCreatedAt: DateTime
  "Дата окончания договора"
  rentContractEnd: DateTime
  "Номер договора"
  rentContractNumber: String
  "Дата начала договора"
  rentContractStart: DateTime
  "Номер постановления от Акимата"
  resolutionNumber: String
  "Дата постановления от Акимата"
  resolutionNumberDate: DateTime
  rowIdx: Int
  "Дата обновления"
  updatedAt: DateTime
}

type VLocationOptimizedNodeConnection {
  "Contains the nodes in this connection."
  edges: [VLocationOptimizedNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VLocationOptimizedNode` and its cursor."
type VLocationOptimizedNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VLocationOptimizedNode
}

"Модель конструкции"
type VModelConstructionNode implements Node {
  "Конструкции -> Модель конструкции"
  constructions(
    active: Boolean,
    active_Isnull: Boolean,
    after: String,
    before: String,
    buhInventNumber: String,
    buhInventNumber_Icontains: String,
    coordinates: String,
    coordinates_Isnull: Boolean,
    createdAt: DateTime,
    createdAt_Gt: DateTime,
    createdAt_Gte: DateTime,
    createdAt_Lt: DateTime,
    createdAt_Lte: DateTime,
    crew: ID,
    crew_Isnull: Boolean,
    first: Int,
    format_Title: String,
    id: ID,
    id_Isnull: Boolean,
    isNonrts: Boolean,
    isNonrts_Isnull: Boolean,
    last: Int,
    locationId_Isnull: Boolean,
    location_Area: Float,
    location_Area_Gt: Float,
    location_Area_Gte: Float,
    location_Area_Lt: Float,
    location_Area_Lte: Float,
    location_HasArea: Boolean,
    location_HasArea_Isnull: Boolean,
    location_LegalAddress_Address: String,
    location_LegalAddress_Address_Icontains: String,
    location_MarketingAddress_Address: String,
    location_MarketingAddress_Address_Icontains: String,
    location_Postcode_District_City_Country_Title: String,
    location_Postcode_District_City_Country_Title_Icontains: String,
    location_Postcode_District_City_Title: String,
    location_Postcode_District_City_Title_Icontains: String,
    location_Postcode_District_Title: String,
    location_Postcode_District_Title_Icontains: String,
    location_Postcode_Title: String,
    location_Postcode_Title_Icontains: String,
    model_Title: String,
    model_Title_Icontains: String,
    model_Underfamily_Family_Title: String,
    model_Underfamily_Family_Title_Icontains: String,
    model_Underfamily_Title: String,
    model_Underfamily_Title_Icontains: String,
    obstruction_Title: String,
    obstruction_Title_Icontains: String,
    offset: Int,
    "Порядок"
    orderBy: String,
    statusConnection: Boolean,
    statusConnection_Isnull: Boolean,
    techInventNumber: String,
    techInventNumber_Icontains: String,
    techPhoneConstruction: String,
    techPhoneConstruction_Icontains: String,
    updatedAt: DateTime,
    updatedAt_Gt: DateTime,
    updatedAt_Gte: DateTime,
    updatedAt_Lt: DateTime,
    updatedAt_Lte: DateTime
  ): VConstructionOptimizedNodeConnection!
  "Форматы -> Модель конструкции"
  formats(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, model_Id: ID, model_Id_Isnull: Boolean, model_Title: String, model_Title_Icontains: String, model_Underfamily_Family_Id: ID, model_Underfamily_Family_Id_Isnull: Boolean, model_Underfamily_Family_Title: String, model_Underfamily_Family_Title_Icontains: String, model_Underfamily_Id: ID, model_Underfamily_Id_Isnull: Boolean, model_Underfamily_Title: String, model_Underfamily_Title_Icontains: String, offset: Int, title: String, title_Icontains: String): VFormatNodeConnection!
  "The ID of the object."
  id: ID!
  title: String
  "Модели -> Подсемейство конструкции"
  underfamily: VUnderFamilyConstructionNode!
}

type VModelConstructionNodeConnection {
  "Contains the nodes in this connection."
  edges: [VModelConstructionNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VModelConstructionNode` and its cursor."
type VModelConstructionNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VModelConstructionNode
}

"Монтаж"
type VMountingNode implements Node {
  "В архиве"
  archived: Boolean!
  "Комментарий"
  comment: String
  "Монтажи -> конструкци"
  construction: VConstructionOptimizedNode
  "Монтажи -> стороны конструкций"
  constructionSide: VConstructionSideOptimizedNode
  "Монтажи -> Экипаж"
  crew: VCrewOptimizedNode
  "Монтажи -> Монтируемый Дизайн"
  design: VDesignNode
  "Выгружено ранее"
  downloadedEarly: DateTime
  "Дата демонтажа"
  endMounting: DateTime
  "The ID of the object."
  id: ID!
  "Монтаж выполнен"
  mountingDone: Boolean!
  "Уровень приоритетности"
  mountingRange: MountingMountingRange!
  "Монтажи -> Ремонтно-монтажная работа"
  mountingTask: VMountingTaskNode
  "Монтажная работа -> фотоотчет о монтаже"
  photos(after: String, before: String, date: DateTime, date_Gt: DateTime, date_Gte: DateTime, date_Lt: DateTime, date_Lte: DateTime, first: Int, id: ID, id_Isnull: Boolean, last: Int, num: String, num_Icontains: String, offset: Int): VMountingPhotoNodeConnection!
  "Предыдущий дизайн"
  previousDesign: VDesignNode
  "Монтажи -> Бронирование"
  reservation: VReservationOptimizedNode
  "Дата монтажа"
  startMounting: DateTime
  "Монтажи -> Демонтируемый Дизайн"
  unmountingDesign: VDesignNode
  "Демонтаж выполнен"
  unmountingDone: Boolean!
}

type VMountingNodeConnection {
  "Contains the nodes in this connection."
  edges: [VMountingNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VMountingNode` and its cursor."
type VMountingNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VMountingNode
}

"Фотоотчет о монтаже"
type VMountingPhotoNode implements Node {
  "Дата фотоотчета о монтаже"
  date: DateTime
  "The ID of the object."
  id: ID!
  "Монтажная работа -> фотоотчет о монтаже"
  mounting: VMountingNode!
  "Номер фотографии о монтаже"
  num: String
  "Фотоотчет о монтаже"
  photo: String
}

type VMountingPhotoNodeConnection {
  "Contains the nodes in this connection."
  edges: [VMountingPhotoNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VMountingPhotoNode` and its cursor."
type VMountingPhotoNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VMountingPhotoNode
}

"Ремонтно-монтажная работа"
type VMountingTaskNode implements Node {
  "The ID of the object."
  id: ID!
  "Монтажи -> Ремонтно-монтажная работа"
  mountings(after: String, before: String, crew_Name: String, crew_Name_Icontains: String, endMounting: DateTime, endMounting_Gt: DateTime, endMounting_Gte: DateTime, endMounting_Lt: DateTime, endMounting_Lte: DateTime, first: Int, id: ID, id_Isnull: Boolean, last: Int, mountingDone: Boolean, mountingDone_Isnull: Boolean, mountingTask_Title: String, mountingTask_Title_Icontains: String, offset: Int, reservation_ConstructionSide_Construction_Location_LegalAddress_Address_Isnull: Boolean, reservation_ConstructionSide_Construction_Location_MarketingAddress_Address_Isnull: Boolean, startMounting: DateTime, startMounting_Gt: DateTime, startMounting_Gte: DateTime, startMounting_Lt: DateTime, startMounting_Lte: DateTime, unmountingDone: Boolean, unmountingDone_Isnull: Boolean): VMountingNodeConnection!
  "Наименование"
  title: String
}

type VMountingTaskNodeConnection {
  "Contains the nodes in this connection."
  edges: [VMountingTaskNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VMountingTaskNode` and its cursor."
type VMountingTaskNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VMountingTaskNode
}

"Уведомление"
type VNotificationNode implements Node {
  constructionnotification: VConstructionNotificationOptimizedNode
  "Дата создания"
  createdAt: DateTime
  "The ID of the object."
  id: ID!
  "Прочитано"
  read: Boolean!
  "Тема"
  topic: String!
  "Дата редактирования"
  updatedAt: DateTime
  "Пользователь"
  user: VCustomUserNode
}

type VNotificationNodeConnection {
  "Contains the nodes in this connection."
  edges: [VNotificationNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VNotificationNode` and its cursor."
type VNotificationNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VNotificationNode
}

"Уведомление"
type VNotificationOptimizedNode implements Node {
  constructionnotification: VConstructionNotificationOptimizedNode
  "Дата создания"
  createdAt: DateTime
  "The ID of the object."
  id: ID!
  "Прочитано"
  read: Boolean!
  "Тема"
  topic: String!
  "Дата редактирования"
  updatedAt: DateTime
  "Пользователь"
  user: VCustomUserNode
}

type VNotificationOptimizedNodeConnection {
  "Contains the nodes in this connection."
  edges: [VNotificationOptimizedNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VNotificationOptimizedNode` and its cursor."
type VNotificationOptimizedNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VNotificationOptimizedNode
}

"Помеха"
type VObstructionNode implements Node {
  "Конструкции -> Помеха"
  constructions(
    active: Boolean,
    active_Isnull: Boolean,
    after: String,
    before: String,
    buhInventNumber: String,
    buhInventNumber_Icontains: String,
    coordinates: String,
    coordinates_Isnull: Boolean,
    createdAt: DateTime,
    createdAt_Gt: DateTime,
    createdAt_Gte: DateTime,
    createdAt_Lt: DateTime,
    createdAt_Lte: DateTime,
    crew: ID,
    crew_Isnull: Boolean,
    first: Int,
    format_Title: String,
    id: ID,
    id_Isnull: Boolean,
    isNonrts: Boolean,
    isNonrts_Isnull: Boolean,
    last: Int,
    locationId_Isnull: Boolean,
    location_Area: Float,
    location_Area_Gt: Float,
    location_Area_Gte: Float,
    location_Area_Lt: Float,
    location_Area_Lte: Float,
    location_HasArea: Boolean,
    location_HasArea_Isnull: Boolean,
    location_LegalAddress_Address: String,
    location_LegalAddress_Address_Icontains: String,
    location_MarketingAddress_Address: String,
    location_MarketingAddress_Address_Icontains: String,
    location_Postcode_District_City_Country_Title: String,
    location_Postcode_District_City_Country_Title_Icontains: String,
    location_Postcode_District_City_Title: String,
    location_Postcode_District_City_Title_Icontains: String,
    location_Postcode_District_Title: String,
    location_Postcode_District_Title_Icontains: String,
    location_Postcode_Title: String,
    location_Postcode_Title_Icontains: String,
    model_Title: String,
    model_Title_Icontains: String,
    model_Underfamily_Family_Title: String,
    model_Underfamily_Family_Title_Icontains: String,
    model_Underfamily_Title: String,
    model_Underfamily_Title_Icontains: String,
    obstruction_Title: String,
    obstruction_Title_Icontains: String,
    offset: Int,
    "Порядок"
    orderBy: String,
    statusConnection: Boolean,
    statusConnection_Isnull: Boolean,
    techInventNumber: String,
    techInventNumber_Icontains: String,
    techPhoneConstruction: String,
    techPhoneConstruction_Icontains: String,
    updatedAt: DateTime,
    updatedAt_Gt: DateTime,
    updatedAt_Gte: DateTime,
    updatedAt_Lt: DateTime,
    updatedAt_Lte: DateTime
  ): VConstructionOptimizedNodeConnection!
  "The ID of the object."
  id: ID!
  "Помеха"
  title: String!
}

type VObstructionNodeConnection {
  "Contains the nodes in this connection."
  edges: [VObstructionNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VObstructionNode` and its cursor."
type VObstructionNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VObstructionNode
}

"Пакет"
type VPackageNode implements Node {
  "Пакет -> Город"
  city: VCityNode
  "Стророны конструкции -> Пакет"
  constructionSides(advertisingSide_Code: String, advertisingSide_Code_Isnull: Boolean, advertisingSide_Side_Code: String, advertisingSide_Side_Code_Isnull: Boolean, advertisingSide_Side_Format_Code: String, advertisingSide_Side_Format_Code_Isnull: Boolean, advertisingSide_Side_Format_Model_Title: String, advertisingSide_Side_Format_Model_Title_Icontains: String, advertisingSide_Side_Format_Model_Underfamily_Family_Id: ID, advertisingSide_Side_Format_Model_Underfamily_Family_Id_Isnull: Boolean, advertisingSide_Side_Format_Model_Underfamily_Family_Title: String, advertisingSide_Side_Format_Model_Underfamily_Family_Title_Icontains: String, advertisingSide_Side_Format_Model_Underfamily_Title: String, advertisingSide_Side_Format_Model_Underfamily_Title_Icontains: String, advertisingSide_Side_Format_Title: String, advertisingSide_Side_Format_Title_Icontains: String, advertisingSide_Side_Size: String, advertisingSide_Side_Size_Icontains: String, advertisingSide_Side_Title: String, advertisingSide_Side_Title_Icontains: String, after: String, before: String, constructionId: ID, constructionId_Isnull: Boolean, construction_Location_LegalAddress_Address: String, construction_Location_LegalAddress_Address_Icontains: String, construction_Location_MarketingAddress_Address: String, construction_Location_MarketingAddress_Address_Icontains: String, construction_Location_Postcode_District_City_Id: ID, construction_Location_Postcode_District_City_Id_Isnull: Boolean, construction_Location_Postcode_District_City_Title: String, construction_Location_Postcode_District_City_Title_Icontains: String, construction_Location_Postcode_District_Id: ID, construction_Location_Postcode_District_Id_Isnull: Boolean, construction_Location_Postcode_District_Title: String, construction_Location_Postcode_District_Title_Icontains: String, construction_Location_Postcode_Title: String, construction_Location_Postcode_Title_Isnull: Boolean, construction_NonrtsOwner_Id: ID, construction_NonrtsOwner_Id_Isnull: Boolean, construction_NonrtsOwner_Title: String, construction_NonrtsOwner_Title_Icontains: String, construction_NumInDistrict: Int, construction_NumInDistrict_Gt: Int, construction_NumInDistrict_Gte: Int, construction_NumInDistrict_Lt: Int, construction_NumInDistrict_Lte: Int, construction_StatusConnection: Boolean, construction_StatusConnection_Isnull: Boolean, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, reservation_DateFrom: DateTime, reservation_DateFrom_Gt: DateTime, reservation_DateFrom_Gte: DateTime, reservation_DateFrom_Lt: DateTime, reservation_DateFrom_Lte: DateTime, reservation_DateTo: DateTime, reservation_DateTo_Gt: DateTime, reservation_DateTo_Gte: DateTime, reservation_DateTo_Lt: DateTime, reservation_DateTo_Lte: DateTime, reservation_ReservationType_Title: String, reservation_ReservationType_Title_Icontains: String, reservation_ReservationType_Title_Iregex: String, reservation_ReservationType_Title_Regex: String): VConstructionSideOptimizedNodeConnection!
  "The ID of the object."
  id: ID!
  "Месяц"
  month: PackageMonth!
  "Бронирования Пакета -> Пакет"
  reservationPackages(after: String, before: String, dateFrom: DateTime, dateFrom_Gt: DateTime, dateFrom_Gte: DateTime, dateFrom_Lt: DateTime, dateFrom_Lte: DateTime, dateTo: DateTime, dateTo_Gt: DateTime, dateTo_Gte: DateTime, dateTo_Lt: DateTime, dateTo_Lte: DateTime, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VReservationPackageNodeConnection!
  "Наименование пакета"
  title: String
  "Год"
  year: Int!
}

type VPackageNodeConnection {
  "Contains the nodes in this connection."
  edges: [VPackageNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VPackageNode` and its cursor."
type VPackageNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VPackageNode
}

"Контрагент"
type VPartnerNode implements Node {
  "Контрагенты -> Фактический адрес"
  actualAddress: VAddressesNode
  "Контрагенты -> Фактический адрес - Почтовый индекс"
  actualAddressPostcode: VPostcodeNode
  "Контрагенты <-> Связанные рекламодатели"
  advertiserClients(
    advertisers_Id: ID,
    advertisers_Id_Isnull: Boolean,
    advertisers_Title: String,
    advertisers_Title_Icontains: String,
    after: String,
    before: String,
    binNumber: String,
    binNumber_Icontains: String,
    brands_Title: String,
    brands_Title_Icontains: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    isNonrtsOwner: Boolean,
    isNonrtsOwner_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partnerType_Title: String,
    partnerType_Title_Icontains: String,
    title: String,
    title_Icontains: String,
    workingSectors_Title: String,
    workingSectors_Title_Icontains: String
  ): VPartnerOptimizedNodeConnection!
  "Контрагенты <-> Связанные рекламодатели"
  advertisers(
    advertisers_Id: ID,
    advertisers_Id_Isnull: Boolean,
    advertisers_Title: String,
    advertisers_Title_Icontains: String,
    after: String,
    before: String,
    binNumber: String,
    binNumber_Icontains: String,
    brands_Title: String,
    brands_Title_Icontains: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    isNonrtsOwner: Boolean,
    isNonrtsOwner_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partnerType_Title: String,
    partnerType_Title_Icontains: String,
    title: String,
    title_Icontains: String,
    workingSectors_Title: String,
    workingSectors_Title_Icontains: String
  ): VPartnerOptimizedNodeConnection!
  "Контрагенты -> Агентская комиссия"
  agencyCommission: VAgencyCommissionNode
  "Агент для перечисления агентской коммиссии"
  agencycommissionSet(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VAgencyCommissionNodeConnection!
  "Банк получателя"
  bankRecipient: String
  "БИК"
  bik: String
  "БИН"
  binNumber: String
  "Контрагенты <-> Связанные бренды"
  brands(
    after: String,
    before: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partners_Id: ID,
    partners_Id_Isnull: Boolean,
    partners_Title: String,
    partners_Title_Icontains: String,
    title: String,
    title_Icontains: String,
    workingSector_Description: String,
    workingSector_Description_Icontains: String
  ): VBrandOptimizedNodeConnection!
  brandsList: String
  "Расчетный счет"
  checkingAccount: String
  "Контрагенты -> Тип клиента"
  clientType: VClientTypeNode
  "Комментарий"
  comment: String
  "Контактные лица -> Контрагент"
  contactPersons(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VContactPersonNodeConnection!
  "Договора -> Контрагент"
  contracts(
    after: String,
    before: String,
    code: String,
    code_Icontains: String,
    contractType_Name: String,
    contractType_Name_Icontains: String,
    creator_Name: String,
    creator_Name_Icontains: String,
    end: DateTime,
    end_Gt: DateTime,
    end_Gte: DateTime,
    end_Lt: DateTime,
    end_Lte: DateTime,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    initiator_Name: String,
    initiator_Name_Icontains: String,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partner_Title: String,
    partner_Title_Icontains: String,
    registrationDate: DateTime,
    registrationDate_Gt: DateTime,
    registrationDate_Gte: DateTime,
    registrationDate_Lt: DateTime,
    registrationDate_Lte: DateTime,
    returnStatus: Boolean,
    returnStatus_Isnull: Boolean,
    start: DateTime,
    start_Gt: DateTime,
    start_Gte: DateTime,
    start_Lt: DateTime,
    start_Lte: DateTime
  ): VContractOptimizedNodeConnection!
  "Дата создания"
  createdAt: DateTime
  "Процент скидки на клиента"
  discountClientPercent: Decimal
  "Процент скидки на налог"
  discountNalogPercent: Decimal
  "Процент скидки по прайсу"
  discountPricePercent: Decimal
  "Контрагенты -> Район"
  district: VDistrictNode
  "Почтовый адрес"
  email: String
  "Иностранный контрагент"
  foreignPartner: Boolean!
  "The ID of the object."
  id: ID!
  "ИИК"
  iik: String
  "Счета -> Контрагент, на котрого выставляется счет"
  invoices(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VInvoiceNodeConnection!
  "Является владельцем конструкций НОН РТС"
  isNonrtsOwner: Boolean
  "КБЕ"
  kbe: String
  "Контрагенты -> Юридический адрес"
  legalAddress: VAddressesNode
  "Контрагенты -> Юридический адрес - Почтовый индекс"
  legalAddressPostcode: VPostcodeNode
  "Контрагенты -> Юридическое лицо, получатель агентской комиссси"
  legalEntityPayeeAgencyComission: VPartnerOptimizedNode
  "Номер свидетельства о постановке на НДС"
  ndsCertificateNumber: String
  "Конструкции -> Владелец НОН РТС"
  ownedNonrtsConstructions(
    active: Boolean,
    active_Isnull: Boolean,
    after: String,
    before: String,
    buhInventNumber: String,
    buhInventNumber_Icontains: String,
    coordinates: String,
    coordinates_Isnull: Boolean,
    createdAt: DateTime,
    createdAt_Gt: DateTime,
    createdAt_Gte: DateTime,
    createdAt_Lt: DateTime,
    createdAt_Lte: DateTime,
    crew: ID,
    crew_Isnull: Boolean,
    first: Int,
    format_Title: String,
    id: ID,
    id_Isnull: Boolean,
    isNonrts: Boolean,
    isNonrts_Isnull: Boolean,
    last: Int,
    locationId_Isnull: Boolean,
    location_Area: Float,
    location_Area_Gt: Float,
    location_Area_Gte: Float,
    location_Area_Lt: Float,
    location_Area_Lte: Float,
    location_HasArea: Boolean,
    location_HasArea_Isnull: Boolean,
    location_LegalAddress_Address: String,
    location_LegalAddress_Address_Icontains: String,
    location_MarketingAddress_Address: String,
    location_MarketingAddress_Address_Icontains: String,
    location_Postcode_District_City_Country_Title: String,
    location_Postcode_District_City_Country_Title_Icontains: String,
    location_Postcode_District_City_Title: String,
    location_Postcode_District_City_Title_Icontains: String,
    location_Postcode_District_Title: String,
    location_Postcode_District_Title_Icontains: String,
    location_Postcode_Title: String,
    location_Postcode_Title_Icontains: String,
    model_Title: String,
    model_Title_Icontains: String,
    model_Underfamily_Family_Title: String,
    model_Underfamily_Family_Title_Icontains: String,
    model_Underfamily_Title: String,
    model_Underfamily_Title_Icontains: String,
    obstruction_Title: String,
    obstruction_Title_Icontains: String,
    offset: Int,
    "Порядок"
    orderBy: String,
    statusConnection: Boolean,
    statusConnection_Isnull: Boolean,
    techInventNumber: String,
    techInventNumber_Icontains: String,
    techPhoneConstruction: String,
    techPhoneConstruction_Icontains: String,
    updatedAt: DateTime,
    updatedAt_Gt: DateTime,
    updatedAt_Gte: DateTime,
    updatedAt_Lt: DateTime,
    updatedAt_Lte: DateTime
  ): VConstructionOptimizedNodeConnection!
  "Контрагенты -> Тип контрагента"
  partnerType: VPartnerTypeNode
  "Клиент"
  projects(after: String, backOfficeManager_Email: String, backOfficeManager_Email_Icontains: String, backOfficeManager_FirstName: String, backOfficeManager_FirstName_Icontains: String, backOfficeManager_Id: ID, backOfficeManager_Id_Isnull: Boolean, backOfficeManager_LastName: String, backOfficeManager_LastName_Icontains: String, backOfficeManager_Name: String, backOfficeManager_Name_Icontains: String, backOfficeManager_Phone: String, backOfficeManager_Phone_Icontains: String, before: String, brand_Id: ID, brand_Id_Isnull: Boolean, brand_Title: String, brand_Title_Icontains: String, client_Id: ID, client_Id_Isnull: Boolean, client_PartnerType_Id: ID, client_PartnerType_Id_Isnull: Boolean, client_PartnerType_Title: String, client_PartnerType_Title_Icontains: String, client_Title: String, client_Title_Icontains: String, client_WorkingSectors_Description: String, client_WorkingSectors_Description_Icontains: String, client_WorkingSectors_Id: ID, client_WorkingSectors_Id_Isnull: Boolean, client_WorkingSectors_Title: String, client_WorkingSectors_Title_Icontains: String, code: String, code_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, numInYear: Int, numInYear_Isnull: Boolean, offset: Int, salesManager_Email: String, salesManager_Email_Icontains: String, salesManager_FirstName: String, salesManager_FirstName_Icontains: String, salesManager_Id: ID, salesManager_Id_Isnull: Boolean, salesManager_LastName: String, salesManager_LastName_Icontains: String, salesManager_Name: String, salesManager_Name_Icontains: String, salesManager_Phone: String, salesManager_Phone_Icontains: String, startDate: DateTime, startDate_Gt: DateTime, startDate_Gte: DateTime, startDate_Lt: DateTime, startDate_Lte: DateTime, title: String, title_Icontains: String): VProjectNodeConnection!
  "Рекламное агентство"
  projectsAgencies(after: String, backOfficeManager_Email: String, backOfficeManager_Email_Icontains: String, backOfficeManager_FirstName: String, backOfficeManager_FirstName_Icontains: String, backOfficeManager_Id: ID, backOfficeManager_Id_Isnull: Boolean, backOfficeManager_LastName: String, backOfficeManager_LastName_Icontains: String, backOfficeManager_Name: String, backOfficeManager_Name_Icontains: String, backOfficeManager_Phone: String, backOfficeManager_Phone_Icontains: String, before: String, brand_Id: ID, brand_Id_Isnull: Boolean, brand_Title: String, brand_Title_Icontains: String, client_Id: ID, client_Id_Isnull: Boolean, client_PartnerType_Id: ID, client_PartnerType_Id_Isnull: Boolean, client_PartnerType_Title: String, client_PartnerType_Title_Icontains: String, client_Title: String, client_Title_Icontains: String, client_WorkingSectors_Description: String, client_WorkingSectors_Description_Icontains: String, client_WorkingSectors_Id: ID, client_WorkingSectors_Id_Isnull: Boolean, client_WorkingSectors_Title: String, client_WorkingSectors_Title_Icontains: String, code: String, code_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, numInYear: Int, numInYear_Isnull: Boolean, offset: Int, salesManager_Email: String, salesManager_Email_Icontains: String, salesManager_FirstName: String, salesManager_FirstName_Icontains: String, salesManager_Id: ID, salesManager_Id_Isnull: Boolean, salesManager_LastName: String, salesManager_LastName_Icontains: String, salesManager_Name: String, salesManager_Name_Icontains: String, salesManager_Phone: String, salesManager_Phone_Icontains: String, startDate: DateTime, startDate_Gt: DateTime, startDate_Gte: DateTime, startDate_Lt: DateTime, startDate_Lte: DateTime, title: String, title_Icontains: String): VProjectNodeConnection!
  "Контрагенты -> Юридическое лицо, получатель агентской комиссси"
  sendersOfAgencyComission(
    advertisers_Id: ID,
    advertisers_Id_Isnull: Boolean,
    advertisers_Title: String,
    advertisers_Title_Icontains: String,
    after: String,
    before: String,
    binNumber: String,
    binNumber_Icontains: String,
    brands_Title: String,
    brands_Title_Icontains: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    isNonrtsOwner: Boolean,
    isNonrtsOwner_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partnerType_Title: String,
    partnerType_Title_Icontains: String,
    title: String,
    title_Icontains: String,
    workingSectors_Title: String,
    workingSectors_Title_Icontains: String
  ): VPartnerOptimizedNodeConnection!
  "Наименование"
  title: String
  "Дата редактирования"
  updatedAt: DateTime
  "Контрагенты -> Секторы деятельности"
  workingSectors(after: String, before: String, description: String, description_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VWorkingSectorNodeConnection!
  workingSectorsList: String
}

type VPartnerNodeConnection {
  "Contains the nodes in this connection."
  edges: [VPartnerNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VPartnerNode` and its cursor."
type VPartnerNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VPartnerNode
}

"Контрагент"
type VPartnerOptimizedNode implements Node {
  "Контрагенты -> Фактический адрес"
  actualAddress: VAddressesNode
  "Контрагенты -> Фактический адрес - Почтовый индекс"
  actualAddressPostcode: VPostcodeNode
  "Контрагенты <-> Связанные рекламодатели"
  advertiserClients(
    advertisers_Id: ID,
    advertisers_Id_Isnull: Boolean,
    advertisers_Title: String,
    advertisers_Title_Icontains: String,
    after: String,
    before: String,
    binNumber: String,
    binNumber_Icontains: String,
    brands_Title: String,
    brands_Title_Icontains: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    isNonrtsOwner: Boolean,
    isNonrtsOwner_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partnerType_Title: String,
    partnerType_Title_Icontains: String,
    title: String,
    title_Icontains: String,
    workingSectors_Title: String,
    workingSectors_Title_Icontains: String
  ): VPartnerOptimizedNodeConnection!
  "Контрагенты <-> Связанные рекламодатели"
  advertisers(
    advertisers_Id: ID,
    advertisers_Id_Isnull: Boolean,
    advertisers_Title: String,
    advertisers_Title_Icontains: String,
    after: String,
    before: String,
    binNumber: String,
    binNumber_Icontains: String,
    brands_Title: String,
    brands_Title_Icontains: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    isNonrtsOwner: Boolean,
    isNonrtsOwner_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partnerType_Title: String,
    partnerType_Title_Icontains: String,
    title: String,
    title_Icontains: String,
    workingSectors_Title: String,
    workingSectors_Title_Icontains: String
  ): VPartnerOptimizedNodeConnection!
  "Контрагенты -> Агентская комиссия"
  agencyCommission: VAgencyCommissionNode
  "Агент для перечисления агентской коммиссии"
  agencycommissionSet(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VAgencyCommissionNodeConnection!
  "Банк получателя"
  bankRecipient: String
  "БИК"
  bik: String
  "БИН"
  binNumber: String
  "Контрагенты <-> Связанные бренды"
  brands(
    after: String,
    before: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partners_Id: ID,
    partners_Id_Isnull: Boolean,
    partners_Title: String,
    partners_Title_Icontains: String,
    title: String,
    title_Icontains: String,
    workingSector_Description: String,
    workingSector_Description_Icontains: String
  ): VBrandOptimizedNodeConnection!
  brandsList: String
  "Расчетный счет"
  checkingAccount: String
  "Контрагенты -> Тип клиента"
  clientType: VClientTypeNode
  "Комментарий"
  comment: String
  "Контактные лица -> Контрагент"
  contactPersons(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VContactPersonNodeConnection!
  "Договора -> Контрагент"
  contracts(
    after: String,
    before: String,
    code: String,
    code_Icontains: String,
    contractType_Name: String,
    contractType_Name_Icontains: String,
    creator_Name: String,
    creator_Name_Icontains: String,
    end: DateTime,
    end_Gt: DateTime,
    end_Gte: DateTime,
    end_Lt: DateTime,
    end_Lte: DateTime,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    initiator_Name: String,
    initiator_Name_Icontains: String,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partner_Title: String,
    partner_Title_Icontains: String,
    registrationDate: DateTime,
    registrationDate_Gt: DateTime,
    registrationDate_Gte: DateTime,
    registrationDate_Lt: DateTime,
    registrationDate_Lte: DateTime,
    returnStatus: Boolean,
    returnStatus_Isnull: Boolean,
    start: DateTime,
    start_Gt: DateTime,
    start_Gte: DateTime,
    start_Lt: DateTime,
    start_Lte: DateTime
  ): VContractOptimizedNodeConnection!
  "Дата создания"
  createdAt: DateTime
  "Процент скидки на клиента"
  discountClientPercent: Decimal
  "Процент скидки на налог"
  discountNalogPercent: Decimal
  "Процент скидки по прайсу"
  discountPricePercent: Decimal
  "Контрагенты -> Район"
  district: VDistrictNode
  "Почтовый адрес"
  email: String
  "Иностранный контрагент"
  foreignPartner: Boolean!
  "The ID of the object."
  id: ID!
  "ИИК"
  iik: String
  "Счета -> Контрагент, на котрого выставляется счет"
  invoices(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VInvoiceNodeConnection!
  "Является владельцем конструкций НОН РТС"
  isNonrtsOwner: Boolean
  "КБЕ"
  kbe: String
  "Контрагенты -> Юридический адрес"
  legalAddress: VAddressesNode
  "Контрагенты -> Юридический адрес - Почтовый индекс"
  legalAddressPostcode: VPostcodeNode
  "Контрагенты -> Юридическое лицо, получатель агентской комиссси"
  legalEntityPayeeAgencyComission: VPartnerOptimizedNode
  "Номер свидетельства о постановке на НДС"
  ndsCertificateNumber: String
  "Конструкции -> Владелец НОН РТС"
  ownedNonrtsConstructions(
    active: Boolean,
    active_Isnull: Boolean,
    after: String,
    before: String,
    buhInventNumber: String,
    buhInventNumber_Icontains: String,
    coordinates: String,
    coordinates_Isnull: Boolean,
    createdAt: DateTime,
    createdAt_Gt: DateTime,
    createdAt_Gte: DateTime,
    createdAt_Lt: DateTime,
    createdAt_Lte: DateTime,
    crew: ID,
    crew_Isnull: Boolean,
    first: Int,
    format_Title: String,
    id: ID,
    id_Isnull: Boolean,
    isNonrts: Boolean,
    isNonrts_Isnull: Boolean,
    last: Int,
    locationId_Isnull: Boolean,
    location_Area: Float,
    location_Area_Gt: Float,
    location_Area_Gte: Float,
    location_Area_Lt: Float,
    location_Area_Lte: Float,
    location_HasArea: Boolean,
    location_HasArea_Isnull: Boolean,
    location_LegalAddress_Address: String,
    location_LegalAddress_Address_Icontains: String,
    location_MarketingAddress_Address: String,
    location_MarketingAddress_Address_Icontains: String,
    location_Postcode_District_City_Country_Title: String,
    location_Postcode_District_City_Country_Title_Icontains: String,
    location_Postcode_District_City_Title: String,
    location_Postcode_District_City_Title_Icontains: String,
    location_Postcode_District_Title: String,
    location_Postcode_District_Title_Icontains: String,
    location_Postcode_Title: String,
    location_Postcode_Title_Icontains: String,
    model_Title: String,
    model_Title_Icontains: String,
    model_Underfamily_Family_Title: String,
    model_Underfamily_Family_Title_Icontains: String,
    model_Underfamily_Title: String,
    model_Underfamily_Title_Icontains: String,
    obstruction_Title: String,
    obstruction_Title_Icontains: String,
    offset: Int,
    "Порядок"
    orderBy: String,
    statusConnection: Boolean,
    statusConnection_Isnull: Boolean,
    techInventNumber: String,
    techInventNumber_Icontains: String,
    techPhoneConstruction: String,
    techPhoneConstruction_Icontains: String,
    updatedAt: DateTime,
    updatedAt_Gt: DateTime,
    updatedAt_Gte: DateTime,
    updatedAt_Lt: DateTime,
    updatedAt_Lte: DateTime
  ): VConstructionOptimizedNodeConnection!
  "Контрагенты -> Тип контрагента"
  partnerType: VPartnerTypeNode
  "Клиент"
  projects(after: String, backOfficeManager_Email: String, backOfficeManager_Email_Icontains: String, backOfficeManager_FirstName: String, backOfficeManager_FirstName_Icontains: String, backOfficeManager_Id: ID, backOfficeManager_Id_Isnull: Boolean, backOfficeManager_LastName: String, backOfficeManager_LastName_Icontains: String, backOfficeManager_Name: String, backOfficeManager_Name_Icontains: String, backOfficeManager_Phone: String, backOfficeManager_Phone_Icontains: String, before: String, brand_Id: ID, brand_Id_Isnull: Boolean, brand_Title: String, brand_Title_Icontains: String, client_Id: ID, client_Id_Isnull: Boolean, client_PartnerType_Id: ID, client_PartnerType_Id_Isnull: Boolean, client_PartnerType_Title: String, client_PartnerType_Title_Icontains: String, client_Title: String, client_Title_Icontains: String, client_WorkingSectors_Description: String, client_WorkingSectors_Description_Icontains: String, client_WorkingSectors_Id: ID, client_WorkingSectors_Id_Isnull: Boolean, client_WorkingSectors_Title: String, client_WorkingSectors_Title_Icontains: String, code: String, code_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, numInYear: Int, numInYear_Isnull: Boolean, offset: Int, salesManager_Email: String, salesManager_Email_Icontains: String, salesManager_FirstName: String, salesManager_FirstName_Icontains: String, salesManager_Id: ID, salesManager_Id_Isnull: Boolean, salesManager_LastName: String, salesManager_LastName_Icontains: String, salesManager_Name: String, salesManager_Name_Icontains: String, salesManager_Phone: String, salesManager_Phone_Icontains: String, startDate: DateTime, startDate_Gt: DateTime, startDate_Gte: DateTime, startDate_Lt: DateTime, startDate_Lte: DateTime, title: String, title_Icontains: String): VProjectNodeConnection!
  "Рекламное агентство"
  projectsAgencies(after: String, backOfficeManager_Email: String, backOfficeManager_Email_Icontains: String, backOfficeManager_FirstName: String, backOfficeManager_FirstName_Icontains: String, backOfficeManager_Id: ID, backOfficeManager_Id_Isnull: Boolean, backOfficeManager_LastName: String, backOfficeManager_LastName_Icontains: String, backOfficeManager_Name: String, backOfficeManager_Name_Icontains: String, backOfficeManager_Phone: String, backOfficeManager_Phone_Icontains: String, before: String, brand_Id: ID, brand_Id_Isnull: Boolean, brand_Title: String, brand_Title_Icontains: String, client_Id: ID, client_Id_Isnull: Boolean, client_PartnerType_Id: ID, client_PartnerType_Id_Isnull: Boolean, client_PartnerType_Title: String, client_PartnerType_Title_Icontains: String, client_Title: String, client_Title_Icontains: String, client_WorkingSectors_Description: String, client_WorkingSectors_Description_Icontains: String, client_WorkingSectors_Id: ID, client_WorkingSectors_Id_Isnull: Boolean, client_WorkingSectors_Title: String, client_WorkingSectors_Title_Icontains: String, code: String, code_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, numInYear: Int, numInYear_Isnull: Boolean, offset: Int, salesManager_Email: String, salesManager_Email_Icontains: String, salesManager_FirstName: String, salesManager_FirstName_Icontains: String, salesManager_Id: ID, salesManager_Id_Isnull: Boolean, salesManager_LastName: String, salesManager_LastName_Icontains: String, salesManager_Name: String, salesManager_Name_Icontains: String, salesManager_Phone: String, salesManager_Phone_Icontains: String, startDate: DateTime, startDate_Gt: DateTime, startDate_Gte: DateTime, startDate_Lt: DateTime, startDate_Lte: DateTime, title: String, title_Icontains: String): VProjectNodeConnection!
  "Контрагенты -> Юридическое лицо, получатель агентской комиссси"
  sendersOfAgencyComission(
    advertisers_Id: ID,
    advertisers_Id_Isnull: Boolean,
    advertisers_Title: String,
    advertisers_Title_Icontains: String,
    after: String,
    before: String,
    binNumber: String,
    binNumber_Icontains: String,
    brands_Title: String,
    brands_Title_Icontains: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    isNonrtsOwner: Boolean,
    isNonrtsOwner_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partnerType_Title: String,
    partnerType_Title_Icontains: String,
    title: String,
    title_Icontains: String,
    workingSectors_Title: String,
    workingSectors_Title_Icontains: String
  ): VPartnerOptimizedNodeConnection!
  "Наименование"
  title: String
  "Дата редактирования"
  updatedAt: DateTime
  "Контрагенты -> Секторы деятельности"
  workingSectors(after: String, before: String, description: String, description_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VWorkingSectorNodeConnection!
  workingSectorsList: String
}

type VPartnerOptimizedNodeConnection {
  "Contains the nodes in this connection."
  edges: [VPartnerOptimizedNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VPartnerOptimizedNode` and its cursor."
type VPartnerOptimizedNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VPartnerOptimizedNode
}

"Тип контрагента"
type VPartnerTypeNode implements Node {
  "The ID of the object."
  id: ID!
  "Контрагенты -> Тип контрагента"
  partners(
    advertisers_Id: ID,
    advertisers_Id_Isnull: Boolean,
    advertisers_Title: String,
    advertisers_Title_Icontains: String,
    after: String,
    before: String,
    binNumber: String,
    binNumber_Icontains: String,
    brands_Title: String,
    brands_Title_Icontains: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    isNonrtsOwner: Boolean,
    isNonrtsOwner_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partnerType_Title: String,
    partnerType_Title_Icontains: String,
    title: String,
    title_Icontains: String,
    workingSectors_Title: String,
    workingSectors_Title_Icontains: String
  ): VPartnerOptimizedNodeConnection!
  "Тип контрагента"
  title: String!
}

type VPartnerTypeNodeConnection {
  "Contains the nodes in this connection."
  edges: [VPartnerTypeNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VPartnerTypeNode` and its cursor."
type VPartnerTypeNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VPartnerTypeNode
}

"право"
type VPermissionNode implements Node {
  codename: String!
  groupSet(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VGroupNodeConnection!
  "The ID of the object."
  id: ID!
  name: String!
  "Индивидуальные права данного пользователя."
  userSet(after: String, before: String, email: String, email_Icontains: String, employeePosition_Title: String, employeePosition_Title_Icontains: String, first: Int, firstName: String, firstName_Icontains: String, groups_Name: String, groups_Name_Icontains: String, id: ID, id_Isnull: Boolean, isSuperuser: Boolean, isSuperuser_Isnull: Boolean, last: Int, lastName: String, lastName_Icontains: String, name: String, name_Icontains: String, offset: Int, phone: String, phone_Icontains: String, username: String, username_Icontains: String): VCustomUserNodeConnection!
}

type VPermissionNodeConnection {
  "Contains the nodes in this connection."
  edges: [VPermissionNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VPermissionNode` and its cursor."
type VPermissionNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VPermissionNode
}

"Стоимость рекламного размещения по прайсу"
type VPlacementPriceNode implements Node {
  "Прайсовая стоимость -> Город"
  city: VCityNode
  "Прайсовая стоимость -> Формат"
  format: VFormatNode
  "The ID of the object."
  id: ID!
  "Период"
  period: Int
  "Цена за размещение"
  priceForPlacement: Decimal
}

type VPlacementPriceNodeConnection {
  "Contains the nodes in this connection."
  edges: [VPlacementPriceNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VPlacementPriceNode` and its cursor."
type VPlacementPriceNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VPlacementPriceNode
}

"Почтовый индекс"
type VPostcodeNode implements Node {
  "Контрагенты -> Фактический адрес - Почтовый индекс"
  actualPostcodePartners(
    advertisers_Id: ID,
    advertisers_Id_Isnull: Boolean,
    advertisers_Title: String,
    advertisers_Title_Icontains: String,
    after: String,
    before: String,
    binNumber: String,
    binNumber_Icontains: String,
    brands_Title: String,
    brands_Title_Icontains: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    isNonrtsOwner: Boolean,
    isNonrtsOwner_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partnerType_Title: String,
    partnerType_Title_Icontains: String,
    title: String,
    title_Icontains: String,
    workingSectors_Title: String,
    workingSectors_Title_Icontains: String
  ): VPartnerOptimizedNodeConnection!
  "Адреса -> Почтовый индекс"
  addresses(address: String, address_Icontains: String, after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, postcode_District_City_Id: ID, postcode_District_City_Id_Isnull: Boolean, postcode_District_City_Title: String, postcode_District_City_Title_Icontains: String, postcode_District_Id: ID, postcode_District_Id_Isnull: Boolean, postcode_District_Title: String, postcode_District_Title_Icontains: String, postcode_Id: ID, postcode_Id_Isnull: Boolean, postcode_Title: String, postcode_Title_Icontains: String): VAddressesNodeConnection!
  "Местоположения -> Почтовый индекс"
  constructions(
    active: Boolean,
    active_Isnull: Boolean,
    after: String,
    before: String,
    buhInventNumber: String,
    buhInventNumber_Icontains: String,
    coordinates: String,
    coordinates_Isnull: Boolean,
    createdAt: DateTime,
    createdAt_Gt: DateTime,
    createdAt_Gte: DateTime,
    createdAt_Lt: DateTime,
    createdAt_Lte: DateTime,
    crew: ID,
    crew_Isnull: Boolean,
    first: Int,
    format_Title: String,
    id: ID,
    id_Isnull: Boolean,
    isNonrts: Boolean,
    isNonrts_Isnull: Boolean,
    last: Int,
    locationId_Isnull: Boolean,
    location_Area: Float,
    location_Area_Gt: Float,
    location_Area_Gte: Float,
    location_Area_Lt: Float,
    location_Area_Lte: Float,
    location_HasArea: Boolean,
    location_HasArea_Isnull: Boolean,
    location_LegalAddress_Address: String,
    location_LegalAddress_Address_Icontains: String,
    location_MarketingAddress_Address: String,
    location_MarketingAddress_Address_Icontains: String,
    location_Postcode_District_City_Country_Title: String,
    location_Postcode_District_City_Country_Title_Icontains: String,
    location_Postcode_District_City_Title: String,
    location_Postcode_District_City_Title_Icontains: String,
    location_Postcode_District_Title: String,
    location_Postcode_District_Title_Icontains: String,
    location_Postcode_Title: String,
    location_Postcode_Title_Icontains: String,
    model_Title: String,
    model_Title_Icontains: String,
    model_Underfamily_Family_Title: String,
    model_Underfamily_Family_Title_Icontains: String,
    model_Underfamily_Title: String,
    model_Underfamily_Title_Icontains: String,
    obstruction_Title: String,
    obstruction_Title_Icontains: String,
    offset: Int,
    "Порядок"
    orderBy: String,
    statusConnection: Boolean,
    statusConnection_Isnull: Boolean,
    techInventNumber: String,
    techInventNumber_Icontains: String,
    techPhoneConstruction: String,
    techPhoneConstruction_Icontains: String,
    updatedAt: DateTime,
    updatedAt_Gt: DateTime,
    updatedAt_Gte: DateTime,
    updatedAt_Lt: DateTime,
    updatedAt_Lte: DateTime
  ): VConstructionOptimizedNodeConnection!
  "Почтовые индексы -> Район"
  district: VDistrictNode!
  "The ID of the object."
  id: ID!
  "Контрагенты -> Юридический адрес - Почтовый индекс"
  legalPostcodePartners(
    advertisers_Id: ID,
    advertisers_Id_Isnull: Boolean,
    advertisers_Title: String,
    advertisers_Title_Icontains: String,
    after: String,
    before: String,
    binNumber: String,
    binNumber_Icontains: String,
    brands_Title: String,
    brands_Title_Icontains: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    isNonrtsOwner: Boolean,
    isNonrtsOwner_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partnerType_Title: String,
    partnerType_Title_Icontains: String,
    title: String,
    title_Icontains: String,
    workingSectors_Title: String,
    workingSectors_Title_Icontains: String
  ): VPartnerOptimizedNodeConnection!
  "Местоположения -> Почтовый индекс"
  locations(
    after: String,
    area: Float,
    areaAct: String,
    areaActDate: DateTime,
    areaActDate_Gt: DateTime,
    areaActDate_Gte: DateTime,
    areaActDate_Lt: DateTime,
    areaActDate_Lte: DateTime,
    areaAct_Icontains: String,
    area_Gt: Float,
    area_Gte: Float,
    area_Lt: Float,
    area_Lte: Float,
    before: String,
    cadastralNumber: String,
    cadastralNumber_Icontains: String,
    comment: String,
    comment_Icontains: String,
    constructionsCount: Float,
    constructionsCount_Gt: Float,
    constructionsCount_Lt: Float,
    familyConstruction_Id: ID,
    familyConstruction_Id_Isnull: Boolean,
    familyConstruction_Title: String,
    familyConstruction_Title_Icontains: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    legalAddress_Address: String,
    legalAddress_Address_Icontains: String,
    marketingAddress_Address: String,
    marketingAddress_Address_Icontains: String,
    offset: Int,
    "Порядок"
    orderBy: String,
    postcode_District_City_Country_Title: String,
    postcode_District_City_Country_Title_Icontains: String,
    postcode_District_City_Title: String,
    postcode_District_City_Title_Icontains: String,
    postcode_District_Title: String,
    postcode_District_Title_Icontains: String,
    postcode_Title: String,
    postcode_Title_Icontains: String,
    purposeLocation_Title: String,
    purposeLocation_Title_Icontains: String,
    registrationStatusLocation_Title: String,
    registrationStatusLocation_Title_Icontains: String,
    rentContractEnd: DateTime,
    rentContractEnd_Gt: DateTime,
    rentContractEnd_Gte: DateTime,
    rentContractEnd_Lt: DateTime,
    rentContractEnd_Lte: DateTime,
    rentContractNumber: String,
    rentContractNumber_Isnull: Boolean,
    rentContractStart: DateTime,
    rentContractStart_Gt: DateTime,
    rentContractStart_Gte: DateTime,
    rentContractStart_Lt: DateTime,
    rentContractStart_Lte: DateTime,
    resolutionNumber: String,
    resolutionNumber_Icontains: String
  ): VLocationOptimizedNodeConnection!
  "Название"
  title: String
}

type VPostcodeNodeConnection {
  "Contains the nodes in this connection."
  edges: [VPostcodeNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VPostcodeNode` and its cursor."
type VPostcodeNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VPostcodeNode
}

"Города для проекта"
type VProjectCitiesNode implements Node {
  "Проекты -> Менеджер по продажам"
  city: VCityNode!
  "Количество бронирований в заданном городе и проекте"
  count: Int!
  "Количество сторон, распределенных на монтаж"
  distributedCount: Int!
  "The ID of the object."
  id: ID!
  "Города для проектов -> проект"
  project: VProjectNode!
  "Количество проданных сторон"
  saledCount: Int!
}

type VProjectCitiesNodeConnection {
  "Contains the nodes in this connection."
  edges: [VProjectCitiesNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VProjectCitiesNode` and its cursor."
type VProjectCitiesNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VProjectCitiesNode
}

"Проект"
type VProjectNode implements Node {
  "Дополнительные расходы -> Проект"
  additionalCosts(after: String, appendix: [ID], appendix_Code: String, appendix_Code_Icontains: String, appendix_Isnull: Boolean, before: String, city_Title: String, city_Title_Icontains: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, projectId: ID, projectId_Isnull: Boolean, project_Code: String, project_Code_Icontains: String): VAdditionalCostsNodeConnection!
  "Дополнительные расходы НОН РТС -> Проект"
  additionalCostsNonrts(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VEstimateNonRtsNodeConnection!
  "Рекламная компания -> Проект"
  advertPromoCompanies(
    after: String,
    before: String,
    designs_Archived: Boolean,
    designs_Archived_Isnull: Boolean,
    designs_IsCurrent: Boolean,
    designs_IsCurrent_Isnull: Boolean,
    designs_StartedAt: DateTime,
    designs_StartedAt_Gt: DateTime,
    designs_StartedAt_Gte: DateTime,
    designs_StartedAt_Lt: DateTime,
    designs_StartedAt_Lte: DateTime,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    projectId: ID,
    projectId_Isnull: Boolean,
    project_BrandId: ID,
    project_BrandId_Isnull: Boolean,
    project_Brand_Title: String,
    project_Brand_Title_Icontains: String,
    project_ClientId: ID,
    project_ClientId_Isnull: Boolean,
    project_Client_Title: String,
    project_Client_Title_Icontains: String,
    project_ProjectCities_CityId: ID,
    project_ProjectCities_CityId_Isnull: Boolean,
    project_ProjectCities_City_Title: String,
    project_ProjectCities_City_Title_Icontains: String,
    project_ProjectCities_Count: Int,
    project_ProjectCities_Count_Gt: Int,
    project_ProjectCities_Count_Gte: Int,
    project_ProjectCities_Count_Lt: Int,
    project_ProjectCities_Count_Lte: Int,
    project_ProjectCities_DistributedCount: Int,
    project_ProjectCities_DistributedCount_Gt: Int,
    project_ProjectCities_DistributedCount_Gte: Int,
    project_ProjectCities_DistributedCount_Lt: Int,
    project_ProjectCities_DistributedCount_Lte: Int,
    project_ProjectCities_SaledCount: Int,
    project_ProjectCities_SaledCount_Gt: Int,
    project_ProjectCities_SaledCount_Gte: Int,
    project_ProjectCities_SaledCount_Lt: Int,
    project_ProjectCities_SaledCount_Lte: Int
  ): VAdvertPromoCompanyOptimizedNodeConnection!
  "Рекламное агентство"
  agency: VPartnerOptimizedNode
  "Проекты -> Агентская комиссия"
  agencyCommission: VAgencyCommissionNode
  "Проекты -> Менеджер Бэк-оффиса"
  backOfficeManager: VCustomUserNode
  "Бренд"
  brand: VBrandOptimizedNode
  "Клиент"
  client: VPartnerOptimizedNode
  "Код"
  code: String
  "Коментарий"
  comment: String
  "Дата создания"
  createdAt: DateTime
  "Проекты -> Создатель (кто внес данные)"
  creator: VCustomUserNode
  "Процент скидки на клиента"
  discountClientPercent: Decimal
  "Процент скидки на налог"
  discountNalogPercent: Decimal
  "Процент скидки по прайсу"
  discountPricePercent: Decimal
  "The ID of the object."
  id: ID!
  "Счета -> Проект"
  invoices(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VInvoiceNodeConnection!
  "В архиве"
  isArchive: Boolean!
  "Порядковый номер проекта"
  numInYear: Int
  "Приложения к договору -> Проект"
  projectAppendices(
    after: String,
    before: String,
    code: String,
    code_Icontains: String,
    contractId: ID,
    contractId_Isnull: Boolean,
    contract_Code: String,
    contract_Code_Icontains: String,
    contract_PartnerId: ID,
    contract_PartnerId_Isnull: Boolean,
    contract_Partner_Title: String,
    contract_Partner_Title_Icontains: String,
    contract_SerialNumber: String,
    contract_SerialNumber_Icontains: String,
    createdDate: DateTime,
    createdDate_Gt: DateTime,
    createdDate_Gte: DateTime,
    createdDate_Lt: DateTime,
    createdDate_Lte: DateTime,
    creator: ID,
    creator_Isnull: Boolean,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    periodEndDate: DateTime,
    periodEndDate_Gt: DateTime,
    periodEndDate_Gte: DateTime,
    periodEndDate_Lt: DateTime,
    periodEndDate_Lte: DateTime,
    periodStartDate: DateTime,
    periodStartDate_Gt: DateTime,
    periodStartDate_Gte: DateTime,
    periodStartDate_Lt: DateTime,
    periodStartDate_Lte: DateTime,
    projectId: ID,
    projectId_Isnull: Boolean,
    project_BackOfficeManagerId: ID,
    project_BackOfficeManagerId_Isnull: Boolean,
    project_BackOfficeManager_FirstName: String,
    project_BackOfficeManager_FirstName_Icontains: String,
    project_BackOfficeManager_LastName: String,
    project_BackOfficeManager_LastName_Icontains: String,
    project_BrandId: ID,
    project_BrandId_Isnull: Boolean,
    project_Brand_Title: String,
    project_Brand_Title_Icontains: String,
    project_ClientId: ID,
    project_ClientId_Isnull: Boolean,
    project_Client_Title: String,
    project_Client_Title_Icontains: String,
    project_Code: String,
    project_Code_Icontains: String,
    project_Id: ID,
    project_Id_Isnull: Boolean,
    project_Title: String,
    project_Title_Icontains: String,
    returnStatus: Boolean,
    returnStatus_Isnull: Boolean,
    salesManagerId: ID,
    salesManagerId_Isnull: Boolean,
    salesManager_FirstName: String,
    salesManager_FirstName_Icontains: String,
    salesManager_LastName: String,
    salesManager_LastName_Icontains: String
  ): VAppendixOptimizedNodeConnection!
  "Города для проектов -> проект"
  projectCities(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VProjectCitiesNodeConnection!
  reservationPackage(after: String, before: String, dateFrom: DateTime, dateFrom_Gt: DateTime, dateFrom_Gte: DateTime, dateFrom_Lt: DateTime, dateFrom_Lte: DateTime, dateTo: DateTime, dateTo_Gt: DateTime, dateTo_Gte: DateTime, dateTo_Lt: DateTime, dateTo_Lte: DateTime, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VReservationPackageNodeConnection!
  "Бронирования -> Проект"
  reservations(
    after: String,
    appendix_Id: ID,
    appendix_Id_Isnull: Boolean,
    before: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Id: ID,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Id_Isnull: Boolean,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Format_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Size: String,
    constructionSide_AdvertisingSide_Side_Size_Icontains: String,
    constructionSide_AdvertisingSide_Side_Title: String,
    constructionSide_AdvertisingSide_Side_Title_Icontains: String,
    constructionSide_Construction_Location_Postcode_District_City_Id: ID,
    constructionSide_Construction_Location_Postcode_District_City_Id_Isnull: Boolean,
    constructionSide_Construction_Location_Postcode_District_City_Title: String,
    constructionSide_Construction_Location_Postcode_District_City_Title_Icontains: String,
    constructionSide_Construction_Location_Postcode_District_Id: ID,
    constructionSide_Construction_Location_Postcode_District_Id_Isnull: Boolean,
    constructionSide_Construction_Location_Postcode_District_Title: String,
    constructionSide_Construction_Location_Postcode_District_Title_Icontains: String,
    constructionSide_Construction_StatusConnection: Boolean,
    constructionSide_Construction_StatusConnection_Isnull: Boolean,
    dateFrom: DateTime,
    dateFrom_Gt: DateTime,
    dateFrom_Gte: DateTime,
    dateFrom_Lt: DateTime,
    dateFrom_Lte: DateTime,
    dateTo: DateTime,
    dateTo_Gt: DateTime,
    dateTo_Gte: DateTime,
    dateTo_Lt: DateTime,
    dateTo_Lte: DateTime,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    projectId: ID,
    projectId_Isnull: Boolean,
    reservationType_Title: String,
    reservationType_Title_Icontains: String,
    reservationType_Title_Iregex: String,
    reservationType_Title_Regex: String
  ): VReservationOptimizedNodeConnection!
  "Проекты -> Менеджер по продажам"
  salesManager: VCustomUserNode
  "Дата начала"
  startDate: DateTime
  "Наименование"
  title: String
  "Дата обновления"
  updatedAt: DateTime
}

type VProjectNodeConnection {
  "Contains the nodes in this connection."
  edges: [VProjectNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VProjectNode` and its cursor."
type VProjectNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VProjectNode
}

"Целевое назначение местоположения"
type VPurposeLocationNode implements Node {
  "The ID of the object."
  id: ID!
  "Местоположения -> Целевое назначение местоположения"
  locations(
    after: String,
    area: Float,
    areaAct: String,
    areaActDate: DateTime,
    areaActDate_Gt: DateTime,
    areaActDate_Gte: DateTime,
    areaActDate_Lt: DateTime,
    areaActDate_Lte: DateTime,
    areaAct_Icontains: String,
    area_Gt: Float,
    area_Gte: Float,
    area_Lt: Float,
    area_Lte: Float,
    before: String,
    cadastralNumber: String,
    cadastralNumber_Icontains: String,
    comment: String,
    comment_Icontains: String,
    constructionsCount: Float,
    constructionsCount_Gt: Float,
    constructionsCount_Lt: Float,
    familyConstruction_Id: ID,
    familyConstruction_Id_Isnull: Boolean,
    familyConstruction_Title: String,
    familyConstruction_Title_Icontains: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    legalAddress_Address: String,
    legalAddress_Address_Icontains: String,
    marketingAddress_Address: String,
    marketingAddress_Address_Icontains: String,
    offset: Int,
    "Порядок"
    orderBy: String,
    postcode_District_City_Country_Title: String,
    postcode_District_City_Country_Title_Icontains: String,
    postcode_District_City_Title: String,
    postcode_District_City_Title_Icontains: String,
    postcode_District_Title: String,
    postcode_District_Title_Icontains: String,
    postcode_Title: String,
    postcode_Title_Icontains: String,
    purposeLocation_Title: String,
    purposeLocation_Title_Icontains: String,
    registrationStatusLocation_Title: String,
    registrationStatusLocation_Title_Icontains: String,
    rentContractEnd: DateTime,
    rentContractEnd_Gt: DateTime,
    rentContractEnd_Gte: DateTime,
    rentContractEnd_Lt: DateTime,
    rentContractEnd_Lte: DateTime,
    rentContractNumber: String,
    rentContractNumber_Isnull: Boolean,
    rentContractStart: DateTime,
    rentContractStart_Gt: DateTime,
    rentContractStart_Gte: DateTime,
    rentContractStart_Lt: DateTime,
    rentContractStart_Lte: DateTime,
    resolutionNumber: String,
    resolutionNumber_Icontains: String
  ): VLocationOptimizedNodeConnection!
  title: String!
}

type VPurposeLocationNodeConnection {
  "Contains the nodes in this connection."
  edges: [VPurposeLocationNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VPurposeLocationNode` and its cursor."
type VPurposeLocationNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VPurposeLocationNode
}

"Назначение стороны"
type VPurposeSideNode implements Node {
  "Стророны конструкции -> Назначение стороны"
  constructionSides(advertisingSide_Code: String, advertisingSide_Code_Isnull: Boolean, advertisingSide_Side_Code: String, advertisingSide_Side_Code_Isnull: Boolean, advertisingSide_Side_Format_Code: String, advertisingSide_Side_Format_Code_Isnull: Boolean, advertisingSide_Side_Format_Model_Title: String, advertisingSide_Side_Format_Model_Title_Icontains: String, advertisingSide_Side_Format_Model_Underfamily_Family_Id: ID, advertisingSide_Side_Format_Model_Underfamily_Family_Id_Isnull: Boolean, advertisingSide_Side_Format_Model_Underfamily_Family_Title: String, advertisingSide_Side_Format_Model_Underfamily_Family_Title_Icontains: String, advertisingSide_Side_Format_Model_Underfamily_Title: String, advertisingSide_Side_Format_Model_Underfamily_Title_Icontains: String, advertisingSide_Side_Format_Title: String, advertisingSide_Side_Format_Title_Icontains: String, advertisingSide_Side_Size: String, advertisingSide_Side_Size_Icontains: String, advertisingSide_Side_Title: String, advertisingSide_Side_Title_Icontains: String, after: String, before: String, constructionId: ID, constructionId_Isnull: Boolean, construction_Location_LegalAddress_Address: String, construction_Location_LegalAddress_Address_Icontains: String, construction_Location_MarketingAddress_Address: String, construction_Location_MarketingAddress_Address_Icontains: String, construction_Location_Postcode_District_City_Id: ID, construction_Location_Postcode_District_City_Id_Isnull: Boolean, construction_Location_Postcode_District_City_Title: String, construction_Location_Postcode_District_City_Title_Icontains: String, construction_Location_Postcode_District_Id: ID, construction_Location_Postcode_District_Id_Isnull: Boolean, construction_Location_Postcode_District_Title: String, construction_Location_Postcode_District_Title_Icontains: String, construction_Location_Postcode_Title: String, construction_Location_Postcode_Title_Isnull: Boolean, construction_NonrtsOwner_Id: ID, construction_NonrtsOwner_Id_Isnull: Boolean, construction_NonrtsOwner_Title: String, construction_NonrtsOwner_Title_Icontains: String, construction_NumInDistrict: Int, construction_NumInDistrict_Gt: Int, construction_NumInDistrict_Gte: Int, construction_NumInDistrict_Lt: Int, construction_NumInDistrict_Lte: Int, construction_StatusConnection: Boolean, construction_StatusConnection_Isnull: Boolean, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, reservation_DateFrom: DateTime, reservation_DateFrom_Gt: DateTime, reservation_DateFrom_Gte: DateTime, reservation_DateFrom_Lt: DateTime, reservation_DateFrom_Lte: DateTime, reservation_DateTo: DateTime, reservation_DateTo_Gt: DateTime, reservation_DateTo_Gte: DateTime, reservation_DateTo_Lt: DateTime, reservation_DateTo_Lte: DateTime, reservation_ReservationType_Title: String, reservation_ReservationType_Title_Icontains: String, reservation_ReservationType_Title_Iregex: String, reservation_ReservationType_Title_Regex: String): VConstructionSideOptimizedNodeConnection!
  "The ID of the object."
  id: ID!
  title: String!
}

type VPurposeSideNodeConnection {
  "Contains the nodes in this connection."
  edges: [VPurposeSideNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VPurposeSideNode` and its cursor."
type VPurposeSideNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VPurposeSideNode
}

"Статус оформления местоположения"
type VRegistrationStatusLocationNode implements Node {
  "The ID of the object."
  id: ID!
  "Местоположения -> Статус оформления земельного участка"
  locations(
    after: String,
    area: Float,
    areaAct: String,
    areaActDate: DateTime,
    areaActDate_Gt: DateTime,
    areaActDate_Gte: DateTime,
    areaActDate_Lt: DateTime,
    areaActDate_Lte: DateTime,
    areaAct_Icontains: String,
    area_Gt: Float,
    area_Gte: Float,
    area_Lt: Float,
    area_Lte: Float,
    before: String,
    cadastralNumber: String,
    cadastralNumber_Icontains: String,
    comment: String,
    comment_Icontains: String,
    constructionsCount: Float,
    constructionsCount_Gt: Float,
    constructionsCount_Lt: Float,
    familyConstruction_Id: ID,
    familyConstruction_Id_Isnull: Boolean,
    familyConstruction_Title: String,
    familyConstruction_Title_Icontains: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    legalAddress_Address: String,
    legalAddress_Address_Icontains: String,
    marketingAddress_Address: String,
    marketingAddress_Address_Icontains: String,
    offset: Int,
    "Порядок"
    orderBy: String,
    postcode_District_City_Country_Title: String,
    postcode_District_City_Country_Title_Icontains: String,
    postcode_District_City_Title: String,
    postcode_District_City_Title_Icontains: String,
    postcode_District_Title: String,
    postcode_District_Title_Icontains: String,
    postcode_Title: String,
    postcode_Title_Icontains: String,
    purposeLocation_Title: String,
    purposeLocation_Title_Icontains: String,
    registrationStatusLocation_Title: String,
    registrationStatusLocation_Title_Icontains: String,
    rentContractEnd: DateTime,
    rentContractEnd_Gt: DateTime,
    rentContractEnd_Gte: DateTime,
    rentContractEnd_Lt: DateTime,
    rentContractEnd_Lte: DateTime,
    rentContractNumber: String,
    rentContractNumber_Isnull: Boolean,
    rentContractStart: DateTime,
    rentContractStart_Gt: DateTime,
    rentContractStart_Gte: DateTime,
    rentContractStart_Lt: DateTime,
    rentContractStart_Lte: DateTime,
    resolutionNumber: String,
    resolutionNumber_Icontains: String
  ): VLocationOptimizedNodeConnection!
  "Подкатегория оформления"
  subcategory: String
  "Статус оформления"
  title: String!
}

type VRegistrationStatusLocationNodeConnection {
  "Contains the nodes in this connection."
  edges: [VRegistrationStatusLocationNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VRegistrationStatusLocationNode` and its cursor."
type VRegistrationStatusLocationNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VRegistrationStatusLocationNode
}

"Бронирование"
type VReservationNode implements Node {
  "Заданное значение стоимости доп. расходов"
  additionalSetted: Decimal
  "Бронирование -> Агентская комиссия"
  agencyCommission: VAgencyCommissionNode
  "Бронирование <-> Приложение к договору"
  appendix(
    after: String,
    before: String,
    code: String,
    code_Icontains: String,
    contractId: ID,
    contractId_Isnull: Boolean,
    contract_Code: String,
    contract_Code_Icontains: String,
    contract_PartnerId: ID,
    contract_PartnerId_Isnull: Boolean,
    contract_Partner_Title: String,
    contract_Partner_Title_Icontains: String,
    contract_SerialNumber: String,
    contract_SerialNumber_Icontains: String,
    createdDate: DateTime,
    createdDate_Gt: DateTime,
    createdDate_Gte: DateTime,
    createdDate_Lt: DateTime,
    createdDate_Lte: DateTime,
    creator: ID,
    creator_Isnull: Boolean,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    periodEndDate: DateTime,
    periodEndDate_Gt: DateTime,
    periodEndDate_Gte: DateTime,
    periodEndDate_Lt: DateTime,
    periodEndDate_Lte: DateTime,
    periodStartDate: DateTime,
    periodStartDate_Gt: DateTime,
    periodStartDate_Gte: DateTime,
    periodStartDate_Lt: DateTime,
    periodStartDate_Lte: DateTime,
    projectId: ID,
    projectId_Isnull: Boolean,
    project_BackOfficeManagerId: ID,
    project_BackOfficeManagerId_Isnull: Boolean,
    project_BackOfficeManager_FirstName: String,
    project_BackOfficeManager_FirstName_Icontains: String,
    project_BackOfficeManager_LastName: String,
    project_BackOfficeManager_LastName_Icontains: String,
    project_BrandId: ID,
    project_BrandId_Isnull: Boolean,
    project_Brand_Title: String,
    project_Brand_Title_Icontains: String,
    project_ClientId: ID,
    project_ClientId_Isnull: Boolean,
    project_Client_Title: String,
    project_Client_Title_Icontains: String,
    project_Code: String,
    project_Code_Icontains: String,
    project_Id: ID,
    project_Id_Isnull: Boolean,
    project_Title: String,
    project_Title_Icontains: String,
    returnStatus: Boolean,
    returnStatus_Isnull: Boolean,
    salesManagerId: ID,
    salesManagerId_Isnull: Boolean,
    salesManager_FirstName: String,
    salesManager_FirstName_Icontains: String,
    salesManager_LastName: String,
    salesManager_LastName_Icontains: String
  ): VAppendixOptimizedNodeConnection!
  "брендинг"
  branding: Boolean!
  "Бронирования -> Сторона конструкции"
  constructionSide: VConstructionSideOptimizedNode
  "Дата создания"
  creationDate: DateTime!
  "Дата начала"
  dateFrom: DateTime!
  "Дата окончания"
  dateTo: DateTime!
  "Заданный процент скидки на налог"
  discountNalogPercentSetted: Decimal
  "Заданный процент скидки по прайсу"
  discountPricePercentSetted: Decimal
  "Заданный процент скидки Аренды на клиента"
  discountToClientPercentSetted: Decimal
  "Распределений на монтаж"
  distributedToMounting: Int!
  "Данные о НОН РТС стоимости -> Бронирование"
  estimateNonRts: VEstimateNonRtsNode
  "The ID of the object."
  id: ID!
  "Заданное значение стоимости монтажа"
  mountingSetted: Decimal
  "Заданная стоимость налога после скидки"
  nalogAfterDiscountSetted: Decimal
  "Заданное значение стоимости налогов"
  nalogSetted: Decimal
  "Заданное значение стоимости печати"
  printingSetted: Decimal
  "Бронирования -> Проект"
  project: VProjectNode
  "Заданная стоимость после скидки по прайсу"
  rentByPriceAfterDiscountSetted: Decimal
  "Заданное значение аренды по прайсу"
  rentByPriceSetted: Decimal
  "Заданная стоимость Аренды после всех скидок"
  rentToClientAfterDiscountSetted: Decimal
  "Заданная аренда на клиента"
  rentToClientSetted: Decimal
  "Монтажи -> Бронирование"
  reservationMountings(after: String, before: String, crew_Name: String, crew_Name_Icontains: String, endMounting: DateTime, endMounting_Gt: DateTime, endMounting_Gte: DateTime, endMounting_Lt: DateTime, endMounting_Lte: DateTime, first: Int, id: ID, id_Isnull: Boolean, last: Int, mountingDone: Boolean, mountingDone_Isnull: Boolean, mountingTask_Title: String, mountingTask_Title_Icontains: String, offset: Int, reservation_ConstructionSide_Construction_Location_LegalAddress_Address_Isnull: Boolean, reservation_ConstructionSide_Construction_Location_MarketingAddress_Address_Isnull: Boolean, startMounting: DateTime, startMounting_Gt: DateTime, startMounting_Gte: DateTime, startMounting_Lt: DateTime, startMounting_Lte: DateTime, unmountingDone: Boolean, unmountingDone_Isnull: Boolean): VMountingNodeConnection!
  "Бронирование -> Бронирование пакета"
  reservationPackage: VReservationPackageNode
  "Бронирования -> Тип брони"
  reservationType: VReservationTypeNode!
}

type VReservationNodeConnection {
  "Contains the nodes in this connection."
  edges: [VReservationNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VReservationNode` and its cursor."
type VReservationNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VReservationNode
}

"Бронирование"
type VReservationOptimizedNode implements Node {
  "Заданное значение стоимости доп. расходов"
  additionalSetted: Decimal
  "Бронирование -> Агентская комиссия"
  agencyCommission: VAgencyCommissionNode
  "Бронирование <-> Приложение к договору"
  appendix(
    after: String,
    before: String,
    code: String,
    code_Icontains: String,
    contractId: ID,
    contractId_Isnull: Boolean,
    contract_Code: String,
    contract_Code_Icontains: String,
    contract_PartnerId: ID,
    contract_PartnerId_Isnull: Boolean,
    contract_Partner_Title: String,
    contract_Partner_Title_Icontains: String,
    contract_SerialNumber: String,
    contract_SerialNumber_Icontains: String,
    createdDate: DateTime,
    createdDate_Gt: DateTime,
    createdDate_Gte: DateTime,
    createdDate_Lt: DateTime,
    createdDate_Lte: DateTime,
    creator: ID,
    creator_Isnull: Boolean,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    periodEndDate: DateTime,
    periodEndDate_Gt: DateTime,
    periodEndDate_Gte: DateTime,
    periodEndDate_Lt: DateTime,
    periodEndDate_Lte: DateTime,
    periodStartDate: DateTime,
    periodStartDate_Gt: DateTime,
    periodStartDate_Gte: DateTime,
    periodStartDate_Lt: DateTime,
    periodStartDate_Lte: DateTime,
    projectId: ID,
    projectId_Isnull: Boolean,
    project_BackOfficeManagerId: ID,
    project_BackOfficeManagerId_Isnull: Boolean,
    project_BackOfficeManager_FirstName: String,
    project_BackOfficeManager_FirstName_Icontains: String,
    project_BackOfficeManager_LastName: String,
    project_BackOfficeManager_LastName_Icontains: String,
    project_BrandId: ID,
    project_BrandId_Isnull: Boolean,
    project_Brand_Title: String,
    project_Brand_Title_Icontains: String,
    project_ClientId: ID,
    project_ClientId_Isnull: Boolean,
    project_Client_Title: String,
    project_Client_Title_Icontains: String,
    project_Code: String,
    project_Code_Icontains: String,
    project_Id: ID,
    project_Id_Isnull: Boolean,
    project_Title: String,
    project_Title_Icontains: String,
    returnStatus: Boolean,
    returnStatus_Isnull: Boolean,
    salesManagerId: ID,
    salesManagerId_Isnull: Boolean,
    salesManager_FirstName: String,
    salesManager_FirstName_Icontains: String,
    salesManager_LastName: String,
    salesManager_LastName_Icontains: String
  ): VAppendixOptimizedNodeConnection!
  "брендинг"
  branding: Boolean!
  "Бронирования -> Сторона конструкции"
  constructionSide: VConstructionSideOptimizedNode
  "Дата создания"
  creationDate: DateTime!
  "Дата начала"
  dateFrom: DateTime!
  "Дата окончания"
  dateTo: DateTime!
  "Заданный процент скидки на налог"
  discountNalogPercentSetted: Decimal
  "Заданный процент скидки по прайсу"
  discountPricePercentSetted: Decimal
  "Заданный процент скидки Аренды на клиента"
  discountToClientPercentSetted: Decimal
  "Распределений на монтаж"
  distributedToMounting: Int!
  "Данные о НОН РТС стоимости -> Бронирование"
  estimateNonRts: VEstimateNonRtsNode
  "The ID of the object."
  id: ID!
  "Заданное значение стоимости монтажа"
  mountingSetted: Decimal
  "Заданная стоимость налога после скидки"
  nalogAfterDiscountSetted: Decimal
  "Заданное значение стоимости налогов"
  nalogSetted: Decimal
  "Заданное значение стоимости печати"
  printingSetted: Decimal
  "Бронирования -> Проект"
  project: VProjectNode
  "Заданная стоимость после скидки по прайсу"
  rentByPriceAfterDiscountSetted: Decimal
  "Заданное значение аренды по прайсу"
  rentByPriceSetted: Decimal
  "Заданная стоимость Аренды после всех скидок"
  rentToClientAfterDiscountSetted: Decimal
  "Заданная аренда на клиента"
  rentToClientSetted: Decimal
  "Монтажи -> Бронирование"
  reservationMountings(after: String, before: String, crew_Name: String, crew_Name_Icontains: String, endMounting: DateTime, endMounting_Gt: DateTime, endMounting_Gte: DateTime, endMounting_Lt: DateTime, endMounting_Lte: DateTime, first: Int, id: ID, id_Isnull: Boolean, last: Int, mountingDone: Boolean, mountingDone_Isnull: Boolean, mountingTask_Title: String, mountingTask_Title_Icontains: String, offset: Int, reservation_ConstructionSide_Construction_Location_LegalAddress_Address_Isnull: Boolean, reservation_ConstructionSide_Construction_Location_MarketingAddress_Address_Isnull: Boolean, startMounting: DateTime, startMounting_Gt: DateTime, startMounting_Gte: DateTime, startMounting_Lt: DateTime, startMounting_Lte: DateTime, unmountingDone: Boolean, unmountingDone_Isnull: Boolean): VMountingNodeConnection!
  "Бронирование -> Бронирование пакета"
  reservationPackage: VReservationPackageNode
  "Бронирования -> Тип брони"
  reservationType: VReservationTypeNode!
}

type VReservationOptimizedNodeConnection {
  "Contains the nodes in this connection."
  edges: [VReservationOptimizedNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VReservationOptimizedNode` and its cursor."
type VReservationOptimizedNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VReservationOptimizedNode
}

"Бронирование пакета"
type VReservationPackageNode implements Node {
  "Бронирования пакетов -> Приложение к договору"
  appendix: VAppendixOptimizedNode
  "брендинг"
  branding: Boolean!
  "Дата начала"
  dateFrom: DateTime
  "Дата окончания"
  dateTo: DateTime
  "The ID of the object."
  id: ID!
  "Бронирования Пакета -> Пакет"
  package: PackageType
  project: VProjectNode
  reservationType: VReservationTypeNode
  "Бронирование -> Бронирование пакета"
  reservations(
    after: String,
    appendix_Id: ID,
    appendix_Id_Isnull: Boolean,
    before: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Id: ID,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Id_Isnull: Boolean,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Format_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Size: String,
    constructionSide_AdvertisingSide_Side_Size_Icontains: String,
    constructionSide_AdvertisingSide_Side_Title: String,
    constructionSide_AdvertisingSide_Side_Title_Icontains: String,
    constructionSide_Construction_Location_Postcode_District_City_Id: ID,
    constructionSide_Construction_Location_Postcode_District_City_Id_Isnull: Boolean,
    constructionSide_Construction_Location_Postcode_District_City_Title: String,
    constructionSide_Construction_Location_Postcode_District_City_Title_Icontains: String,
    constructionSide_Construction_Location_Postcode_District_Id: ID,
    constructionSide_Construction_Location_Postcode_District_Id_Isnull: Boolean,
    constructionSide_Construction_Location_Postcode_District_Title: String,
    constructionSide_Construction_Location_Postcode_District_Title_Icontains: String,
    constructionSide_Construction_StatusConnection: Boolean,
    constructionSide_Construction_StatusConnection_Isnull: Boolean,
    dateFrom: DateTime,
    dateFrom_Gt: DateTime,
    dateFrom_Gte: DateTime,
    dateFrom_Lt: DateTime,
    dateFrom_Lte: DateTime,
    dateTo: DateTime,
    dateTo_Gt: DateTime,
    dateTo_Gte: DateTime,
    dateTo_Lt: DateTime,
    dateTo_Lte: DateTime,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    projectId: ID,
    projectId_Isnull: Boolean,
    reservationType_Title: String,
    reservationType_Title_Icontains: String,
    reservationType_Title_Iregex: String,
    reservationType_Title_Regex: String
  ): VReservationOptimizedNodeConnection!
}

type VReservationPackageNodeConnection {
  "Contains the nodes in this connection."
  edges: [VReservationPackageNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VReservationPackageNode` and its cursor."
type VReservationPackageNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VReservationPackageNode
}

"Вид бронирования"
type VReservationTypeNode implements Node {
  "The ID of the object."
  id: ID!
  "целочисленный ключ"
  ikey: ReservationTypeIkey
  "уровень бронирования"
  level: Int!
  "Бронирования -> Тип брони"
  reservation(
    after: String,
    appendix_Id: ID,
    appendix_Id_Isnull: Boolean,
    before: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Id: ID,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Id_Isnull: Boolean,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Family_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Model_Underfamily_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Format_Title: String,
    constructionSide_AdvertisingSide_Side_Format_Title_Icontains: String,
    constructionSide_AdvertisingSide_Side_Size: String,
    constructionSide_AdvertisingSide_Side_Size_Icontains: String,
    constructionSide_AdvertisingSide_Side_Title: String,
    constructionSide_AdvertisingSide_Side_Title_Icontains: String,
    constructionSide_Construction_Location_Postcode_District_City_Id: ID,
    constructionSide_Construction_Location_Postcode_District_City_Id_Isnull: Boolean,
    constructionSide_Construction_Location_Postcode_District_City_Title: String,
    constructionSide_Construction_Location_Postcode_District_City_Title_Icontains: String,
    constructionSide_Construction_Location_Postcode_District_Id: ID,
    constructionSide_Construction_Location_Postcode_District_Id_Isnull: Boolean,
    constructionSide_Construction_Location_Postcode_District_Title: String,
    constructionSide_Construction_Location_Postcode_District_Title_Icontains: String,
    constructionSide_Construction_StatusConnection: Boolean,
    constructionSide_Construction_StatusConnection_Isnull: Boolean,
    dateFrom: DateTime,
    dateFrom_Gt: DateTime,
    dateFrom_Gte: DateTime,
    dateFrom_Lt: DateTime,
    dateFrom_Lte: DateTime,
    dateTo: DateTime,
    dateTo_Gt: DateTime,
    dateTo_Gte: DateTime,
    dateTo_Lt: DateTime,
    dateTo_Lte: DateTime,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    projectId: ID,
    projectId_Isnull: Boolean,
    reservationType_Title: String,
    reservationType_Title_Icontains: String,
    reservationType_Title_Iregex: String,
    reservationType_Title_Regex: String
  ): VReservationOptimizedNodeConnection!
  reservationPackage(after: String, before: String, dateFrom: DateTime, dateFrom_Gt: DateTime, dateFrom_Gte: DateTime, dateFrom_Lt: DateTime, dateFrom_Lte: DateTime, dateTo: DateTime, dateTo_Gt: DateTime, dateTo_Gte: DateTime, dateTo_Lt: DateTime, dateTo_Lte: DateTime, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int): VReservationPackageNodeConnection!
  "Тип брони"
  title: String
}

type VReservationTypeNodeConnection {
  "Contains the nodes in this connection."
  edges: [VReservationTypeNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VReservationTypeNode` and its cursor."
type VReservationTypeNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VReservationTypeNode
}

"Сторона"
type VSideNode implements Node {
  "Рекламные стороны -> Сторона"
  advertisingSides(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, side_Id: ID, side_Id_Isnull: Boolean, title: String, title_Icontains: String): VAdvertisingSideNodeConnection!
  "Буквенный код стороны"
  code: String
  "Стророны -> Формат"
  format: VFormatNode!
  "The ID of the object."
  id: ID!
  "Размер стороны"
  size: String
  "Наименование стороны"
  title: String
}

type VSideNodeConnection {
  "Contains the nodes in this connection."
  edges: [VSideNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VSideNode` and its cursor."
type VSideNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VSideNode
}

"Статические, конфигурационные доп. расходы"
type VStaticAdditionalCostsNode implements Node {
  category: StaticAdditionalCostsCategory!
  "Статические, конфигурационные доп. расходы -> Город"
  city: VCityNode
  "Статические, конфигурационные доп. расходы -> Формат"
  format: VFormatNode
  "The ID of the object."
  id: ID!
  "Наименование дополнительного расхода"
  name: String
  "Цена"
  price: Decimal
}

type VStaticAdditionalCostsNodeConnection {
  "Contains the nodes in this connection."
  edges: [VStaticAdditionalCostsNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VStaticAdditionalCostsNode` and its cursor."
type VStaticAdditionalCostsNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VStaticAdditionalCostsNode
}

"Техническая проблема"
type VTechProblemsNode implements Node {
  "Комментарий к технической проблеме"
  comment: String
  "Конструкция -> Технические проблемы"
  constructions(
    active: Boolean,
    active_Isnull: Boolean,
    after: String,
    before: String,
    buhInventNumber: String,
    buhInventNumber_Icontains: String,
    coordinates: String,
    coordinates_Isnull: Boolean,
    createdAt: DateTime,
    createdAt_Gt: DateTime,
    createdAt_Gte: DateTime,
    createdAt_Lt: DateTime,
    createdAt_Lte: DateTime,
    crew: ID,
    crew_Isnull: Boolean,
    first: Int,
    format_Title: String,
    id: ID,
    id_Isnull: Boolean,
    isNonrts: Boolean,
    isNonrts_Isnull: Boolean,
    last: Int,
    locationId_Isnull: Boolean,
    location_Area: Float,
    location_Area_Gt: Float,
    location_Area_Gte: Float,
    location_Area_Lt: Float,
    location_Area_Lte: Float,
    location_HasArea: Boolean,
    location_HasArea_Isnull: Boolean,
    location_LegalAddress_Address: String,
    location_LegalAddress_Address_Icontains: String,
    location_MarketingAddress_Address: String,
    location_MarketingAddress_Address_Icontains: String,
    location_Postcode_District_City_Country_Title: String,
    location_Postcode_District_City_Country_Title_Icontains: String,
    location_Postcode_District_City_Title: String,
    location_Postcode_District_City_Title_Icontains: String,
    location_Postcode_District_Title: String,
    location_Postcode_District_Title_Icontains: String,
    location_Postcode_Title: String,
    location_Postcode_Title_Icontains: String,
    model_Title: String,
    model_Title_Icontains: String,
    model_Underfamily_Family_Title: String,
    model_Underfamily_Family_Title_Icontains: String,
    model_Underfamily_Title: String,
    model_Underfamily_Title_Icontains: String,
    obstruction_Title: String,
    obstruction_Title_Icontains: String,
    offset: Int,
    "Порядок"
    orderBy: String,
    statusConnection: Boolean,
    statusConnection_Isnull: Boolean,
    techInventNumber: String,
    techInventNumber_Icontains: String,
    techPhoneConstruction: String,
    techPhoneConstruction_Icontains: String,
    updatedAt: DateTime,
    updatedAt_Gt: DateTime,
    updatedAt_Gte: DateTime,
    updatedAt_Lt: DateTime,
    updatedAt_Lte: DateTime
  ): VConstructionOptimizedNodeConnection!
  "The ID of the object."
  id: ID!
  "Наименование технической проблемы"
  title: String
}

type VTechProblemsNodeConnection {
  "Contains the nodes in this connection."
  edges: [VTechProblemsNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VTechProblemsNode` and its cursor."
type VTechProblemsNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VTechProblemsNode
}

"Подсемейство конструкции"
type VUnderFamilyConstructionNode implements Node {
  "Подсемейства -> Семейство конструкции"
  family: VFamilyConstructionNode!
  "The ID of the object."
  id: ID!
  "Модели -> Подсемейство конструкции"
  models(after: String, before: String, first: Int, id: ID, id_Isnull: Boolean, last: Int, offset: Int, title: String, title_Icontains: String, underfamily_Id: ID, underfamily_Id_Isnull: Boolean): VModelConstructionNodeConnection!
  "Наименование"
  title: String
}

type VUnderFamilyConstructionNodeConnection {
  "Contains the nodes in this connection."
  edges: [VUnderFamilyConstructionNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VUnderFamilyConstructionNode` and its cursor."
type VUnderFamilyConstructionNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VUnderFamilyConstructionNode
}

"Сектор деятельности"
type VWorkingSectorNode implements Node {
  "Сектор деятельности контрагента"
  brands(
    after: String,
    before: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partners_Id: ID,
    partners_Id_Isnull: Boolean,
    partners_Title: String,
    partners_Title_Icontains: String,
    title: String,
    title_Icontains: String,
    workingSector_Description: String,
    workingSector_Description_Icontains: String
  ): VBrandOptimizedNodeConnection!
  "Описание"
  description: String!
  "The ID of the object."
  id: ID!
  "Контрагенты -> Секторы деятельности"
  partners(
    advertisers_Id: ID,
    advertisers_Id_Isnull: Boolean,
    advertisers_Title: String,
    advertisers_Title_Icontains: String,
    after: String,
    before: String,
    binNumber: String,
    binNumber_Icontains: String,
    brands_Title: String,
    brands_Title_Icontains: String,
    first: Int,
    id: ID,
    id_Isnull: Boolean,
    isNonrtsOwner: Boolean,
    isNonrtsOwner_Isnull: Boolean,
    last: Int,
    offset: Int,
    "Порядок"
    orderBy: String,
    partnerType_Title: String,
    partnerType_Title_Icontains: String,
    title: String,
    title_Icontains: String,
    workingSectors_Title: String,
    workingSectors_Title_Icontains: String
  ): VPartnerOptimizedNodeConnection!
  "Наименование"
  title: String!
}

type VWorkingSectorNodeConnection {
  "Contains the nodes in this connection."
  edges: [VWorkingSectorNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `VWorkingSectorNode` and its cursor."
type VWorkingSectorNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: VWorkingSectorNode
}

"construction_history"
type Vconstruction_historyNode implements Node {
  created: DateTime!
  fieldType: String!
  "The ID of the object."
  id: ID!
  manipulationType: String!
  manipulationTypeAnnotated: String
  newState: JSONString
  previousState: JSONString
  protectedTargetId: Int!
  target: VConstructionOptimizedNode
  user: VCustomUserNode
}

type Vconstruction_historyNodeConnection {
  "Contains the nodes in this connection."
  edges: [Vconstruction_historyNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `Vconstruction_historyNode` and its cursor."
type Vconstruction_historyNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: Vconstruction_historyNode
}

"construction_history"
type Vconstruction_historyOptimizedNode implements Node {
  created: DateTime!
  fieldType: String!
  "The ID of the object."
  id: ID!
  manipulationType: String!
  manipulationTypeAnnotated: String
  newState: JSONString
  previousState: JSONString
  protectedTargetId: Int!
  target: VConstructionOptimizedNode
  user: VCustomUserNode
}

type Vconstruction_historyOptimizedNodeConnection {
  "Contains the nodes in this connection."
  edges: [Vconstruction_historyOptimizedNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `Vconstruction_historyOptimizedNode` and its cursor."
type Vconstruction_historyOptimizedNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: Vconstruction_historyOptimizedNode
}

"construction_side_history"
type Vconstruction_side_historyNode implements Node {
  created: DateTime!
  fieldType: String!
  "The ID of the object."
  id: ID!
  manipulationType: String!
  manipulationTypeAnnotated: String
  newState: JSONString
  previousState: JSONString
  protectedTargetId: Int!
  target: VConstructionSideOptimizedNode
  user: VCustomUserNode
}

type Vconstruction_side_historyNodeConnection {
  "Contains the nodes in this connection."
  edges: [Vconstruction_side_historyNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `Vconstruction_side_historyNode` and its cursor."
type Vconstruction_side_historyNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: Vconstruction_side_historyNode
}

"construction_side_history"
type Vconstruction_side_historyOptimizedNode implements Node {
  created: DateTime!
  fieldType: String!
  "The ID of the object."
  id: ID!
  manipulationType: String!
  manipulationTypeAnnotated: String
  newState: JSONString
  previousState: JSONString
  protectedTargetId: Int!
  target: VConstructionSideOptimizedNode
  user: VCustomUserNode
}

type Vconstruction_side_historyOptimizedNodeConnection {
  "Contains the nodes in this connection."
  edges: [Vconstruction_side_historyOptimizedNodeEdge]!
  "Pagination data for this connection."
  pageInfo: PageInfo!
}

"A Relay edge containing a `Vconstruction_side_historyOptimizedNode` and its cursor."
type Vconstruction_side_historyOptimizedNodeEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: Vconstruction_side_historyOptimizedNode
}

"""

Verify user account.

Receive the token that was sent by email.
If the token is valid, make the user verified
by making the `user.status.verified` field true.
"""
type VerifyAccount {
  errors: ExpectedErrorType
  success: Boolean
}

"""

Verify user secondary email.

Receive the token that was sent by email.
User is already verified when using this mutation.

If the token is valid, add the secondary email
to `user.status.secondary_email` field.

Note that until the secondary email is verified,
it has not been saved anywhere beyond the token,
so it can still be used to create a new account.
After being verified, it will no longer be available.
"""
type VerifySecondaryEmail {
  errors: ExpectedErrorType
  success: Boolean
}

"Same as `grapgql_jwt` implementation, with standard output."
type VerifyToken {
  errors: ExpectedErrorType
  payload: GenericScalar
  success: Boolean
}

"An enumeration."
enum AdditionalCostsCategory {
  "Налог"
  A_0
  "Монтаж"
  A_1
  "Печать"
  A_2
  "Аренда"
  A_3
  "Дополнительные расходы"
  A_4
}

"An enumeration."
enum AdditionalCostsCategoryInput {
  "Налог"
  A_0
  "Монтаж"
  A_1
  "Печать"
  A_2
  "Аренда"
  A_3
  "Дополнительные расходы"
  A_4
}

enum AdvertisingSidesOrderBy {
  "По коду рекламной стороны (убывание)"
  _advertisingSideCode
  "По названию рекламной стороны (убывание)"
  _advertisingSideTitle
  "По названию города (убывание)"
  _cityTitle
  "По названию района (убывание)"
  _districtTitle
  "По коду формата конструкции (убывание)"
  _formatCode
  "По наименованию формата конструкции (убывание)"
  _formatTitle
  "По идентификатору стороны (убывание)"
  _id
  "По типу владельца - РТС либо НОН РТС (убывание)"
  _isNonrts
  "По маркетинговому адресу (убывание)"
  _marketingAddress
  "По наименованию владельца (убывание)"
  _nonrtsOwnerTitle
  "По номеру конструкции в районе (убывание)"
  _numInDistrict
  "По идентификатору пакета (убывание)"
  _packageId
  "По названию пакета (убывание)"
  _packageTitle
  "По почтовому индексу (убывание)"
  _postcodeTitle
  "По коду стороны (убывание)"
  _sideCode
  "По размеру стороны (убывание)"
  _sideSize
  "По наименованию стороны (убывание)"
  _sideTitle
  "По статусу подключения - горит / не горит (убывание)"
  _statusConnection
  "По коду рекламной стороны (возрастание)"
  advertisingSideCode
  "По названию рекламной стороны (возрастание)"
  advertisingSideTitle
  "По названию города (возрастание)"
  cityTitle
  "По названию района (возрастание)"
  districtTitle
  "По коду формата конструкции (возрастание)"
  formatCode
  "По наименованию формата конструкции (возрастание)"
  formatTitle
  "По идентификатору стороны (возрастание)"
  id
  "По типу владельца - РТС либо НОН РТС (возрастание)"
  isNonrts
  "По маркетинговому адресу (возрастание)"
  marketingAddress
  "По наименованию владельца (возрастание)"
  nonrtsOwnerTitle
  "По номеру конструкции в районе (возрастание)"
  numInDistrict
  "По идентификатору пакета (возрастание)"
  packageId
  "По названию пакета (возрастание)"
  packageTitle
  "По почтовому индексу (возрастание)"
  postcodeTitle
  "По коду стороны (возрастание)"
  sideCode
  "По размеру стороны (возрастание)"
  sideSize
  "По наименованию стороны (возрастание)"
  sideTitle
  "По статусу подключения - горит / не горит (возрастание)"
  statusConnection
}

"An enumeration."
enum ChangeLogActionOnModel {
  "Создание"
  CREATE
  "Удаление"
  DELETE
  "Изменение"
  UPDATE
}

enum EnumMountingRange {
  "Внеочередной"
  HIGEST
  "Высокий"
  HIGH
  "Низкий"
  LOW
  "Самый низкий"
  LOWEST
  "Средний"
  MEDIUM
}

enum MountingCommercialProjectsOrderBy {
  "По наименованию рекламного агентства (убывание)"
  _agencyTitle
  "По менеджеру бек-оффиса (убывание)"
  _backOfficeManagerTitle
  "По названию бренда (убывание)"
  _brandTitle
  "По городу (убывание)"
  _cityTitle
  "По наименованию рекламодателя (убывание)"
  _clientTitle
  "По коду проекта (убывание)"
  _code
  "По дате создания проекта (убывание)"
  _createdAt
  "По менеджеру по продажам (убывание)"
  _salesManagerTitle
  "По дате начала проекта (убывание)"
  _startDate
  "По названию проекта (убывание)"
  _title
  "По сектору деятельности (убывание)"
  _workingSectorTitle
  "По наименованию рекламного агентства (возрастание)"
  agencyTitle
  "По менеджеру бек-оффиса (возрастание)"
  backOfficeManagerTitle
  "По названию бренда (возрастание)"
  brandTitle
  "По городу (возрастание)"
  cityTitle
  "По наименованию рекламодателя (возрастание)"
  clientTitle
  "По коду проекта (возрастание)"
  code
  "По дате создания проекта (возрастание)"
  createdAt
  "По менеджеру по продажам (возрастание)"
  salesManagerTitle
  "По дате начала проекта (возрастание)"
  startDate
  "По названию проекта (возрастание)"
  title
  "По сектору деятельности (возрастание)"
  workingSectorTitle
}

"An enumeration."
enum MountingMountingRange {
  "Средний"
  A_0
  "Высокий"
  A_10
  "Внеочередной"
  A_100
  "Низкий"
  _10
  "Самый низкий"
  _100
}

"An enumeration."
enum MountingMountingRangeInput {
  "Средний"
  A_0
  "Высокий"
  A_10
  "Внеочередной"
  A_100
  "Низкий"
  _10
  "Самый низкий"
  _100
}

enum MountingOrderBy {
  _addressLegal
  _addressMarketing
  "По названию рекламной стороны (убывание)"
  _advertisingSideTitle
  "По коду проекта (убывание)"
  _appendixCode
  _cityTitle
  "По комментарию к монтажу (убывание)"
  _comment
  "По коду конструкции (убывание)"
  _constructionSideCode
  "По городу экипажа (убывание)"
  _crewCity
  "По имени представителя экипажа (убывание)"
  _crewName
  "По номеру экипажа (убывание)"
  _crewNum
  "По телефону экипажа (убывание)"
  _crewPhone
  "По дате начала и окончания (убывание)"
  _date
  "По названию дизайна (убывание)"
  _designTitle
  _districtTitle
  "Выгружено ранее (убывание)"
  _downloadedEarly
  "По дате окончания монтажа (убывание)"
  _endMounting
  "По названию семейства (убывание)"
  _familyTitle
  "По названию формата (убывание)"
  _formatTitle
  _isNonRts
  "По названию модели (убывание)"
  _modelTitle
  "По статусу \"монтаж выполнен\" / \"монтаж не выполнен\" (убывание)"
  _mountingDone
  "По названию задачи (убывание)"
  _mountingTaskTitle
  _numInDistrict
  "По № фото (убывание)"
  _photoNames
  _postcodeTitle
  "По коду проекта (убывание)"
  _projectCode
  "По названию проекта (убывание)"
  _projectTitle
  "По приоритету (убывание)"
  _range
  "По размеру стороны (убывание)"
  _sideSize
  "По названию стороны (убывание)"
  _sideTitle
  "По дате начала монтажа (убывание)"
  _startMounting
  _statusConnection
  "По названию подсемейства (убывание)"
  _underfamilyTitle
  "По названию демонтируемого дизайна (убывание)"
  _unmountingDesignTitle
  "По статусу \"демонтаж выполнен\" / \"демонтаж не выполнен\" (убывание)"
  _unmountingDone
  addressLegal
  addressMarketing
  "По названию рекламной стороны (возрастание)"
  advertisingSideTitle
  "По коду проекта (возрастание)"
  appendixCode
  cityTitle
  "По комментарию к монтажу (возрастание)"
  comment
  "По коду конструкции (возрастание)"
  constructionSideCode
  "По городу экипажа (возрастание)"
  crewCity
  "По имени представителя экипажа (возрастание)"
  crewName
  "По номеру экипажа (возрастание)"
  crewNum
  "По телефону экипажа (возрастание)"
  crewPhone
  "По дате начала и окончания (возрастание)"
  date
  "По названию дизайна (возрастание)"
  designTitle
  districtTitle
  "Выгружено ранее (возрастание)"
  downloadedEarly
  "По дате окончания монтажа (возрастание)"
  endMounting
  "По названию семейства (возрастание)"
  familyTitle
  "По названию формата (возрастание)"
  formatTitle
  isNonRts
  "По названию модели (возрастание)"
  modelTitle
  "По статусу \"монтаж выполнен\" / \"монтаж не выполнен\" (возрастание)"
  mountingDone
  "По названию задачи (возрастание)"
  mountingTaskTitle
  numInDistrict
  "По № фото (возрастание)"
  photoNames
  postcodeTitle
  "По коду проекта (возрастание)"
  projectCode
  "По названию проекта (возрастание)"
  projectTitle
  "По приоритету (возрастание)"
  range
  "По размеру стороны (возрастание)"
  sideSize
  "По названию стороны (возрастание)"
  sideTitle
  "По дате начала монтажа (возрастание)"
  startMounting
  statusConnection
  "По названию подсемейства (возрастание)"
  underfamilyTitle
  "По названию демонтируемого дизайна (возрастание)"
  unmountingDesignTitle
  "По статусу \"демонтаж выполнен\" / \"демонтаж не выполнен\" (возрастание)"
  unmountingDone
}

enum MountingProjectCardCompaniesOrderBy {
  "По количеству архивных дизайнов (убывание)"
  _archivedDesigns
  "По городу (убывание)"
  _cityTitle
  "По коду (убывание)"
  _id
  "По дате начала (убывание)"
  _start
  "По наименованию (убывание)"
  _title
  "По общему количеству дизайнов (убывание)"
  _totalDesigns
  "По количеству архивных дизайнов (возрастание)"
  archivedDesigns
  "По городу (возрастание)"
  cityTitle
  "По коду (возрастание)"
  id
  "По дате начала (возрастание)"
  start
  "По наименованию (возрастание)"
  title
  "По общему количеству дизайнов (возрастание)"
  totalDesigns
}

enum MountingProjectCardOrderBy {
  "По юридическому адресу (убывание)"
  _addressLegal
  "По маркетинговому адресу (убывание)"
  _addressMarketing
  "По рекламной стороне (убывание)"
  _advertisingSideTitle
  "По городу (убывание)"
  _cityTitle
  "По комментариям (убывание)"
  _comments
  "По коду стороны (убывание)"
  _constructionSideCode
  "По экипажу (убывание)"
  _crews
  "По дате монтажа (убывание)"
  _dateMounting
  "По дате демонтажа (убывание)"
  _dateUnmounting
  "По названию файла дизайна (убывание)"
  _designFilename
  "По формату (убывание)"
  _formatTitle
  "По имени файла дополнительного дневного фотоотчета (убывание)"
  _photoAdditionalDay
  "По дате дневного доп. фотоотчета (убывание)"
  _photoAdditionalDayDate
  "По имени файла дополнительного ночного фотоотчета (убывание)"
  _photoAdditionalNight
  "По дате ночного доп. фотоотчета (убывание)"
  _photoAdditionalNightDate
  "По дате фотоотчета (убывание)"
  _photoImagesDate
  "По имени файла фотоотчета (убывание)"
  _photoImagesFilename
  "По названию файла предыдущего дизайна (убывание)"
  _previousDesignFilename
  "По факту наличия брендинга (убывание)"
  _reservation_Branding
  "По дате начала бронирования (убывание)"
  _reservation_DateFrom
  "По дате окончания бронирования (убывание)"
  _reservation_DateTo
  "РТС/НОН РТС (убывание)"
  _rtsNonrts
  "По размеру формата (убывание)"
  _sideSize
  "По наличию освещения (убывание)"
  _statusConnection
  "По юридическому адресу (возрастание)"
  addressLegal
  "По маркетинговому адресу (возрастание)"
  addressMarketing
  "По рекламной стороне (возрастание)"
  advertisingSideTitle
  "По городу (возрастание)"
  cityTitle
  "По комментариям (возрастание)"
  comments
  "По коду стороны (возрастание)"
  constructionSideCode
  "По экипажу (возрастание)"
  crews
  "По дате монтажа (возрастание)"
  dateMounting
  "По дате демонтажа (возрастание)"
  dateUnmounting
  "По названию файла дизайна (возрастание)"
  designFilename
  "По формату (возрастание)"
  formatTitle
  "По имени файла дополнительного дневного фотоотчета (возрастание)"
  photoAdditionalDay
  "По дате дневного доп. фотоотчета (возрастание)"
  photoAdditionalDayDate
  "По имени файла дополнительного ночного фотоотчета (возрастание)"
  photoAdditionalNight
  "По дате ночного доп. фотоотчета (возрастание)"
  photoAdditionalNightDate
  "По дате фотоотчета (возрастание)"
  photoImagesDate
  "По имени файла фотоотчета (возрастание)"
  photoImagesFilename
  "По названию файла предыдущего дизайна (возрастание)"
  previousDesignFilename
  "По факту наличия брендинга (возрастание)"
  reservation_Branding
  "По дате начала бронирования (возрастание)"
  reservation_DateFrom
  "По дате окончания бронирования (возрастание)"
  reservation_DateTo
  "РТС/НОН РТС (возрастание)"
  rtsNonrts
  "По размеру формата (возрастание)"
  sideSize
  "По наличию освещения (возрастание)"
  statusConnection
}

enum MountingProjectsOrderBy {
  "По названию подсемейства (убывание)"
  _brandTitle
  "По приоритету (убывание)"
  _cityTitle
  "По названию рекламодателя (убывание)"
  _clientTitle
  "По коду проекта (убывание)"
  _code
  "По идентификатору проекта (убывание)"
  _id
  "По суммарному числу сторон (убывание)"
  _sidesAll
  "По числу распределенных сторон (убывание)"
  _sidesDistributed
  "По числу распределенных сторон (убывание)"
  _sidesNondistributed
  "По числу проданных сторон (убывание)"
  _sidesSaled
  "По названию семейства (убывание)"
  _title
  "По названию подсемейства (возрастание)"
  brandTitle
  "По приоритету (возрастание)"
  cityTitle
  "По названию рекламодателя (возрастание)"
  clientTitle
  "По коду проекта (возрастание)"
  code
  "По идентификатору проекта (возрастание)"
  id
  "По суммарному числу сторон (возрастание)"
  sidesAll
  "По числу распределенных сторон (возрастание)"
  sidesDistributed
  "По числу распределенных сторон (возрастание)"
  sidesNondistributed
  "По числу проданных сторон (возрастание)"
  sidesSaled
  "По названию семейства (возрастание)"
  title
}

"An enumeration."
enum PackageMonth {
  "Apr"
  APRIL
  "Aug"
  AUGUST
  "Dec"
  DECEMBER
  "Feb"
  FEBRUARY
  "Jan"
  JANUARY
  "Jul"
  JULY
  "Jun"
  JUNE
  "Mar"
  MARCH
  "May"
  MAY
  "Nov"
  NOVEMBER
  "Oct"
  OCTOBER
  "Sep"
  SEPTEMBER
}

enum PackagesInfoOrderBy {
  "По идентификатору пакета (убывание)"
  _id
  "По месяцу (убывание)"
  _month
  "По названию (убывание)"
  _title
  "По году (убывание)"
  _year
  "По идентификатору пакета (возрастание)"
  id
  "По месяцу (возрастание)"
  month
  "По названию (возрастание)"
  title
  "По году (возрастание)"
  year
}

enum Period {
  CURRENT_MONTH
  CURRENT_QUARTER
  CURRENT_WEEK
  CURRENT_YEAR
  CUSTOM
  LAST_MONTH
  LAST_QUARTER
  LAST_WEEK
  LAST_YEAR
}

"An enumeration."
enum ReservationTypeIkey {
  "Free"
  A_0
  "Reserved"
  A_1
  "Cancelled"
  A_2
  "Confirmed"
  A_3
  "Saled"
  A_4
  "Unavailable"
  A_5
}

"An enumeration."
enum ReservationTypeIkeyInput {
  "Free"
  A_0
  "Reserved"
  A_1
  "Cancelled"
  A_2
  "Confirmed"
  A_3
  "Saled"
  A_4
  "Unavailable"
  A_5
}

enum Role {
  appendix_creator
  appendix_sales_manager
  contract_creator
  contract_initiator
  contract_sales_manager
  project_back_office_manager
  project_creator
  project_sales_manager
}

"An enumeration."
enum StaticAdditionalCostsCategory {
  "Монтаж"
  A_0
  "Печать"
  A_1
  "Налог"
  A_2
  "Скидка на налог"
  A_3
  "Согласование эскизов"
  A_4
  "Оформление брендированных конструкций"
  A_5
  "Дополнительный монтаж"
  A_6
  "Дополнительный фотоотчет"
  A_7
  "Дополнительная печать"
  A_8
}

"An enumeration."
enum StaticAdditionalCostsCategoryInput {
  "Монтаж"
  A_0
  "Печать"
  A_1
  "Налог"
  A_2
  "Скидка на налог"
  A_3
  "Согласование эскизов"
  A_4
  "Оформление брендированных конструкций"
  A_5
  "Дополнительный монтаж"
  A_6
  "Дополнительный фотоотчет"
  A_7
  "Дополнительная печать"
  A_8
}

enum TimeOfDay {
  DAY
  NIGHT
}

enum TypeOfMounting {
  COMMON_TASK
  MOUNTING
}

enum UnitOfTime {
  DAY
  MONTH
  WEEK
}

enum UserRelatedPartnersOrderBy {
  "По дате создания контрагента (убывание)"
  _createdAt
  "По наименованию контрагента (убывание)"
  _title
  "По дате редактирования контрагента (убывание)"
  _updatedAt
  "По дате создания контрагента (возрастание)"
  createdAt
  "По наименованию контрагента (возрастание)"
  title
  "По дате редактирования контрагента (возрастание)"
  updatedAt
}

enum UserRelatedProjectsOrderBy {
  "По наименованию рекламного агентства (убывание)"
  _agencyTitle
  "По менеджеру бек-оффиса (убывание)"
  _backOfficeManagerTitle
  "По названию бренда (убывание)"
  _brandTitle
  "По городу (убывание)"
  _cityTitle
  "По наименованию рекламодателя (убывание)"
  _clientTitle
  "По коду проекта (убывание)"
  _code
  "По дате создания проекта (убывание)"
  _createdAt
  "По менеджеру по продажам (убывание)"
  _salesManagerTitle
  "По дате начала проекта (убывание)"
  _startDate
  "По названию проекта (убывание)"
  _title
  "По сектору деятельности (убывание)"
  _workingSectorTitle
  "По наименованию рекламного агентства (возрастание)"
  agencyTitle
  "По менеджеру бек-оффиса (возрастание)"
  backOfficeManagerTitle
  "По названию бренда (возрастание)"
  brandTitle
  "По городу (возрастание)"
  cityTitle
  "По наименованию рекламодателя (возрастание)"
  clientTitle
  "По коду проекта (возрастание)"
  code
  "По дате создания проекта (возрастание)"
  createdAt
  "По менеджеру по продажам (возрастание)"
  salesManagerTitle
  "По дате начала проекта (возрастание)"
  startDate
  "По названию проекта (возрастание)"
  title
  "По сектору деятельности (возрастание)"
  workingSectorTitle
}

"Код"
input AdvertisingSideCodeInputObjectType {
  "Код рекламной стороны"
  advertisingSide_Code: String
  "Код стороны"
  advertisingSide_Side_Code: String
  "Код формата"
  advertisingSide_Side_Format_Code_Icontains: String
  "Почтовый код содержит подстроку"
  construction_Location_Postcode_Title_Icontains: String
  "Номер в районе"
  construction_NumInDistrict: Int
}

"Данные для пакетного создания Дополнительных расходов (РТС)"
input BatchCreateAdditionalCostsInput {
  "Дополнительные расходы -> Агентская комиссия"
  agencyCommission: ID
  "Дополнительные расходы НОН РТС -> Приложение"
  appendix: [ID]
  "Категория дополнительного расхода"
  category: AdditionalCostsCategoryInput
  "Дополнительные расходы -> Город"
  city: ID
  "Стоимость после скидки на дополнительный расход"
  costAfterDiscount: Float
  "Количество"
  count: Int
  "Процент скидки на дополнительный расход"
  discountPercent: Float
  "Окончание периода"
  endPeriod: DateTime
  "Цена"
  price: Float
  "Дополнительные расходы -> Проект"
  project: ID
  "Начало периода"
  startPeriod: DateTime
  "Название"
  title: String
}

"Данные для пакетного создания Адресного справочника"
input BatchCreateAddressesInput {
  actualAddressPartners: [ID]
  "Адрес"
  address: String!
  constructionsByActualAdress: [ID]
  constructionsByMaketingAdress: [ID]
  legalAddressPartners: [ID]
  locationsByActualAdress: [ID]
  locationsByMaketingAdress: [ID]
  "Адреса -> Почтовый индекс"
  postcode: ID
}

"Данные для пакетного создания Рекламной промо-компании"
input BatchCreateAdvertPromoCompanyInput {
  "Рекламная компания -> Город"
  city: ID
  designs: [ID]
  "Рекламная компания -> Проект"
  project: ID!
  "Дата начала"
  start: DateTime
  "Название промо-компании"
  title: String
}

"Данные для пакетного создания Рекламной стороны"
input BatchCreateAdvertisingSideInput {
  "Буквенный код рекламной стороны"
  code: String
  constructionSides: [ID]
  "Рекламные стороны -> Сторона"
  side: ID!
  "Наименование рекламной стороны"
  title: String
}

"Данные для пакетного создания Агентской комиссии"
input BatchCreateAgencyCommissionInput {
  additionalCosts: [ID]
  "Агент для перечисления агентской коммиссии"
  agent: ID
  estimateNonRts: [ID]
  partners: [ID]
  "Процент агентской комисии"
  percent: Float
  projects: [ID]
  reservations: [ID]
  "Агентская комиссия распространяется на доп. расходы"
  toAdditional: Boolean
  "Агентская комиссия распространяется на монтаж"
  toMount: Boolean
  "Агентская комиссия распространяется на налог"
  toNalog: Boolean
  "Агентская комиссия распространяется на маржу НОН РТС"
  toNonrts: Boolean
  "Агентская комиссия распространяется на печать"
  toPrint: Boolean
  "Агентская комиссия распространяется на аренду"
  toRent: Boolean
  "Сумма агентской комиссии"
  value: Float
}

"Данные для пакетного создания Приложения к договора"
input BatchCreateAppendixInput {
  additionalCosts: [ID]
  additionalCostsNonrts: [ID]
  additionallyAgreement: Upload
  "Номер приложения"
  code: String
  "Приложения к договору -> Договор"
  contract: ID
  "Дата создания приложения"
  createdDate: DateTime
  "Приложения к договору -> Создатель (кто внес данные)"
  creator: ID
  invoices: [ID]
  "В архиве"
  isArchive: Boolean
  "Номер приложения в месяце"
  numInMonth: Int
  packagesReservations: [ID]
  "Срок оплаты"
  paymentDate: DateTime
  "Период приложения - дата окончания размещения"
  periodEndDate: DateTime
  "Период приложения - дата начала размещения"
  periodStartDate: DateTime
  "Приложения к договору -> Проект"
  project: ID
  reservations: [ID]
  "Статус возврата"
  returnStatus: Boolean
  "Приложения к договору -> Менеджер по продажам"
  salesManager: ID
  "Подписант в именительном падеже"
  signatoryOne: String
  "Должность подписанта"
  signatoryPosition: String
  "Подписант в родительном падеже"
  signatoryTwo: String
}

"Данные для пакетного создания Изображения бренда"
input BatchCreateBrandImageInput {
  active: Boolean
  "Бренд"
  brand: ID
  img: Upload
}

"Данные для пакетного создания Бренда"
input BatchCreateBrandInput {
  brandImages: [ID]
  "Код"
  code: String
  "Связанные дизайны"
  designs: [ID]
  partners: [ID]
  projects: [ID]
  "Наименование"
  title: String
  "Сектор деятельности контрагента"
  workingSector: ID
}

"Данные для пакетного создания Города"
input BatchCreateCityInput {
  additionalCostsNonrts: [ID]
  advertPromoCompanies: [ID]
  "Города -> Страна"
  country: ID!
  crews: [ID]
  districts: [ID]
  packages: [ID]
  placementPrices: [ID]
  salesAdditionalCosts: [ID]
  salesManagerOfProjects: [ID]
  staticAdditionalCosts: [ID]
  "Название"
  title: String
}

"Данные для пакетного создания Типа клиента"
input BatchCreateClientTypeInput {
  "Описание"
  description: String!
  partners: [ID]
  "Название"
  title: String!
}

"Данные для пакетного создания Конструкции"
input BatchCreateConstructionInput {
  "Активная или демонтировананя"
  active: Boolean
  "Комментарий"
  backComment: String
  "Инвентарный номер - 1C"
  buhInventNumber: String
  constructionHistorySet: [ID]
  constructionnotificationSet: [ID]
  "Координаты"
  coordinates: String
  "Создать новый маркетинговый адрес с заданным (или незаданным) почтовым кодом postcode: ID"
  createMarketingAddress: String
  "Создать новую помеху с заданным названием: String"
  createObstruction: String
  "Создать новую техническую проблему с заданным названием и комментарием: String"
  createTechProblem: String
  "Дата создания"
  creationDate: DateTime
  "Конструкции -> Экипаж"
  crew: ID
  "Сторонам конструкции присвоены специализированные экипажи"
  crewsHasSpecialForSides: Boolean
  formats: [ID]
  "В архиве"
  isArchive: Boolean
  "Конструкция НОН РТС"
  isNonrts: Boolean
  "Местоположения -> Юридический адрес"
  legalAddress: ID
  "Конструкции -> Местоположение"
  location: ID
  "Местоположения -> Маркетинговый адрес"
  marketingAddress: ID
  "Конструкции -> Модель конструкции"
  model: ID
  mountings: [ID]
  "Конструкции -> Владелец НОН РТС"
  nonrtsOwner: ID
  "Коментарий о владельце НОН РТС"
  nonrtsOwnerComment: String
  "Порядковый номер конструкции в районе"
  numInDistrict: Int
  "Конструкции -> Помеха"
  obstruction: ID
  ownedSides: [ID]
  photo: Upload
  "Местоположения -> Почтовый индекс"
  postcode: ID
  "Ссылка на сайт с презентацией конструкции"
  presentationUrl: String
  rowIdx: Int
  "Статус доступности конструкции"
  statusAvailability: Boolean
  "Статус по подключению"
  statusConnection: Boolean
  "Комментарий тех. отдела"
  techComment: String
  "Инвентарный номер - Техотдел"
  techInventNumber: String
  "Номер телефона конструкции"
  techPhoneConstruction: String
  "Конструкция -> Технические проблемы"
  techProblem: [ID]
  "Список комментариев к тех. проблемам"
  techProblemAllComment: String
  "Комментарий к технической проблеме: String"
  techProblemComment: String
}

"Данные для пакетного создания Construction notification"
input BatchCreateConstructionNotificationInput {
  "Конструкция"
  construction: ID
  "Прочитано"
  read: Boolean
  "Тема"
  topic: String
  "Пользователь"
  user: ID
}

"Данные для пакетного создания Стороны конструкции"
input BatchCreateConstructionSideInput {
  "Стророны конструкции -> Рекламная сторона"
  advertisingSide: ID
  "Статус доступности стороны"
  availabilitySide: Boolean
  "Стророны конструкции -> Конструкция"
  construction: ID
  constructionSideHistorySet: [ID]
  "Конструкции -> Экипаж"
  crew: ID
  estimateNonRts: [ID]
  "В архиве"
  isArchive: Boolean
  mountings: [ID]
  "Стророны конструкции -> Пакет"
  package: ID
  "Стророны конструкции -> Назначение стороны"
  purposeSide: ID
  reservation: [ID]
  "Ограничение стороны конструкции по продажам"
  saleConstraint: Boolean
}

"Данные для пакетного создания Контактного лица"
input BatchCreateContactPersonInput {
  "E-mail"
  email: String!
  "ФИО"
  name: String!
  "Контактные лица -> Контрагент"
  partner: ID
  "Телефон"
  phone: String!
}

"Данные для пакетного создания Договора"
input BatchCreateContractInput {
  additionallyAgreementPdf: Upload
  "Документ, на основании которого действует подписант"
  basedOnDocument: String
  "Код"
  code: String
  "Комментарий"
  comment: String
  contractAppendices: [ID]
  contractPdf: Upload
  "Договора -> Тип договора"
  contractType: ID
  "Договора -> Создатель (кто внес данные)"
  creator: ID
  "Дата окончания действия"
  end: DateTime
  "Договора -> Инициатор"
  initiator: ID
  invoices: [ID]
  "В архиве"
  isArchive: Boolean
  "Договора -> Контрагент"
  partner: ID
  "Срок оплаты"
  paymentDate: DateTime
  "Дата заключения"
  registrationDate: DateTime
  "Статус возврата"
  returnStatus: Boolean
  "Договора -> Менеджер по продажам"
  salesManager: ID
  "Порядковый номер договора"
  serialNumber: String
  "Подписант в именительном падеже"
  signatoryOne: String
  "Должность подписанта"
  signatoryPosition: String
  "Подписант в родительном падеже"
  signatoryTwo: String
  "Дата начала действия"
  start: DateTime
}

"Данные для пакетного создания Типа договора"
input BatchCreateContractTypeInput {
  contracts: [ID]
  "Тип договора"
  name: String
}

"Данные для пакетного создания Страны"
input BatchCreateCountryInput {
  cities: [ID]
  "Страна"
  title: String
}

"Данные для пакетного создания Экипажа"
input BatchCreateCrewInput {
  "Экипажи -> Город"
  city: ID
  constructionSides: [ID]
  constructions: [ID]
  mountings: [ID]
  "Имя человека"
  name: String
  "Номер экипажа"
  num: String
  "Номер телефона монтажника"
  phone: String
}

"Данные для пакетного создания Пользователя"
input BatchCreateCustomUserInput {
  backOfficeManagersOfProjects: [ID]
  changelogSet: [ID]
  constructionHistorySet: [ID]
  constructionSideHistorySet: [ID]
  createdContracts: [ID]
  createdContractsAppendices: [ID]
  createdProjects: [ID]
  "date joined"
  dateJoined: DateTime
  "Почтовый адрес"
  email: String
  "Пользователи -> Должность"
  employeePosition: ID
  "first name"
  firstName: String
  "Пользователи <-> Группы"
  groups: [ID]
  initiatedContracts: [ID]
  "active Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
  isActive: Boolean
  "staff status. Designates whether the user can log into this admin site."
  isStaff: Boolean
  "Наличие прав суперпользователя"
  isSuperuser: Boolean
  "last login"
  lastLogin: DateTime
  "last name"
  lastName: String
  logentrySet: [ID]
  "Ф.И.О."
  name: String
  notificationSet: [ID]
  "password"
  password: String
  "Номер телефона"
  phone: String
  previousPasswords: [ID]
  refreshTokens: [ID]
  salesManagerOfProjects: [ID]
  salesManagerOnContracts: [ID]
  salesManagerOnContractsAppendices: [ID]
  "План по продажам на год"
  salesYearPlan: Float
  status: ID
  "Индивидуальные права данного пользователя."
  userPermissions: [ID]
  "username, Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
  username: String!
}

"Данные для пакетного создания Дизайна"
input BatchCreateDesignInput {
  "Дизайн -> Рекламная компания"
  advertPromoCompany: ID
  "Дизайн в архиве"
  archived: Boolean
  brandsForDesign: [ID]
  designMountings: [ID]
  designUnmountings: [ID]
  img: Upload
  "Текущий дизайн"
  isCurrent: Boolean
  previousDesignMountings: [ID]
  "Дата начала действия дизайна"
  startedAt: DateTime
  "Название дизайна"
  title: String
}

"Данные для пакетного создания Района"
input BatchCreateDistrictInput {
  "Районы -> Город"
  city: ID!
  lastSerialNumbers: ID
  partners: [ID]
  postcodes: [ID]
  "Название"
  title: String
}

"Данные для пакетного создания Должности"
input BatchCreateEmployeePositionInput {
  "Наименование"
  title: String!
  users: [ID]
}

"Данные для пакетного создания Дополнительного расхода НОН РТС"
input BatchCreateEstimateNonRtsInput {
  "Дополнительные расходы НОН РТС -> Агентская комиссия"
  agencyCommission: ID
  "Дополнительные расходы НОН РТС -> Приложение"
  appendix: [ID]
  "Дополнительные расходы НОН РТС -> Город"
  city: ID
  "Данные о НОН РТС стоимости -> Сторона конструкции"
  constructionSide: ID
  "Количество (НОН РТС)"
  count: Int
  "Конец периода"
  endPeriod: DateTime
  "Входящая стоимость - Доп. расходы"
  incomingAdditional: Float
  "Входящая стоимость - Монтаж"
  incomingInstallation: Float
  "Входящая стоимость - Производство"
  incomingManufacturing: Float
  "Входящая стоимость - Печать"
  incomingPrinting: Float
  "Входящая стоимость - Аренда"
  incomingRent: Float
  "Входящая стоимость - Налог"
  incomingTax: Float
  "Дополнительные расходы НОН РТС -> Проект"
  project: ID
  reservation: ID
  "Стоимость продажи - Доп. расходы"
  saleAdditional: Float
  "Стоимость продажи - Монтаж"
  saleInstallation: Float
  "Стоимость продажи - Производство"
  saleManufacturing: Float
  "Стоимость продажи - Печать"
  salePrinting: Float
  "Стоимость продажи - Аренда"
  saleRent: Float
  "Стоимость продажи - Налог"
  saleTax: Float
  "Начало периода"
  startPeriod: DateTime
  "Тип (наружная реклама, ТВ, радио, метро, другое)"
  title: String
}

"Данные для пакетного создания Семейства конструкции"
input BatchCreateFamilyConstructionInput {
  locations: [ID]
  "Наименование"
  title: String
  underfamilies: [ID]
}

"Данные для пакетного создания Формата"
input BatchCreateFormatInput {
  "Код формата"
  code: String
  constructionsForFormat: [ID]
  "Форматы -> Модель конструкции"
  model: ID!
  placementPrices: [ID]
  sides: [ID]
  staticAdditionalCosts: [ID]
  "Наименование формата"
  title: String
}

"Данные для пакетного создания Группы"
input BatchCreateGroupInput {
  customUser: [ID]
  name: String!
  permissions: [ID]
}

"Данные для пакетного создания Счёта"
input BatchCreateInvoiceInput {
  "Счета -> Приложение к договору"
  appendix: ID
  "Выставление АВР"
  avr: Boolean
  "Счета -> Договор"
  contract: ID
  "Способ оплаты клиентом"
  customerPaymentMethod: String
  "Счета -> Контрагент, на котрого выставляется счет"
  partner: ID
  "Оплата не позднее"
  paymentLastDate: DateTime
  "Счета -> Проект"
  project: ID
  "Сумма без НДС"
  sumWithoutNds: Float
  "Общая сумма"
  wholeSum: Float
}

"Данные для пакетного создания Местоположения"
input BatchCreateLocationInput {
  "Площадь (га)"
  area: Float
  "Номер гос акта на землю"
  areaAct: String
  "Дата гос акта на землю"
  areaActDate: DateTime
  "Кадастровый номер"
  cadastralNumber: String
  "Комментарий"
  comment: String
  constructionRowIdx: Int
  constructions: [ID]
  document: Upload
  "Местоположения -> Семейство устанавливаемых конструкций в данном месте"
  familyConstruction: ID
  "Наличие земли"
  hasArea: Boolean
  "В архиве"
  isArchive: Boolean
  "Местоположение конструкций, не принадлежащих РТС"
  isNonrtsLocation: Boolean
  "Местоположения -> Юридический адрес"
  legalAddress: ID
  "Местоположения -> Маркетинговый адрес"
  marketingAddress: ID
  "Местоположения -> Почтовый индекс"
  postcode: ID
  "Местоположения -> Целевое назначение местоположения"
  purposeLocation: ID
  "Местоположения -> Статус оформления земельного участка"
  registrationStatusLocation: ID
  "Регистрация договора"
  rentContractCreatedAt: DateTime
  "Дата окончания договора"
  rentContractEnd: DateTime
  "Номер договора"
  rentContractNumber: String
  "Дата начала договора"
  rentContractStart: DateTime
  "Номер постановления от Акимата"
  resolutionNumber: String
  "Дата постановления от Акимата"
  resolutionNumberDate: DateTime
  rowIdx: Int
}

"Данные для пакетного создания Модели конструкции"
input BatchCreateModelConstructionInput {
  constructions: [ID]
  formats: [ID]
  title: String
  "Модели -> Подсемейство конструкции"
  underfamily: ID!
}

"Данные для пакетного создания Монтажа"
input BatchCreateMountingInput {
  "В архиве"
  archived: Boolean
  "Комментарий"
  comment: String
  "Монтажи -> конструкци"
  construction: ID
  "Монтажи -> стороны конструкций"
  constructionSide: ID
  "Монтажи -> Экипаж"
  crew: ID
  "Монтажи -> Монтируемый Дизайн"
  design: ID
  "Выгружено ранее"
  downloadedEarly: DateTime
  "Дата демонтажа"
  endMounting: DateTime
  "Монтаж выполнен"
  mountingDone: Boolean
  "Уровень приоритетности"
  mountingRange: MountingMountingRangeInput
  "Монтажи -> Ремонтно-монтажная работа"
  mountingTask: ID
  photos: [ID]
  "Предыдущий дизайн"
  previousDesign: ID
  "Монтажи -> Бронирование"
  reservation: ID
  "Дата монтажа"
  startMounting: DateTime
  "Монтажи -> Демонтируемый Дизайн"
  unmountingDesign: ID
  "Демонтаж выполнен"
  unmountingDone: Boolean
}

"Данные для пакетного создания Фотоотчёта о монтажа"
input BatchCreateMountingPhotoInput {
  "Дата фотоотчета о монтаже"
  date: DateTime
  "Монтажная работа -> фотоотчет о монтаже"
  mounting: ID!
  "Номер фотографии о монтаже"
  num: String
  photo: Upload
}

"Данные для пакетного создания Ремонтно-монтажной работы"
input BatchCreateMountingTaskInput {
  mountings: [ID]
  "Наименование"
  title: String
}

"Данные для пакетного создания Уведомления"
input BatchCreateNotificationInput {
  constructionnotification: ID
  "Прочитано"
  read: Boolean
  "Тема"
  topic: String
  "Пользователь"
  user: ID
}

"Данные для пакетного создания Помехи"
input BatchCreateObstructionInput {
  constructions: [ID]
  "Помеха"
  title: String!
}

"Данные для пакетного создания Контрагента"
input BatchCreatePartnerInput {
  "Контрагенты -> Фактический адрес"
  actualAddress: ID
  "Контрагенты -> Фактический адрес - Почтовый индекс"
  actualAddressPostcode: ID
  advertiserClients: [ID]
  "Контрагенты <-> Связанные рекламодатели"
  advertisers: [ID]
  "Контрагенты -> Агентская комиссия"
  agencyCommission: ID
  agencycommissionSet: [ID]
  "Банк получателя"
  bankRecipient: String
  "БИК"
  bik: String
  "БИН"
  binNumber: String
  "Контрагенты <-> Связанные бренды"
  brands: [ID]
  "Расчетный счет"
  checkingAccount: String
  "Контрагенты -> Тип клиента"
  clientType: ID
  "Комментарий"
  comment: String
  contactPersons: [ID]
  contracts: [ID]
  "Процент скидки на клиента"
  discountClientPercent: Float
  "Процент скидки на налог"
  discountNalogPercent: Float
  "Процент скидки по прайсу"
  discountPricePercent: Float
  "Контрагенты -> Район"
  district: ID
  "Почтовый адрес"
  email: String
  "Иностранный контрагент"
  foreignPartner: Boolean
  "ИИК"
  iik: String
  invoices: [ID]
  "Является владельцем конструкций НОН РТС"
  isNonrtsOwner: Boolean
  "КБЕ"
  kbe: String
  "Контрагенты -> Юридический адрес"
  legalAddress: ID
  "Контрагенты -> Юридический адрес - Почтовый индекс"
  legalAddressPostcode: ID
  "Контрагенты -> Юридическое лицо, получатель агентской комиссси"
  legalEntityPayeeAgencyComission: ID
  "Номер свидетельства о постановке на НДС"
  ndsCertificateNumber: String
  ownedNonrtsConstructions: [ID]
  "Контрагенты -> Тип контрагента"
  partnerType: ID
  projects: [ID]
  projectsAgencies: [ID]
  sendersOfAgencyComission: [ID]
  "Наименование"
  title: String
  "Контрагенты -> Секторы деятельности"
  workingSectors: [ID]
}

"Данные для пакетного создания Типа контрагента"
input BatchCreatePartnerTypeInput {
  partners: [ID]
  "Тип контрагента"
  title: String!
}

"Данные для пакетного создания Права"
input BatchCreatePermissionInput {
  codename: String!
  contentType: ID!
  groupSet: [ID]
  name: String!
  userSet: [ID]
}

"Данные для пакетного создания Стоимости рекламного размещения по прайса"
input BatchCreatePlacementPriceInput {
  "Прайсовая стоимость -> Город"
  city: ID
  "Прайсовая стоимость -> Формат"
  format: ID
  "Период"
  period: Int
  "Цена за размещение"
  priceForPlacement: Float
}

"Данные для пакетного создания Почтового индекса"
input BatchCreatePostcodeInput {
  actualPostcodePartners: [ID]
  addresses: [ID]
  constructions: [ID]
  "Почтовые индексы -> Район"
  district: ID!
  legalPostcodePartners: [ID]
  locations: [ID]
  "Название"
  title: String
}

"Данные для пакетного создания Проекта"
input BatchCreateProjectInput {
  additionalCosts: [ID]
  additionalCostsNonrts: [ID]
  advertPromoCompanies: [ID]
  "Рекламное агентство"
  agency: ID
  "Проекты -> Агентская комиссия"
  agencyCommission: ID
  "Проекты -> Менеджер Бэк-оффиса"
  backOfficeManager: ID
  "Бренд"
  brand: ID
  "Клиент"
  client: ID
  "Код"
  code: String
  "Коментарий"
  comment: String
  "Проекты -> Создатель (кто внес данные)"
  creator: ID
  "Процент скидки на клиента"
  discountClientPercent: Float
  "Процент скидки на налог"
  discountNalogPercent: Float
  "Процент скидки по прайсу"
  discountPricePercent: Float
  invoices: [ID]
  "В архиве"
  isArchive: Boolean
  "Порядковый номер проекта"
  numInYear: Int
  projectAppendices: [ID]
  projectCities: [ID]
  reservationPackage: [ID]
  reservations: [ID]
  "Проекты -> Менеджер по продажам"
  salesManager: ID
  "Дата начала"
  startDate: DateTime
  "Наименование"
  title: String
}

"Данные для пакетного создания Назначения стороны"
input BatchCreatePurposeSideInput {
  constructionSides: [ID]
  title: String!
}

"Данные для пакетного создания Бронирования"
input BatchCreateReservationInput {
  "Заданное значение стоимости доп. расходов"
  additionalSetted: Float
  "Бронирование -> Агентская комиссия"
  agencyCommission: ID
  "Бронирование <-> Приложение к договору"
  appendix: [ID]
  "брендинг"
  branding: Boolean
  "Бронирования -> Сторона конструкции"
  constructionSide: ID
  "Дата начала"
  dateFrom: DateTime!
  "Дата окончания"
  dateTo: DateTime!
  "Заданный процент скидки на налог"
  discountNalogPercentSetted: Float
  "Заданный процент скидки по прайсу"
  discountPricePercentSetted: Float
  "Заданный процент скидки Аренды на клиента"
  discountToClientPercentSetted: Float
  "Распределений на монтаж"
  distributedToMounting: Int
  "Данные о НОН РТС стоимости -> Бронирование"
  estimateNonRts: ID
  "Заданное значение стоимости монтажа"
  mountingSetted: Float
  "Заданная стоимость налога после скидки"
  nalogAfterDiscountSetted: Float
  "Заданное значение стоимости налогов"
  nalogSetted: Float
  "Заданное значение стоимости печати"
  printingSetted: Float
  "Бронирования -> Проект"
  project: ID
  "Заданная стоимость после скидки по прайсу"
  rentByPriceAfterDiscountSetted: Float
  "Заданное значение аренды по прайсу"
  rentByPriceSetted: Float
  "Заданная стоимость Аренды после всех скидок"
  rentToClientAfterDiscountSetted: Float
  "Заданная аренда на клиента"
  rentToClientSetted: Float
  reservationMountings: [ID]
  "Бронирование -> Бронирование пакета"
  reservationPackage: ID
  "Бронирования -> Тип брони"
  reservationType: ID!
}

"Данные для пакетного создания Вида бронирования"
input BatchCreateReservationTypeInput {
  "целочисленный ключ"
  ikey: ReservationTypeIkeyInput
  "уровень бронирования"
  level: Int!
  reservation: [ID]
  reservationPackage: [ID]
  "Тип брони"
  title: String
}

"Данные для пакетного создания Стороны"
input BatchCreateSideInput {
  advertisingSides: [ID]
  "Буквенный код стороны"
  code: String
  "Стророны -> Формат"
  format: ID!
  "Размер стороны"
  size: String
  "Наименование стороны"
  title: String
}

"Данные для пакетного создания Статические, конфигурационных доп. расходов"
input BatchCreateStaticAdditionalCostsInput {
  category: StaticAdditionalCostsCategoryInput
  "Статические, конфигурационные доп. расходы -> Город"
  city: ID
  "Статические, конфигурационные доп. расходы -> Формат"
  format: ID
  "Наименование дополнительного расхода"
  name: String
  "Цена"
  price: Float
}

"Данные для пакетного создания Технической проблемы"
input BatchCreateTechProblemsInput {
  "Комментарий к технической проблеме"
  comment: String
  constructions: [ID]
  "Наименование технической проблемы"
  title: String
}

"Данные для пакетного создания Подсемейства конструкции"
input BatchCreateUnderFamilyConstructionInput {
  "Подсемейства -> Семейство конструкции"
  family: ID!
  models: [ID]
  "Наименование"
  title: String
}

"Данные для пакетного создания Сектора деятельности"
input BatchCreateWorkingSectorInput {
  brands: [ID]
  "Описание"
  description: String!
  partners: [ID]
  "Наименование"
  title: String!
}

"Данные для пакетного обновления (все поля - необязательные)Дополнительных расходов (РТС)"
input BatchPatchAdditionalCostsInput {
  "Дополнительные расходы -> Агентская комиссия"
  agencyCommission: ID
  "Дополнительные расходы НОН РТС -> Приложение"
  appendix: [ID]
  "Категория дополнительного расхода"
  category: AdditionalCostsCategoryInput
  "Дополнительные расходы -> Город"
  city: ID
  "Стоимость после скидки на дополнительный расход"
  costAfterDiscount: Float
  "Количество"
  count: Int
  "Процент скидки на дополнительный расход"
  discountPercent: Float
  "Окончание периода"
  endPeriod: DateTime
  id: ID
  "Цена"
  price: Float
  "Дополнительные расходы -> Проект"
  project: ID
  "Начало периода"
  startPeriod: DateTime
  "Название"
  title: String
}

"Данные для пакетного обновления (все поля - необязательные)Адресного справочника"
input BatchPatchAddressesInput {
  actualAddressPartners: [ID]
  "Адрес"
  address: String
  constructionsByActualAdress: [ID]
  constructionsByMaketingAdress: [ID]
  id: ID
  legalAddressPartners: [ID]
  locationsByActualAdress: [ID]
  locationsByMaketingAdress: [ID]
  "Адреса -> Почтовый индекс"
  postcode: ID
}

"Данные для пакетного обновления (все поля - необязательные)Рекламной промо-компании"
input BatchPatchAdvertPromoCompanyInput {
  "Рекламная компания -> Город"
  city: ID
  designs: [ID]
  id: ID
  "Рекламная компания -> Проект"
  project: ID
  "Дата начала"
  start: DateTime
  "Название промо-компании"
  title: String
}

"Данные для пакетного обновления (все поля - необязательные)Рекламной стороны"
input BatchPatchAdvertisingSideInput {
  "Буквенный код рекламной стороны"
  code: String
  constructionSides: [ID]
  id: ID
  "Рекламные стороны -> Сторона"
  side: ID
  "Наименование рекламной стороны"
  title: String
}

"Данные для пакетного обновления (все поля - необязательные)Агентской комиссии"
input BatchPatchAgencyCommissionInput {
  additionalCosts: [ID]
  "Агент для перечисления агентской коммиссии"
  agent: ID
  estimateNonRts: [ID]
  id: ID
  partners: [ID]
  "Процент агентской комисии"
  percent: Float
  projects: [ID]
  reservations: [ID]
  "Агентская комиссия распространяется на доп. расходы"
  toAdditional: Boolean
  "Агентская комиссия распространяется на монтаж"
  toMount: Boolean
  "Агентская комиссия распространяется на налог"
  toNalog: Boolean
  "Агентская комиссия распространяется на маржу НОН РТС"
  toNonrts: Boolean
  "Агентская комиссия распространяется на печать"
  toPrint: Boolean
  "Агентская комиссия распространяется на аренду"
  toRent: Boolean
  "Сумма агентской комиссии"
  value: Float
}

"Данные для пакетного обновления (все поля - необязательные)Приложения к договора"
input BatchPatchAppendixInput {
  additionalCosts: [ID]
  additionalCostsNonrts: [ID]
  additionallyAgreement: Upload
  "Номер приложения"
  code: String
  "Приложения к договору -> Договор"
  contract: ID
  "Дата создания приложения"
  createdDate: DateTime
  "Приложения к договору -> Создатель (кто внес данные)"
  creator: ID
  id: ID
  invoices: [ID]
  "В архиве"
  isArchive: Boolean
  "Номер приложения в месяце"
  numInMonth: Int
  packagesReservations: [ID]
  "Срок оплаты"
  paymentDate: DateTime
  "Период приложения - дата окончания размещения"
  periodEndDate: DateTime
  "Период приложения - дата начала размещения"
  periodStartDate: DateTime
  "Приложения к договору -> Проект"
  project: ID
  reservations: [ID]
  "Статус возврата"
  returnStatus: Boolean
  "Приложения к договору -> Менеджер по продажам"
  salesManager: ID
  "Подписант в именительном падеже"
  signatoryOne: String
  "Должность подписанта"
  signatoryPosition: String
  "Подписант в родительном падеже"
  signatoryTwo: String
  "Дата обновления"
  updatedAt: DateTime
}

"Данные для пакетного обновления (все поля - необязательные)Изображения бренда"
input BatchPatchBrandImageInput {
  active: Boolean
  "Бренд"
  brand: ID
  id: ID
  img: Upload
}

"Данные для пакетного обновления (все поля - необязательные)Бренда"
input BatchPatchBrandInput {
  brandImages: [ID]
  "Код"
  code: String
  "Дата создания"
  createdAt: DateTime
  "Связанные дизайны"
  designs: [ID]
  id: ID
  partners: [ID]
  projects: [ID]
  "Наименование"
  title: String
  "Дата обновления"
  updatedAt: DateTime
  "Сектор деятельности контрагента"
  workingSector: ID
}

"Данные для пакетного обновления (все поля - необязательные)Города"
input BatchPatchCityInput {
  additionalCostsNonrts: [ID]
  advertPromoCompanies: [ID]
  "Города -> Страна"
  country: ID
  crews: [ID]
  districts: [ID]
  id: ID
  packages: [ID]
  placementPrices: [ID]
  salesAdditionalCosts: [ID]
  salesManagerOfProjects: [ID]
  staticAdditionalCosts: [ID]
  "Название"
  title: String
}

"Данные для пакетного обновления (все поля - необязательные)Типа клиента"
input BatchPatchClientTypeInput {
  "Описание"
  description: String
  id: ID
  partners: [ID]
  "Название"
  title: String
}

"Данные для пакетного обновления (все поля - необязательные)Конструкции"
input BatchPatchConstructionInput {
  "Активная или демонтировананя"
  active: Boolean
  "Комментарий"
  backComment: String
  "Инвентарный номер - 1C"
  buhInventNumber: String
  constructionHistorySet: [ID]
  constructionnotificationSet: [ID]
  "Координаты"
  coordinates: String
  "Создать новый маркетинговый адрес с заданным (или незаданным) почтовым кодом postcode: ID"
  createMarketingAddress: String
  "Создать новую помеху с заданным названием: String"
  createObstruction: String
  "Создать новую техническую проблему с заданным названием и комментарием: String"
  createTechProblem: String
  "Дата создания"
  createdAt: DateTime
  "Дата создания"
  creationDate: DateTime
  "Конструкции -> Экипаж"
  crew: ID
  "Сторонам конструкции присвоены специализированные экипажи"
  crewsHasSpecialForSides: Boolean
  formats: [ID]
  id: ID
  "В архиве"
  isArchive: Boolean
  "Конструкция НОН РТС"
  isNonrts: Boolean
  "Местоположения -> Юридический адрес"
  legalAddress: ID
  "Конструкции -> Местоположение"
  location: ID
  "Местоположения -> Маркетинговый адрес"
  marketingAddress: ID
  "Конструкции -> Модель конструкции"
  model: ID
  mountings: [ID]
  "Конструкции -> Владелец НОН РТС"
  nonrtsOwner: ID
  "Коментарий о владельце НОН РТС"
  nonrtsOwnerComment: String
  "Порядковый номер конструкции в районе"
  numInDistrict: Int
  "Конструкции -> Помеха"
  obstruction: ID
  ownedSides: [ID]
  photo: Upload
  "Местоположения -> Почтовый индекс"
  postcode: ID
  "Ссылка на сайт с презентацией конструкции"
  presentationUrl: String
  rowIdx: Int
  "Статус доступности конструкции"
  statusAvailability: Boolean
  "Статус по подключению"
  statusConnection: Boolean
  "Комментарий тех. отдела"
  techComment: String
  "Инвентарный номер - Техотдел"
  techInventNumber: String
  "Номер телефона конструкции"
  techPhoneConstruction: String
  "Конструкция -> Технические проблемы"
  techProblem: [ID]
  "Список комментариев к тех. проблемам"
  techProblemAllComment: String
  "Комментарий к технической проблеме: String"
  techProblemComment: String
  "Дата обновления"
  updatedAt: DateTime
}

"Данные для пакетного обновления (все поля - необязательные)Construction notification"
input BatchPatchConstructionNotificationInput {
  "Конструкция"
  construction: ID
  "Дата создания"
  createdAt: DateTime
  id: ID
  notificationPtr: ID
  "Прочитано"
  read: Boolean
  "Тема"
  topic: String
  "Дата редактирования"
  updatedAt: DateTime
  "Пользователь"
  user: ID
}

"Данные для пакетного обновления (все поля - необязательные)Стороны конструкции"
input BatchPatchConstructionSideInput {
  "Стророны конструкции -> Рекламная сторона"
  advertisingSide: ID
  "Статус доступности стороны"
  availabilitySide: Boolean
  "Стророны конструкции -> Конструкция"
  construction: ID
  constructionSideHistorySet: [ID]
  "Дата создания"
  createdAt: DateTime
  "Конструкции -> Экипаж"
  crew: ID
  estimateNonRts: [ID]
  id: ID
  "В архиве"
  isArchive: Boolean
  mountings: [ID]
  "Стророны конструкции -> Пакет"
  package: ID
  "Стророны конструкции -> Назначение стороны"
  purposeSide: ID
  reservation: [ID]
  "Ограничение стороны конструкции по продажам"
  saleConstraint: Boolean
  "Дата обновления"
  updatedAt: DateTime
}

"Данные для пакетного обновления (все поля - необязательные)Контактного лица"
input BatchPatchContactPersonInput {
  "E-mail"
  email: String
  id: ID
  "ФИО"
  name: String
  "Контактные лица -> Контрагент"
  partner: ID
  "Телефон"
  phone: String
}

"Данные для пакетного обновления (все поля - необязательные)Договора"
input BatchPatchContractInput {
  additionallyAgreementPdf: Upload
  "Документ, на основании которого действует подписант"
  basedOnDocument: String
  "Код"
  code: String
  "Комментарий"
  comment: String
  contractAppendices: [ID]
  contractPdf: Upload
  "Договора -> Тип договора"
  contractType: ID
  "Дата создания"
  createdAt: DateTime
  "Договора -> Создатель (кто внес данные)"
  creator: ID
  "Дата окончания действия"
  end: DateTime
  id: ID
  "Договора -> Инициатор"
  initiator: ID
  invoices: [ID]
  "В архиве"
  isArchive: Boolean
  "Договора -> Контрагент"
  partner: ID
  "Срок оплаты"
  paymentDate: DateTime
  "Дата заключения"
  registrationDate: DateTime
  "Статус возврата"
  returnStatus: Boolean
  "Договора -> Менеджер по продажам"
  salesManager: ID
  "Порядковый номер договора"
  serialNumber: String
  "Подписант в именительном падеже"
  signatoryOne: String
  "Должность подписанта"
  signatoryPosition: String
  "Подписант в родительном падеже"
  signatoryTwo: String
  "Дата начала действия"
  start: DateTime
  "Дата обновления"
  updatedAt: DateTime
}

"Данные для пакетного обновления (все поля - необязательные)Типа договора"
input BatchPatchContractTypeInput {
  contracts: [ID]
  id: ID
  "Тип договора"
  name: String
}

"Данные для пакетного обновления (все поля - необязательные)Страны"
input BatchPatchCountryInput {
  cities: [ID]
  id: ID
  "Страна"
  title: String
}

"Данные для пакетного обновления (все поля - необязательные)Экипажа"
input BatchPatchCrewInput {
  "Экипажи -> Город"
  city: ID
  constructionSides: [ID]
  constructions: [ID]
  id: ID
  mountings: [ID]
  "Имя человека"
  name: String
  "Номер экипажа"
  num: String
  "Номер телефона монтажника"
  phone: String
}

"Данные для пакетного обновления (все поля - необязательные)Пользователя"
input BatchPatchCustomUserInput {
  backOfficeManagersOfProjects: [ID]
  changelogSet: [ID]
  constructionHistorySet: [ID]
  constructionSideHistorySet: [ID]
  createdContracts: [ID]
  createdContractsAppendices: [ID]
  createdProjects: [ID]
  "date joined"
  dateJoined: DateTime
  "Почтовый адрес"
  email: String
  "Пользователи -> Должность"
  employeePosition: ID
  "first name"
  firstName: String
  "Пользователи <-> Группы"
  groups: [ID]
  id: ID
  initiatedContracts: [ID]
  "active Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
  isActive: Boolean
  "staff status. Designates whether the user can log into this admin site."
  isStaff: Boolean
  "Наличие прав суперпользователя"
  isSuperuser: Boolean
  "last login"
  lastLogin: DateTime
  "last name"
  lastName: String
  logentrySet: [ID]
  "Ф.И.О."
  name: String
  notificationSet: [ID]
  "password"
  password: String
  "Номер телефона"
  phone: String
  previousPasswords: [ID]
  refreshTokens: [ID]
  salesManagerOfProjects: [ID]
  salesManagerOnContracts: [ID]
  salesManagerOnContractsAppendices: [ID]
  "План по продажам на год"
  salesYearPlan: Float
  status: ID
  "Индивидуальные права данного пользователя."
  userPermissions: [ID]
  "username, Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
  username: String
}

"Данные для пакетного обновления (все поля - необязательные)Дизайна"
input BatchPatchDesignInput {
  "Дизайн -> Рекламная компания"
  advertPromoCompany: ID
  "Дизайн в архиве"
  archived: Boolean
  brandsForDesign: [ID]
  designMountings: [ID]
  designUnmountings: [ID]
  id: ID
  img: Upload
  "Текущий дизайн"
  isCurrent: Boolean
  previousDesignMountings: [ID]
  "Дата начала действия дизайна"
  startedAt: DateTime
  "Название дизайна"
  title: String
}

"Данные для пакетного обновления (все поля - необязательные)Района"
input BatchPatchDistrictInput {
  "Районы -> Город"
  city: ID
  id: ID
  lastSerialNumbers: ID
  partners: [ID]
  postcodes: [ID]
  "Название"
  title: String
}

"Данные для пакетного обновления (все поля - необязательные)Должности"
input BatchPatchEmployeePositionInput {
  id: ID
  "Наименование"
  title: String
  users: [ID]
}

"Данные для пакетного обновления (все поля - необязательные)Дополнительного расхода НОН РТС"
input BatchPatchEstimateNonRtsInput {
  "Дополнительные расходы НОН РТС -> Агентская комиссия"
  agencyCommission: ID
  "Дополнительные расходы НОН РТС -> Приложение"
  appendix: [ID]
  "Дополнительные расходы НОН РТС -> Город"
  city: ID
  "Данные о НОН РТС стоимости -> Сторона конструкции"
  constructionSide: ID
  "Количество (НОН РТС)"
  count: Int
  "Конец периода"
  endPeriod: DateTime
  id: ID
  "Входящая стоимость - Доп. расходы"
  incomingAdditional: Float
  "Входящая стоимость - Монтаж"
  incomingInstallation: Float
  "Входящая стоимость - Производство"
  incomingManufacturing: Float
  "Входящая стоимость - Печать"
  incomingPrinting: Float
  "Входящая стоимость - Аренда"
  incomingRent: Float
  "Входящая стоимость - Налог"
  incomingTax: Float
  "Дополнительные расходы НОН РТС -> Проект"
  project: ID
  reservation: ID
  "Стоимость продажи - Доп. расходы"
  saleAdditional: Float
  "Стоимость продажи - Монтаж"
  saleInstallation: Float
  "Стоимость продажи - Производство"
  saleManufacturing: Float
  "Стоимость продажи - Печать"
  salePrinting: Float
  "Стоимость продажи - Аренда"
  saleRent: Float
  "Стоимость продажи - Налог"
  saleTax: Float
  "Начало периода"
  startPeriod: DateTime
  "Тип (наружная реклама, ТВ, радио, метро, другое)"
  title: String
}

"Данные для пакетного обновления (все поля - необязательные)Семейства конструкции"
input BatchPatchFamilyConstructionInput {
  id: ID
  locations: [ID]
  "Наименование"
  title: String
  underfamilies: [ID]
}

"Данные для пакетного обновления (все поля - необязательные)Формата"
input BatchPatchFormatInput {
  "Код формата"
  code: String
  constructionsForFormat: [ID]
  id: ID
  "Форматы -> Модель конструкции"
  model: ID
  placementPrices: [ID]
  sides: [ID]
  staticAdditionalCosts: [ID]
  "Наименование формата"
  title: String
}

"Данные для пакетного обновления (все поля - необязательные)Группы"
input BatchPatchGroupInput {
  customUser: [ID]
  id: ID
  name: String
  permissions: [ID]
}

"Данные для пакетного обновления (все поля - необязательные)Счёта"
input BatchPatchInvoiceInput {
  "Счета -> Приложение к договору"
  appendix: ID
  "Выставление АВР"
  avr: Boolean
  "Счета -> Договор"
  contract: ID
  "Способ оплаты клиентом"
  customerPaymentMethod: String
  id: ID
  "Счета -> Контрагент, на котрого выставляется счет"
  partner: ID
  "Оплата не позднее"
  paymentLastDate: DateTime
  "Счета -> Проект"
  project: ID
  "Сумма без НДС"
  sumWithoutNds: Float
  "Общая сумма"
  wholeSum: Float
}

"Данные для пакетного обновления (все поля - необязательные)Местоположения"
input BatchPatchLocationInput {
  "Площадь (га)"
  area: Float
  "Номер гос акта на землю"
  areaAct: String
  "Дата гос акта на землю"
  areaActDate: DateTime
  "Кадастровый номер"
  cadastralNumber: String
  "Комментарий"
  comment: String
  constructionRowIdx: Int
  constructions: [ID]
  "Дата создания"
  createdAt: DateTime
  document: Upload
  "Местоположения -> Семейство устанавливаемых конструкций в данном месте"
  familyConstruction: ID
  "Наличие земли"
  hasArea: Boolean
  id: ID
  "В архиве"
  isArchive: Boolean
  "Местоположение конструкций, не принадлежащих РТС"
  isNonrtsLocation: Boolean
  "Местоположения -> Юридический адрес"
  legalAddress: ID
  "Местоположения -> Маркетинговый адрес"
  marketingAddress: ID
  "Местоположения -> Почтовый индекс"
  postcode: ID
  "Местоположения -> Целевое назначение местоположения"
  purposeLocation: ID
  "Местоположения -> Статус оформления земельного участка"
  registrationStatusLocation: ID
  "Регистрация договора"
  rentContractCreatedAt: DateTime
  "Дата окончания договора"
  rentContractEnd: DateTime
  "Номер договора"
  rentContractNumber: String
  "Дата начала договора"
  rentContractStart: DateTime
  "Номер постановления от Акимата"
  resolutionNumber: String
  "Дата постановления от Акимата"
  resolutionNumberDate: DateTime
  rowIdx: Int
  "Дата обновления"
  updatedAt: DateTime
}

"Данные для пакетного обновления (все поля - необязательные)Модели конструкции"
input BatchPatchModelConstructionInput {
  constructions: [ID]
  formats: [ID]
  id: ID
  title: String
  "Модели -> Подсемейство конструкции"
  underfamily: ID
}

"Данные для пакетного обновления (все поля - необязательные)Монтажа"
input BatchPatchMountingInput {
  "В архиве"
  archived: Boolean
  "Комментарий"
  comment: String
  "Монтажи -> конструкци"
  construction: ID
  "Монтажи -> стороны конструкций"
  constructionSide: ID
  "Монтажи -> Экипаж"
  crew: ID
  "Монтажи -> Монтируемый Дизайн"
  design: ID
  "Выгружено ранее"
  downloadedEarly: DateTime
  "Дата демонтажа"
  endMounting: DateTime
  id: ID
  "Монтаж выполнен"
  mountingDone: Boolean
  "Уровень приоритетности"
  mountingRange: MountingMountingRangeInput
  "Монтажи -> Ремонтно-монтажная работа"
  mountingTask: ID
  photos: [ID]
  "Предыдущий дизайн"
  previousDesign: ID
  "Монтажи -> Бронирование"
  reservation: ID
  "Дата монтажа"
  startMounting: DateTime
  "Монтажи -> Демонтируемый Дизайн"
  unmountingDesign: ID
  "Демонтаж выполнен"
  unmountingDone: Boolean
}

"Данные для пакетного обновления (все поля - необязательные)Фотоотчёта о монтажа"
input BatchPatchMountingPhotoInput {
  "Дата фотоотчета о монтаже"
  date: DateTime
  id: ID
  "Монтажная работа -> фотоотчет о монтаже"
  mounting: ID
  "Номер фотографии о монтаже"
  num: String
  photo: Upload
}

"Данные для пакетного обновления (все поля - необязательные)Ремонтно-монтажной работы"
input BatchPatchMountingTaskInput {
  id: ID
  mountings: [ID]
  "Наименование"
  title: String
}

"Данные для пакетного обновления (все поля - необязательные)Уведомления"
input BatchPatchNotificationInput {
  constructionnotification: ID
  "Дата создания"
  createdAt: DateTime
  id: ID
  "Прочитано"
  read: Boolean
  "Тема"
  topic: String
  "Дата редактирования"
  updatedAt: DateTime
  "Пользователь"
  user: ID
}

"Данные для пакетного обновления (все поля - необязательные)Помехи"
input BatchPatchObstructionInput {
  constructions: [ID]
  id: ID
  "Помеха"
  title: String
}

"Данные для пакетного обновления (все поля - необязательные)Контрагента"
input BatchPatchPartnerInput {
  "Контрагенты -> Фактический адрес"
  actualAddress: ID
  "Контрагенты -> Фактический адрес - Почтовый индекс"
  actualAddressPostcode: ID
  advertiserClients: [ID]
  "Контрагенты <-> Связанные рекламодатели"
  advertisers: [ID]
  "Контрагенты -> Агентская комиссия"
  agencyCommission: ID
  agencycommissionSet: [ID]
  "Банк получателя"
  bankRecipient: String
  "БИК"
  bik: String
  "БИН"
  binNumber: String
  "Контрагенты <-> Связанные бренды"
  brands: [ID]
  "Расчетный счет"
  checkingAccount: String
  "Контрагенты -> Тип клиента"
  clientType: ID
  "Комментарий"
  comment: String
  contactPersons: [ID]
  contracts: [ID]
  "Дата создания"
  createdAt: DateTime
  "Процент скидки на клиента"
  discountClientPercent: Float
  "Процент скидки на налог"
  discountNalogPercent: Float
  "Процент скидки по прайсу"
  discountPricePercent: Float
  "Контрагенты -> Район"
  district: ID
  "Почтовый адрес"
  email: String
  "Иностранный контрагент"
  foreignPartner: Boolean
  id: ID
  "ИИК"
  iik: String
  invoices: [ID]
  "Является владельцем конструкций НОН РТС"
  isNonrtsOwner: Boolean
  "КБЕ"
  kbe: String
  "Контрагенты -> Юридический адрес"
  legalAddress: ID
  "Контрагенты -> Юридический адрес - Почтовый индекс"
  legalAddressPostcode: ID
  "Контрагенты -> Юридическое лицо, получатель агентской комиссси"
  legalEntityPayeeAgencyComission: ID
  "Номер свидетельства о постановке на НДС"
  ndsCertificateNumber: String
  ownedNonrtsConstructions: [ID]
  "Контрагенты -> Тип контрагента"
  partnerType: ID
  projects: [ID]
  projectsAgencies: [ID]
  sendersOfAgencyComission: [ID]
  "Наименование"
  title: String
  "Дата редактирования"
  updatedAt: DateTime
  "Контрагенты -> Секторы деятельности"
  workingSectors: [ID]
}

"Данные для пакетного обновления (все поля - необязательные)Типа контрагента"
input BatchPatchPartnerTypeInput {
  id: ID
  partners: [ID]
  "Тип контрагента"
  title: String
}

"Данные для пакетного обновления (все поля - необязательные)Права"
input BatchPatchPermissionInput {
  codename: String
  contentType: ID
  groupSet: [ID]
  id: ID
  name: String
  userSet: [ID]
}

"Данные для пакетного обновления (все поля - необязательные)Стоимости рекламного размещения по прайса"
input BatchPatchPlacementPriceInput {
  "Прайсовая стоимость -> Город"
  city: ID
  "Прайсовая стоимость -> Формат"
  format: ID
  id: ID
  "Период"
  period: Int
  "Цена за размещение"
  priceForPlacement: Float
}

"Данные для пакетного обновления (все поля - необязательные)Почтового индекса"
input BatchPatchPostcodeInput {
  actualPostcodePartners: [ID]
  addresses: [ID]
  constructions: [ID]
  "Почтовые индексы -> Район"
  district: ID
  id: ID
  legalPostcodePartners: [ID]
  locations: [ID]
  "Название"
  title: String
}

"Данные для пакетного обновления (все поля - необязательные)Проекта"
input BatchPatchProjectInput {
  additionalCosts: [ID]
  additionalCostsNonrts: [ID]
  advertPromoCompanies: [ID]
  "Рекламное агентство"
  agency: ID
  "Проекты -> Агентская комиссия"
  agencyCommission: ID
  "Проекты -> Менеджер Бэк-оффиса"
  backOfficeManager: ID
  "Бренд"
  brand: ID
  "Клиент"
  client: ID
  "Код"
  code: String
  "Коментарий"
  comment: String
  "Дата создания"
  createdAt: DateTime
  "Проекты -> Создатель (кто внес данные)"
  creator: ID
  "Процент скидки на клиента"
  discountClientPercent: Float
  "Процент скидки на налог"
  discountNalogPercent: Float
  "Процент скидки по прайсу"
  discountPricePercent: Float
  id: ID
  invoices: [ID]
  "В архиве"
  isArchive: Boolean
  "Порядковый номер проекта"
  numInYear: Int
  projectAppendices: [ID]
  projectCities: [ID]
  reservationPackage: [ID]
  reservations: [ID]
  "Проекты -> Менеджер по продажам"
  salesManager: ID
  "Дата начала"
  startDate: DateTime
  "Наименование"
  title: String
  "Дата обновления"
  updatedAt: DateTime
}

"Данные для пакетного обновления (все поля - необязательные)Назначения стороны"
input BatchPatchPurposeSideInput {
  constructionSides: [ID]
  id: ID
  title: String
}

"Данные для пакетного обновления (все поля - необязательные)Бронирования"
input BatchPatchReservationInput {
  "Заданное значение стоимости доп. расходов"
  additionalSetted: Float
  "Бронирование -> Агентская комиссия"
  agencyCommission: ID
  "Бронирование <-> Приложение к договору"
  appendix: [ID]
  "брендинг"
  branding: Boolean
  "Бронирования -> Сторона конструкции"
  constructionSide: ID
  "Дата создания"
  creationDate: DateTime
  "Дата начала"
  dateFrom: DateTime
  "Дата окончания"
  dateTo: DateTime
  "Заданный процент скидки на налог"
  discountNalogPercentSetted: Float
  "Заданный процент скидки по прайсу"
  discountPricePercentSetted: Float
  "Заданный процент скидки Аренды на клиента"
  discountToClientPercentSetted: Float
  "Распределений на монтаж"
  distributedToMounting: Int
  "Данные о НОН РТС стоимости -> Бронирование"
  estimateNonRts: ID
  id: ID
  "Заданное значение стоимости монтажа"
  mountingSetted: Float
  "Заданная стоимость налога после скидки"
  nalogAfterDiscountSetted: Float
  "Заданное значение стоимости налогов"
  nalogSetted: Float
  "Заданное значение стоимости печати"
  printingSetted: Float
  "Бронирования -> Проект"
  project: ID
  "Заданная стоимость после скидки по прайсу"
  rentByPriceAfterDiscountSetted: Float
  "Заданное значение аренды по прайсу"
  rentByPriceSetted: Float
  "Заданная стоимость Аренды после всех скидок"
  rentToClientAfterDiscountSetted: Float
  "Заданная аренда на клиента"
  rentToClientSetted: Float
  reservationMountings: [ID]
  "Бронирование -> Бронирование пакета"
  reservationPackage: ID
  "Бронирования -> Тип брони"
  reservationType: ID
}

"Данные для пакетного обновления (все поля - необязательные)Вида бронирования"
input BatchPatchReservationTypeInput {
  id: ID
  "целочисленный ключ"
  ikey: ReservationTypeIkeyInput
  "уровень бронирования"
  level: Int
  reservation: [ID]
  reservationPackage: [ID]
  "Тип брони"
  title: String
}

"Данные для пакетного обновления (все поля - необязательные)Стороны"
input BatchPatchSideInput {
  advertisingSides: [ID]
  "Буквенный код стороны"
  code: String
  "Стророны -> Формат"
  format: ID
  id: ID
  "Размер стороны"
  size: String
  "Наименование стороны"
  title: String
}

"Данные для пакетного обновления (все поля - необязательные)Статические, конфигурационных доп. расходов"
input BatchPatchStaticAdditionalCostsInput {
  category: StaticAdditionalCostsCategoryInput
  "Статические, конфигурационные доп. расходы -> Город"
  city: ID
  "Статические, конфигурационные доп. расходы -> Формат"
  format: ID
  id: ID
  "Наименование дополнительного расхода"
  name: String
  "Цена"
  price: Float
}

"Данные для пакетного обновления (все поля - необязательные)Технической проблемы"
input BatchPatchTechProblemsInput {
  "Комментарий к технической проблеме"
  comment: String
  constructions: [ID]
  id: ID
  "Наименование технической проблемы"
  title: String
}

"Данные для пакетного обновления (все поля - необязательные)Подсемейства конструкции"
input BatchPatchUnderFamilyConstructionInput {
  "Подсемейства -> Семейство конструкции"
  family: ID
  id: ID
  models: [ID]
  "Наименование"
  title: String
}

"Данные для пакетного обновления (все поля - необязательные)Сектора деятельности"
input BatchPatchWorkingSectorInput {
  brands: [ID]
  "Описание"
  description: String
  id: ID
  partners: [ID]
  "Наименование"
  title: String
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Дополнительных расходов (РТС)"
input BatchUpdateAdditionalCostsInput {
  "Дополнительные расходы -> Агентская комиссия"
  agencyCommission: ID
  "Дополнительные расходы НОН РТС -> Приложение"
  appendix: [ID]
  "Категория дополнительного расхода"
  category: AdditionalCostsCategoryInput
  "Дополнительные расходы -> Город"
  city: ID
  "Стоимость после скидки на дополнительный расход"
  costAfterDiscount: Float
  "Количество"
  count: Int
  "Процент скидки на дополнительный расход"
  discountPercent: Float
  "Окончание периода"
  endPeriod: DateTime
  id: ID!
  "Цена"
  price: Float
  "Дополнительные расходы -> Проект"
  project: ID
  "Начало периода"
  startPeriod: DateTime
  "Название"
  title: String
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Адресного справочника"
input BatchUpdateAddressesInput {
  actualAddressPartners: [ID]
  "Адрес"
  address: String!
  constructionsByActualAdress: [ID]
  constructionsByMaketingAdress: [ID]
  id: ID!
  legalAddressPartners: [ID]
  locationsByActualAdress: [ID]
  locationsByMaketingAdress: [ID]
  "Адреса -> Почтовый индекс"
  postcode: ID
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Рекламной промо-компании"
input BatchUpdateAdvertPromoCompanyInput {
  "Рекламная компания -> Город"
  city: ID
  designs: [ID]
  id: ID!
  "Рекламная компания -> Проект"
  project: ID!
  "Дата начала"
  start: DateTime
  "Название промо-компании"
  title: String
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Рекламной стороны"
input BatchUpdateAdvertisingSideInput {
  "Буквенный код рекламной стороны"
  code: String
  constructionSides: [ID]
  id: ID!
  "Рекламные стороны -> Сторона"
  side: ID!
  "Наименование рекламной стороны"
  title: String
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Агентской комиссии"
input BatchUpdateAgencyCommissionInput {
  additionalCosts: [ID]
  "Агент для перечисления агентской коммиссии"
  agent: ID
  estimateNonRts: [ID]
  id: ID!
  partners: [ID]
  "Процент агентской комисии"
  percent: Float
  projects: [ID]
  reservations: [ID]
  "Агентская комиссия распространяется на доп. расходы"
  toAdditional: Boolean
  "Агентская комиссия распространяется на монтаж"
  toMount: Boolean
  "Агентская комиссия распространяется на налог"
  toNalog: Boolean
  "Агентская комиссия распространяется на маржу НОН РТС"
  toNonrts: Boolean
  "Агентская комиссия распространяется на печать"
  toPrint: Boolean
  "Агентская комиссия распространяется на аренду"
  toRent: Boolean
  "Сумма агентской комиссии"
  value: Float
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Приложения к договора"
input BatchUpdateAppendixInput {
  additionalCosts: [ID]
  additionalCostsNonrts: [ID]
  additionallyAgreement: Upload
  "Номер приложения"
  code: String
  "Приложения к договору -> Договор"
  contract: ID
  "Дата создания приложения"
  createdDate: DateTime
  "Приложения к договору -> Создатель (кто внес данные)"
  creator: ID
  id: ID!
  invoices: [ID]
  "В архиве"
  isArchive: Boolean
  "Номер приложения в месяце"
  numInMonth: Int
  packagesReservations: [ID]
  "Срок оплаты"
  paymentDate: DateTime
  "Период приложения - дата окончания размещения"
  periodEndDate: DateTime
  "Период приложения - дата начала размещения"
  periodStartDate: DateTime
  "Приложения к договору -> Проект"
  project: ID
  reservations: [ID]
  "Статус возврата"
  returnStatus: Boolean
  "Приложения к договору -> Менеджер по продажам"
  salesManager: ID
  "Подписант в именительном падеже"
  signatoryOne: String
  "Должность подписанта"
  signatoryPosition: String
  "Подписант в родительном падеже"
  signatoryTwo: String
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Изображения бренда"
input BatchUpdateBrandImageInput {
  active: Boolean
  "Бренд"
  brand: ID
  id: ID!
  img: Upload
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Бренда"
input BatchUpdateBrandInput {
  brandImages: [ID]
  "Код"
  code: String
  "Связанные дизайны"
  designs: [ID]
  id: ID!
  partners: [ID]
  projects: [ID]
  "Наименование"
  title: String
  "Сектор деятельности контрагента"
  workingSector: ID
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Города"
input BatchUpdateCityInput {
  additionalCostsNonrts: [ID]
  advertPromoCompanies: [ID]
  "Города -> Страна"
  country: ID!
  crews: [ID]
  districts: [ID]
  id: ID!
  packages: [ID]
  placementPrices: [ID]
  salesAdditionalCosts: [ID]
  salesManagerOfProjects: [ID]
  staticAdditionalCosts: [ID]
  "Название"
  title: String
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Типа клиента"
input BatchUpdateClientTypeInput {
  "Описание"
  description: String!
  id: ID!
  partners: [ID]
  "Название"
  title: String!
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Конструкции"
input BatchUpdateConstructionInput {
  "Активная или демонтировананя"
  active: Boolean
  "Комментарий"
  backComment: String
  "Инвентарный номер - 1C"
  buhInventNumber: String
  constructionHistorySet: [ID]
  constructionnotificationSet: [ID]
  "Координаты"
  coordinates: String
  "Создать новый маркетинговый адрес с заданным (или незаданным) почтовым кодом postcode: ID"
  createMarketingAddress: String
  "Создать новую помеху с заданным названием: String"
  createObstruction: String
  "Создать новую техническую проблему с заданным названием и комментарием: String"
  createTechProblem: String
  "Дата создания"
  creationDate: DateTime
  "Конструкции -> Экипаж"
  crew: ID
  "Сторонам конструкции присвоены специализированные экипажи"
  crewsHasSpecialForSides: Boolean
  formats: [ID]
  id: ID!
  "В архиве"
  isArchive: Boolean
  "Конструкция НОН РТС"
  isNonrts: Boolean
  "Местоположения -> Юридический адрес"
  legalAddress: ID
  "Конструкции -> Местоположение"
  location: ID
  "Местоположения -> Маркетинговый адрес"
  marketingAddress: ID
  "Конструкции -> Модель конструкции"
  model: ID
  mountings: [ID]
  "Конструкции -> Владелец НОН РТС"
  nonrtsOwner: ID
  "Коментарий о владельце НОН РТС"
  nonrtsOwnerComment: String
  "Порядковый номер конструкции в районе"
  numInDistrict: Int
  "Конструкции -> Помеха"
  obstruction: ID
  ownedSides: [ID]
  photo: Upload
  "Местоположения -> Почтовый индекс"
  postcode: ID
  "Ссылка на сайт с презентацией конструкции"
  presentationUrl: String
  rowIdx: Int
  "Статус доступности конструкции"
  statusAvailability: Boolean
  "Статус по подключению"
  statusConnection: Boolean
  "Комментарий тех. отдела"
  techComment: String
  "Инвентарный номер - Техотдел"
  techInventNumber: String
  "Номер телефона конструкции"
  techPhoneConstruction: String
  "Конструкция -> Технические проблемы"
  techProblem: [ID]
  "Список комментариев к тех. проблемам"
  techProblemAllComment: String
  "Комментарий к технической проблеме: String"
  techProblemComment: String
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Construction notification"
input BatchUpdateConstructionNotificationInput {
  "Конструкция"
  construction: ID
  id: ID!
  notificationPtr: ID!
  "Прочитано"
  read: Boolean
  "Тема"
  topic: String
  "Пользователь"
  user: ID
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Стороны конструкции"
input BatchUpdateConstructionSideInput {
  "Стророны конструкции -> Рекламная сторона"
  advertisingSide: ID
  "Статус доступности стороны"
  availabilitySide: Boolean
  "Стророны конструкции -> Конструкция"
  construction: ID
  constructionSideHistorySet: [ID]
  "Конструкции -> Экипаж"
  crew: ID
  estimateNonRts: [ID]
  id: ID!
  "В архиве"
  isArchive: Boolean
  mountings: [ID]
  "Стророны конструкции -> Пакет"
  package: ID
  "Стророны конструкции -> Назначение стороны"
  purposeSide: ID
  reservation: [ID]
  "Ограничение стороны конструкции по продажам"
  saleConstraint: Boolean
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Контактного лица"
input BatchUpdateContactPersonInput {
  "E-mail"
  email: String!
  id: ID!
  "ФИО"
  name: String!
  "Контактные лица -> Контрагент"
  partner: ID
  "Телефон"
  phone: String!
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Договора"
input BatchUpdateContractInput {
  additionallyAgreementPdf: Upload
  "Документ, на основании которого действует подписант"
  basedOnDocument: String
  "Код"
  code: String
  "Комментарий"
  comment: String
  contractAppendices: [ID]
  contractPdf: Upload
  "Договора -> Тип договора"
  contractType: ID
  "Договора -> Создатель (кто внес данные)"
  creator: ID
  "Дата окончания действия"
  end: DateTime
  id: ID!
  "Договора -> Инициатор"
  initiator: ID
  invoices: [ID]
  "В архиве"
  isArchive: Boolean
  "Договора -> Контрагент"
  partner: ID
  "Срок оплаты"
  paymentDate: DateTime
  "Дата заключения"
  registrationDate: DateTime
  "Статус возврата"
  returnStatus: Boolean
  "Договора -> Менеджер по продажам"
  salesManager: ID
  "Порядковый номер договора"
  serialNumber: String
  "Подписант в именительном падеже"
  signatoryOne: String
  "Должность подписанта"
  signatoryPosition: String
  "Подписант в родительном падеже"
  signatoryTwo: String
  "Дата начала действия"
  start: DateTime
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Типа договора"
input BatchUpdateContractTypeInput {
  contracts: [ID]
  id: ID!
  "Тип договора"
  name: String
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Страны"
input BatchUpdateCountryInput {
  cities: [ID]
  id: ID!
  "Страна"
  title: String
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Экипажа"
input BatchUpdateCrewInput {
  "Экипажи -> Город"
  city: ID
  constructionSides: [ID]
  constructions: [ID]
  id: ID!
  mountings: [ID]
  "Имя человека"
  name: String
  "Номер экипажа"
  num: String
  "Номер телефона монтажника"
  phone: String
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Пользователя"
input BatchUpdateCustomUserInput {
  backOfficeManagersOfProjects: [ID]
  changelogSet: [ID]
  constructionHistorySet: [ID]
  constructionSideHistorySet: [ID]
  createdContracts: [ID]
  createdContractsAppendices: [ID]
  createdProjects: [ID]
  "date joined"
  dateJoined: DateTime
  "Почтовый адрес"
  email: String
  "Пользователи -> Должность"
  employeePosition: ID
  "first name"
  firstName: String
  "Пользователи <-> Группы"
  groups: [ID]
  id: ID!
  initiatedContracts: [ID]
  "active Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
  isActive: Boolean
  "staff status. Designates whether the user can log into this admin site."
  isStaff: Boolean
  "Наличие прав суперпользователя"
  isSuperuser: Boolean
  "last login"
  lastLogin: DateTime
  "last name"
  lastName: String
  logentrySet: [ID]
  "Ф.И.О."
  name: String
  notificationSet: [ID]
  "password"
  password: String
  "Номер телефона"
  phone: String
  previousPasswords: [ID]
  refreshTokens: [ID]
  salesManagerOfProjects: [ID]
  salesManagerOnContracts: [ID]
  salesManagerOnContractsAppendices: [ID]
  "План по продажам на год"
  salesYearPlan: Float
  status: ID
  "Индивидуальные права данного пользователя."
  userPermissions: [ID]
  "username, Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
  username: String!
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Дизайна"
input BatchUpdateDesignInput {
  "Дизайн -> Рекламная компания"
  advertPromoCompany: ID
  "Дизайн в архиве"
  archived: Boolean
  brandsForDesign: [ID]
  designMountings: [ID]
  designUnmountings: [ID]
  id: ID!
  img: Upload
  "Текущий дизайн"
  isCurrent: Boolean
  previousDesignMountings: [ID]
  "Дата начала действия дизайна"
  startedAt: DateTime
  "Название дизайна"
  title: String
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Района"
input BatchUpdateDistrictInput {
  "Районы -> Город"
  city: ID!
  id: ID!
  lastSerialNumbers: ID
  partners: [ID]
  postcodes: [ID]
  "Название"
  title: String
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Должности"
input BatchUpdateEmployeePositionInput {
  id: ID!
  "Наименование"
  title: String!
  users: [ID]
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Дополнительного расхода НОН РТС"
input BatchUpdateEstimateNonRtsInput {
  "Дополнительные расходы НОН РТС -> Агентская комиссия"
  agencyCommission: ID
  "Дополнительные расходы НОН РТС -> Приложение"
  appendix: [ID]
  "Дополнительные расходы НОН РТС -> Город"
  city: ID
  "Данные о НОН РТС стоимости -> Сторона конструкции"
  constructionSide: ID
  "Количество (НОН РТС)"
  count: Int
  "Конец периода"
  endPeriod: DateTime
  id: ID!
  "Входящая стоимость - Доп. расходы"
  incomingAdditional: Float
  "Входящая стоимость - Монтаж"
  incomingInstallation: Float
  "Входящая стоимость - Производство"
  incomingManufacturing: Float
  "Входящая стоимость - Печать"
  incomingPrinting: Float
  "Входящая стоимость - Аренда"
  incomingRent: Float
  "Входящая стоимость - Налог"
  incomingTax: Float
  "Дополнительные расходы НОН РТС -> Проект"
  project: ID
  reservation: ID
  "Стоимость продажи - Доп. расходы"
  saleAdditional: Float
  "Стоимость продажи - Монтаж"
  saleInstallation: Float
  "Стоимость продажи - Производство"
  saleManufacturing: Float
  "Стоимость продажи - Печать"
  salePrinting: Float
  "Стоимость продажи - Аренда"
  saleRent: Float
  "Стоимость продажи - Налог"
  saleTax: Float
  "Начало периода"
  startPeriod: DateTime
  "Тип (наружная реклама, ТВ, радио, метро, другое)"
  title: String
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Семейства конструкции"
input BatchUpdateFamilyConstructionInput {
  id: ID!
  locations: [ID]
  "Наименование"
  title: String
  underfamilies: [ID]
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Формата"
input BatchUpdateFormatInput {
  "Код формата"
  code: String
  constructionsForFormat: [ID]
  id: ID!
  "Форматы -> Модель конструкции"
  model: ID!
  placementPrices: [ID]
  sides: [ID]
  staticAdditionalCosts: [ID]
  "Наименование формата"
  title: String
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Группы"
input BatchUpdateGroupInput {
  customUser: [ID]
  id: ID!
  name: String!
  permissions: [ID]
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Счёта"
input BatchUpdateInvoiceInput {
  "Счета -> Приложение к договору"
  appendix: ID
  "Выставление АВР"
  avr: Boolean
  "Счета -> Договор"
  contract: ID
  "Способ оплаты клиентом"
  customerPaymentMethod: String
  id: ID!
  "Счета -> Контрагент, на котрого выставляется счет"
  partner: ID
  "Оплата не позднее"
  paymentLastDate: DateTime
  "Счета -> Проект"
  project: ID
  "Сумма без НДС"
  sumWithoutNds: Float
  "Общая сумма"
  wholeSum: Float
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Местоположения"
input BatchUpdateLocationInput {
  "Площадь (га)"
  area: Float
  "Номер гос акта на землю"
  areaAct: String
  "Дата гос акта на землю"
  areaActDate: DateTime
  "Кадастровый номер"
  cadastralNumber: String
  "Комментарий"
  comment: String
  constructionRowIdx: Int
  constructions: [ID]
  document: Upload
  "Местоположения -> Семейство устанавливаемых конструкций в данном месте"
  familyConstruction: ID
  "Наличие земли"
  hasArea: Boolean
  id: ID!
  "В архиве"
  isArchive: Boolean
  "Местоположение конструкций, не принадлежащих РТС"
  isNonrtsLocation: Boolean
  "Местоположения -> Юридический адрес"
  legalAddress: ID
  "Местоположения -> Маркетинговый адрес"
  marketingAddress: ID
  "Местоположения -> Почтовый индекс"
  postcode: ID
  "Местоположения -> Целевое назначение местоположения"
  purposeLocation: ID
  "Местоположения -> Статус оформления земельного участка"
  registrationStatusLocation: ID
  "Регистрация договора"
  rentContractCreatedAt: DateTime
  "Дата окончания договора"
  rentContractEnd: DateTime
  "Номер договора"
  rentContractNumber: String
  "Дата начала договора"
  rentContractStart: DateTime
  "Номер постановления от Акимата"
  resolutionNumber: String
  "Дата постановления от Акимата"
  resolutionNumberDate: DateTime
  rowIdx: Int
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Модели конструкции"
input BatchUpdateModelConstructionInput {
  constructions: [ID]
  formats: [ID]
  id: ID!
  title: String
  "Модели -> Подсемейство конструкции"
  underfamily: ID!
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Монтажа"
input BatchUpdateMountingInput {
  "В архиве"
  archived: Boolean
  "Комментарий"
  comment: String
  "Монтажи -> конструкци"
  construction: ID
  "Монтажи -> стороны конструкций"
  constructionSide: ID
  "Монтажи -> Экипаж"
  crew: ID
  "Монтажи -> Монтируемый Дизайн"
  design: ID
  "Выгружено ранее"
  downloadedEarly: DateTime
  "Дата демонтажа"
  endMounting: DateTime
  id: ID!
  "Монтаж выполнен"
  mountingDone: Boolean
  "Уровень приоритетности"
  mountingRange: MountingMountingRangeInput
  "Монтажи -> Ремонтно-монтажная работа"
  mountingTask: ID
  photos: [ID]
  "Предыдущий дизайн"
  previousDesign: ID
  "Монтажи -> Бронирование"
  reservation: ID
  "Дата монтажа"
  startMounting: DateTime
  "Монтажи -> Демонтируемый Дизайн"
  unmountingDesign: ID
  "Демонтаж выполнен"
  unmountingDone: Boolean
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Фотоотчёта о монтажа"
input BatchUpdateMountingPhotoInput {
  "Дата фотоотчета о монтаже"
  date: DateTime
  id: ID!
  "Монтажная работа -> фотоотчет о монтаже"
  mounting: ID!
  "Номер фотографии о монтаже"
  num: String
  photo: Upload
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Ремонтно-монтажной работы"
input BatchUpdateMountingTaskInput {
  id: ID!
  mountings: [ID]
  "Наименование"
  title: String
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Уведомления"
input BatchUpdateNotificationInput {
  constructionnotification: ID
  id: ID!
  "Прочитано"
  read: Boolean
  "Тема"
  topic: String
  "Пользователь"
  user: ID
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Помехи"
input BatchUpdateObstructionInput {
  constructions: [ID]
  id: ID!
  "Помеха"
  title: String!
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Контрагента"
input BatchUpdatePartnerInput {
  "Контрагенты -> Фактический адрес"
  actualAddress: ID
  "Контрагенты -> Фактический адрес - Почтовый индекс"
  actualAddressPostcode: ID
  advertiserClients: [ID]
  "Контрагенты <-> Связанные рекламодатели"
  advertisers: [ID]
  "Контрагенты -> Агентская комиссия"
  agencyCommission: ID
  agencycommissionSet: [ID]
  "Банк получателя"
  bankRecipient: String
  "БИК"
  bik: String
  "БИН"
  binNumber: String
  "Контрагенты <-> Связанные бренды"
  brands: [ID]
  "Расчетный счет"
  checkingAccount: String
  "Контрагенты -> Тип клиента"
  clientType: ID
  "Комментарий"
  comment: String
  contactPersons: [ID]
  contracts: [ID]
  "Процент скидки на клиента"
  discountClientPercent: Float
  "Процент скидки на налог"
  discountNalogPercent: Float
  "Процент скидки по прайсу"
  discountPricePercent: Float
  "Контрагенты -> Район"
  district: ID
  "Почтовый адрес"
  email: String
  "Иностранный контрагент"
  foreignPartner: Boolean
  id: ID!
  "ИИК"
  iik: String
  invoices: [ID]
  "Является владельцем конструкций НОН РТС"
  isNonrtsOwner: Boolean
  "КБЕ"
  kbe: String
  "Контрагенты -> Юридический адрес"
  legalAddress: ID
  "Контрагенты -> Юридический адрес - Почтовый индекс"
  legalAddressPostcode: ID
  "Контрагенты -> Юридическое лицо, получатель агентской комиссси"
  legalEntityPayeeAgencyComission: ID
  "Номер свидетельства о постановке на НДС"
  ndsCertificateNumber: String
  ownedNonrtsConstructions: [ID]
  "Контрагенты -> Тип контрагента"
  partnerType: ID
  projects: [ID]
  projectsAgencies: [ID]
  sendersOfAgencyComission: [ID]
  "Наименование"
  title: String
  "Контрагенты -> Секторы деятельности"
  workingSectors: [ID]
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Типа контрагента"
input BatchUpdatePartnerTypeInput {
  id: ID!
  partners: [ID]
  "Тип контрагента"
  title: String!
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Права"
input BatchUpdatePermissionInput {
  codename: String!
  contentType: ID!
  groupSet: [ID]
  id: ID!
  name: String!
  userSet: [ID]
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Стоимости рекламного размещения по прайса"
input BatchUpdatePlacementPriceInput {
  "Прайсовая стоимость -> Город"
  city: ID
  "Прайсовая стоимость -> Формат"
  format: ID
  id: ID!
  "Период"
  period: Int
  "Цена за размещение"
  priceForPlacement: Float
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Почтового индекса"
input BatchUpdatePostcodeInput {
  actualPostcodePartners: [ID]
  addresses: [ID]
  constructions: [ID]
  "Почтовые индексы -> Район"
  district: ID!
  id: ID!
  legalPostcodePartners: [ID]
  locations: [ID]
  "Название"
  title: String
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Проекта"
input BatchUpdateProjectInput {
  additionalCosts: [ID]
  additionalCostsNonrts: [ID]
  advertPromoCompanies: [ID]
  "Рекламное агентство"
  agency: ID
  "Проекты -> Агентская комиссия"
  agencyCommission: ID
  "Проекты -> Менеджер Бэк-оффиса"
  backOfficeManager: ID
  "Бренд"
  brand: ID
  "Клиент"
  client: ID
  "Код"
  code: String
  "Коментарий"
  comment: String
  "Проекты -> Создатель (кто внес данные)"
  creator: ID
  "Процент скидки на клиента"
  discountClientPercent: Float
  "Процент скидки на налог"
  discountNalogPercent: Float
  "Процент скидки по прайсу"
  discountPricePercent: Float
  id: ID!
  invoices: [ID]
  "В архиве"
  isArchive: Boolean
  "Порядковый номер проекта"
  numInYear: Int
  projectAppendices: [ID]
  projectCities: [ID]
  reservationPackage: [ID]
  reservations: [ID]
  "Проекты -> Менеджер по продажам"
  salesManager: ID
  "Дата начала"
  startDate: DateTime
  "Наименование"
  title: String
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Назначения стороны"
input BatchUpdatePurposeSideInput {
  constructionSides: [ID]
  id: ID!
  title: String!
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Бронирования"
input BatchUpdateReservationInput {
  "Заданное значение стоимости доп. расходов"
  additionalSetted: Float
  "Бронирование -> Агентская комиссия"
  agencyCommission: ID
  "Бронирование <-> Приложение к договору"
  appendix: [ID]
  "брендинг"
  branding: Boolean
  "Бронирования -> Сторона конструкции"
  constructionSide: ID
  "Дата начала"
  dateFrom: DateTime!
  "Дата окончания"
  dateTo: DateTime!
  "Заданный процент скидки на налог"
  discountNalogPercentSetted: Float
  "Заданный процент скидки по прайсу"
  discountPricePercentSetted: Float
  "Заданный процент скидки Аренды на клиента"
  discountToClientPercentSetted: Float
  "Распределений на монтаж"
  distributedToMounting: Int
  "Данные о НОН РТС стоимости -> Бронирование"
  estimateNonRts: ID
  id: ID!
  "Заданное значение стоимости монтажа"
  mountingSetted: Float
  "Заданная стоимость налога после скидки"
  nalogAfterDiscountSetted: Float
  "Заданное значение стоимости налогов"
  nalogSetted: Float
  "Заданное значение стоимости печати"
  printingSetted: Float
  "Бронирования -> Проект"
  project: ID
  "Заданная стоимость после скидки по прайсу"
  rentByPriceAfterDiscountSetted: Float
  "Заданное значение аренды по прайсу"
  rentByPriceSetted: Float
  "Заданная стоимость Аренды после всех скидок"
  rentToClientAfterDiscountSetted: Float
  "Заданная аренда на клиента"
  rentToClientSetted: Float
  reservationMountings: [ID]
  "Бронирование -> Бронирование пакета"
  reservationPackage: ID
  "Бронирования -> Тип брони"
  reservationType: ID!
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Вида бронирования"
input BatchUpdateReservationTypeInput {
  id: ID!
  "целочисленный ключ"
  ikey: ReservationTypeIkeyInput
  "уровень бронирования"
  level: Int!
  reservation: [ID]
  reservationPackage: [ID]
  "Тип брони"
  title: String
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Стороны"
input BatchUpdateSideInput {
  advertisingSides: [ID]
  "Буквенный код стороны"
  code: String
  "Стророны -> Формат"
  format: ID!
  id: ID!
  "Размер стороны"
  size: String
  "Наименование стороны"
  title: String
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Статические, конфигурационных доп. расходов"
input BatchUpdateStaticAdditionalCostsInput {
  category: StaticAdditionalCostsCategoryInput
  "Статические, конфигурационные доп. расходы -> Город"
  city: ID
  "Статические, конфигурационные доп. расходы -> Формат"
  format: ID
  id: ID!
  "Наименование дополнительного расхода"
  name: String
  "Цена"
  price: Float
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Технической проблемы"
input BatchUpdateTechProblemsInput {
  "Комментарий к технической проблеме"
  comment: String
  constructions: [ID]
  id: ID!
  "Наименование технической проблемы"
  title: String
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Подсемейства конструкции"
input BatchUpdateUnderFamilyConstructionInput {
  "Подсемейства -> Семейство конструкции"
  family: ID!
  id: ID!
  models: [ID]
  "Наименование"
  title: String
}

"Данные для пакетного обновления (все NOT NULL поля - обязательные)Сектора деятельности"
input BatchUpdateWorkingSectorInput {
  brands: [ID]
  "Описание"
  description: String!
  id: ID!
  partners: [ID]
  "Наименование"
  title: String!
}

"Данные для создания Дополнительных расходов (РТС)"
input CreateAdditionalCostsInput {
  "Дополнительные расходы -> Агентская комиссия"
  agencyCommission: CreateAgencyCommissionInput
  "Дополнительные расходы НОН РТС -> Приложение"
  appendix: [ID]
  "Категория дополнительного расхода"
  category: AdditionalCostsCategoryInput
  "Дополнительные расходы -> Город"
  city: ID
  "Стоимость после скидки на дополнительный расход"
  costAfterDiscount: Float
  "Количество"
  count: Int
  "Процент скидки на дополнительный расход"
  discountPercent: Float
  "Окончание периода"
  endPeriod: DateTime
  "Цена"
  price: Float
  "Дополнительные расходы -> Проект"
  project: ID
  "Начало периода"
  startPeriod: DateTime
  "Название"
  title: String
}

"Данные для создания Адресного справочника"
input CreateAddressesInput {
  actualAddressPartners: [ID]
  "Адрес"
  address: String!
  constructionsByActualAdress: [ID]
  constructionsByMaketingAdress: [ID]
  legalAddressPartners: [ID]
  locationsByActualAdress: [ID]
  locationsByMaketingAdress: [ID]
  "Адреса -> Почтовый индекс"
  postcode: ID
}

"Данные для создания Рекламной промо-компании"
input CreateAdvertPromoCompanyInput {
  "Рекламная компания -> Город"
  city: ID
  designs: [ID]
  "Рекламная компания -> Проект"
  project: ID!
  "Дата начала"
  start: DateTime
  "Название промо-компании"
  title: String
}

"Данные для создания Рекламной стороны"
input CreateAdvertisingSideInput {
  "Буквенный код рекламной стороны"
  code: String
  constructionSides: [ID]
  "Рекламные стороны -> Сторона"
  side: ID!
  "Наименование рекламной стороны"
  title: String
}

"Данные для создания Агентской комиссии"
input CreateAgencyCommissionInput {
  additionalCosts: [ID]
  "Агент для перечисления агентской коммиссии"
  agent: ID
  estimateNonRts: [ID]
  partners: [ID]
  "Процент агентской комисии"
  percent: Float
  projects: [ID]
  reservations: [ID]
  "Агентская комиссия распространяется на доп. расходы"
  toAdditional: Boolean
  "Агентская комиссия распространяется на монтаж"
  toMount: Boolean
  "Агентская комиссия распространяется на налог"
  toNalog: Boolean
  "Агентская комиссия распространяется на маржу НОН РТС"
  toNonrts: Boolean
  "Агентская комиссия распространяется на печать"
  toPrint: Boolean
  "Агентская комиссия распространяется на аренду"
  toRent: Boolean
  "Сумма агентской комиссии"
  value: Float
}

"Данные для создания Приложения к договора"
input CreateAppendixInput {
  additionalCosts: [ID]
  additionalCostsNonrts: [ID]
  additionallyAgreement: Upload
  "Номер приложения"
  code: String
  "Приложения к договору -> Договор"
  contract: ID
  "Дата создания приложения"
  createdDate: DateTime
  "Приложения к договору -> Создатель (кто внес данные)"
  creator: ID
  invoices: [ID]
  "В архиве"
  isArchive: Boolean
  "Номер приложения в месяце"
  numInMonth: Int
  packagesReservations: [ID]
  "Срок оплаты"
  paymentDate: DateTime
  "Период приложения - дата окончания размещения"
  periodEndDate: DateTime
  "Период приложения - дата начала размещения"
  periodStartDate: DateTime
  "Приложения к договору -> Проект"
  project: ID
  reservations: [ID]
  "Статус возврата"
  returnStatus: Boolean
  "Приложения к договору -> Менеджер по продажам"
  salesManager: ID
  "Подписант в именительном падеже"
  signatoryOne: String
  "Должность подписанта"
  signatoryPosition: String
  "Подписант в родительном падеже"
  signatoryTwo: String
}

"Данные для создания Изображения бренда"
input CreateBrandImageInput {
  active: Boolean
  "Бренд"
  brand: ID
  img: Upload
}

"Данные для создания Бренда"
input CreateBrandInput {
  brandImages: [ID]
  "Код"
  code: String
  "Связанные дизайны"
  designs: [ID]
  partners: [ID]
  projects: [ID]
  "Наименование"
  title: String
  "Сектор деятельности контрагента"
  workingSector: ID
}

"Данные для создания Города"
input CreateCityInput {
  additionalCostsNonrts: [ID]
  advertPromoCompanies: [ID]
  "Города -> Страна"
  country: ID!
  crews: [ID]
  districts: [ID]
  packages: [ID]
  placementPrices: [ID]
  salesAdditionalCosts: [ID]
  salesManagerOfProjects: [ID]
  staticAdditionalCosts: [ID]
  "Название"
  title: String
}

"Данные для создания Типа клиента"
input CreateClientTypeInput {
  "Описание"
  description: String!
  partners: [ID]
  "Название"
  title: String!
}

"Данные для создания Конструкции"
input CreateConstructionInput {
  "Активная или демонтировананя"
  active: Boolean
  "Комментарий"
  backComment: String
  "Инвентарный номер - 1C"
  buhInventNumber: String
  constructionHistorySet: [ID]
  constructionnotificationSet: [ID]
  "Координаты"
  coordinates: String
  "Создать новый маркетинговый адрес с заданным (или незаданным) почтовым кодом postcode: ID"
  createMarketingAddress: String
  "Создать новую помеху с заданным названием: String"
  createObstruction: String
  "Создать новую техническую проблему с заданным названием и комментарием: String"
  createTechProblem: String
  "Дата создания"
  creationDate: DateTime
  "Конструкции -> Экипаж"
  crew: ID
  "Сторонам конструкции присвоены специализированные экипажи"
  crewsHasSpecialForSides: Boolean
  formats: [ID]
  "В архиве"
  isArchive: Boolean
  "Конструкция НОН РТС"
  isNonrts: Boolean
  "Местоположения -> Юридический адрес"
  legalAddress: ID
  "Конструкции -> Местоположение"
  location: ID
  "Местоположения -> Маркетинговый адрес"
  marketingAddress: ID
  "Конструкции -> Модель конструкции"
  model: ID
  mountings: [ID]
  "Конструкции -> Владелец НОН РТС"
  nonrtsOwner: ID
  "Коментарий о владельце НОН РТС"
  nonrtsOwnerComment: String
  "Порядковый номер конструкции в районе"
  numInDistrict: Int
  "Конструкции -> Помеха"
  obstruction: ID
  ownedSides: [ID]
  photo: Upload
  "Местоположения -> Почтовый индекс"
  postcode: ID
  "Ссылка на сайт с презентацией конструкции"
  presentationUrl: String
  rowIdx: Int
  "Статус доступности конструкции"
  statusAvailability: Boolean
  "Статус по подключению"
  statusConnection: Boolean
  "Комментарий тех. отдела"
  techComment: String
  "Инвентарный номер - Техотдел"
  techInventNumber: String
  "Номер телефона конструкции"
  techPhoneConstruction: String
  "Конструкция -> Технические проблемы"
  techProblem: [ID]
  "Конструкция -> Технические проблемы"
  techProblemAdd: [ID]
  "Список комментариев к тех. проблемам"
  techProblemAllComment: String
  "Комментарий к технической проблеме: String"
  techProblemComment: String
  techProblemCreate: [CreateTechProblemsInput]
  "Конструкция -> Технические проблемы"
  techProblemRemove: [ID]
}

"Данные для создания Construction notification"
input CreateConstructionNotificationInput {
  "Конструкция"
  construction: ID
  "Прочитано"
  read: Boolean
  "Тема"
  topic: String
  "Пользователь"
  user: ID
}

"Данные для создания Стороны конструкции"
input CreateConstructionSideInput {
  "Стророны конструкции -> Рекламная сторона"
  advertisingSide: ID
  "Статус доступности стороны"
  availabilitySide: Boolean
  "Стророны конструкции -> Конструкция"
  construction: ID
  constructionSideHistorySet: [ID]
  "Конструкции -> Экипаж"
  crew: ID
  estimateNonRts: [ID]
  "В архиве"
  isArchive: Boolean
  mountings: [ID]
  "Стророны конструкции -> Пакет"
  package: ID
  "Стророны конструкции -> Назначение стороны"
  purposeSide: ID
  reservation: [ID]
  "Ограничение стороны конструкции по продажам"
  saleConstraint: Boolean
}

"Данные для создания Контактного лица"
input CreateContactPersonInput {
  "E-mail"
  email: String!
  "ФИО"
  name: String!
  "Контактные лица -> Контрагент"
  partner: ID
  "Телефон"
  phone: String!
}

"Данные для создания Договора"
input CreateContractInput {
  additionallyAgreementPdf: Upload
  "Документ, на основании которого действует подписант"
  basedOnDocument: String
  "Код"
  code: String
  "Комментарий"
  comment: String
  contractAppendices: [ID]
  contractAppendicesAdd: [ID]
  contractAppendicesRemove: [ID]
  contractPdf: Upload
  "Договора -> Тип договора"
  contractType: ID
  "Договора -> Создатель (кто внес данные)"
  creator: ID
  "Дата окончания действия"
  end: DateTime
  "Договора -> Инициатор"
  initiator: ID
  invoices: [ID]
  invoicesAdd: [ID]
  invoicesRemove: [ID]
  "В архиве"
  isArchive: Boolean
  "Договора -> Контрагент"
  partner: ID
  "Срок оплаты"
  paymentDate: DateTime
  "Дата заключения"
  registrationDate: DateTime
  "Статус возврата"
  returnStatus: Boolean
  "Договора -> Менеджер по продажам"
  salesManager: ID
  "Порядковый номер договора"
  serialNumber: String
  "Подписант в именительном падеже"
  signatoryOne: String
  "Должность подписанта"
  signatoryPosition: String
  "Подписант в родительном падеже"
  signatoryTwo: String
  "Дата начала действия"
  start: DateTime
}

"Данные для создания Типа договора"
input CreateContractTypeInput {
  contracts: [ID]
  "Тип договора"
  name: String
}

"Данные для создания Страны"
input CreateCountryInput {
  cities: [ID]
  "Страна"
  title: String
}

"Данные для создания Экипажа"
input CreateCrewInput {
  "Экипажи -> Город"
  city: ID
  constructionSides: [ID]
  constructions: [ID]
  mountings: [ID]
  "Имя человека"
  name: String
  "Номер экипажа"
  num: String
  "Номер телефона монтажника"
  phone: String
}

"Данные для создания Пользователя"
input CreateCustomUserInput {
  backOfficeManagersOfProjects: [ID]
  changelogSet: [ID]
  constructionHistorySet: [ID]
  constructionSideHistorySet: [ID]
  createdContracts: [ID]
  createdContractsAppendices: [ID]
  createdProjects: [ID]
  "date joined"
  dateJoined: DateTime
  "Почтовый адрес"
  email: String
  "Пользователи -> Должность"
  employeePosition: ID
  "first name"
  firstName: String
  "Пользователи <-> Группы"
  groups: [ID]
  initiatedContracts: [ID]
  "active Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
  isActive: Boolean
  "staff status. Designates whether the user can log into this admin site."
  isStaff: Boolean
  "Наличие прав суперпользователя"
  isSuperuser: Boolean
  "last login"
  lastLogin: DateTime
  "last name"
  lastName: String
  logentrySet: [ID]
  "Ф.И.О."
  name: String
  notificationSet: [ID]
  "password"
  password: String
  "Номер телефона"
  phone: String
  previousPasswords: [ID]
  refreshTokens: [ID]
  salesManagerOfProjects: [ID]
  salesManagerOnContracts: [ID]
  salesManagerOnContractsAppendices: [ID]
  "План по продажам на год"
  salesYearPlan: Float
  status: ID
  "Индивидуальные права данного пользователя."
  userPermissions: [ID]
  "username, Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
  username: String!
}

"Данные для создания Дизайна"
input CreateDesignInput {
  "Дизайн -> Рекламная компания"
  advertPromoCompany: ID
  "Дизайн в архиве"
  archived: Boolean
  brandsForDesign: [ID]
  designMountings: [ID]
  designUnmountings: [ID]
  img: Upload
  "Текущий дизайн"
  isCurrent: Boolean
  previousDesignMountings: [ID]
  "Дата начала действия дизайна"
  startedAt: DateTime
  "Название дизайна"
  title: String
}

"Данные для создания Района"
input CreateDistrictInput {
  "Районы -> Город"
  city: ID!
  lastSerialNumbers: ID
  partners: [ID]
  postcodes: [ID]
  "Название"
  title: String
}

"Данные для создания Должности"
input CreateEmployeePositionInput {
  "Наименование"
  title: String!
  users: [ID]
}

"Данные для создания Дополнительного расхода НОН РТС"
input CreateEstimateNonRtsInput {
  "Дополнительные расходы НОН РТС -> Агентская комиссия"
  agencyCommission: CreateAgencyCommissionInput
  "Дополнительные расходы НОН РТС -> Приложение"
  appendix: [ID]
  "Дополнительные расходы НОН РТС -> Город"
  city: ID
  "Данные о НОН РТС стоимости -> Сторона конструкции"
  constructionSide: ID
  "Количество (НОН РТС)"
  count: Int
  "Конец периода"
  endPeriod: DateTime
  "Входящая стоимость - Доп. расходы"
  incomingAdditional: Float
  "Входящая стоимость - Монтаж"
  incomingInstallation: Float
  "Входящая стоимость - Производство"
  incomingManufacturing: Float
  "Входящая стоимость - Печать"
  incomingPrinting: Float
  "Входящая стоимость - Аренда"
  incomingRent: Float
  "Входящая стоимость - Налог"
  incomingTax: Float
  "Дополнительные расходы НОН РТС -> Проект"
  project: ID
  reservation: ID
  "Стоимость продажи - Доп. расходы"
  saleAdditional: Float
  "Стоимость продажи - Монтаж"
  saleInstallation: Float
  "Стоимость продажи - Производство"
  saleManufacturing: Float
  "Стоимость продажи - Печать"
  salePrinting: Float
  "Стоимость продажи - Аренда"
  saleRent: Float
  "Стоимость продажи - Налог"
  saleTax: Float
  "Начало периода"
  startPeriod: DateTime
  "Тип (наружная реклама, ТВ, радио, метро, другое)"
  title: String
}

"Данные для создания Семейства конструкции"
input CreateFamilyConstructionInput {
  locations: [ID]
  "Наименование"
  title: String
  underfamilies: [ID]
}

"Данные для создания Формата"
input CreateFormatInput {
  "Код формата"
  code: String
  constructionsForFormat: [ID]
  "Форматы -> Модель конструкции"
  model: ID!
  placementPrices: [ID]
  sides: [ID]
  staticAdditionalCosts: [ID]
  "Наименование формата"
  title: String
}

"Данные для создания Группы"
input CreateGroupInput {
  customUser: [ID]
  name: String!
  permissions: [ID]
}

"Данные для создания Счёта"
input CreateInvoiceInput {
  "Счета -> Приложение к договору"
  appendix: ID
  "Выставление АВР"
  avr: Boolean
  "Счета -> Договор"
  contract: ID
  "Способ оплаты клиентом"
  customerPaymentMethod: String
  "Счета -> Контрагент, на котрого выставляется счет"
  partner: ID
  "Оплата не позднее"
  paymentLastDate: DateTime
  "Счета -> Проект"
  project: ID
  "Сумма без НДС"
  sumWithoutNds: Float
  "Общая сумма"
  wholeSum: Float
}

"Данные для создания Местоположения"
input CreateLocationInput {
  "Площадь (га)"
  area: Float
  "Номер гос акта на землю"
  areaAct: String
  "Дата гос акта на землю"
  areaActDate: DateTime
  "Кадастровый номер"
  cadastralNumber: String
  "Комментарий"
  comment: String
  constructionRowIdx: Int
  constructions: [ID]
  constructionsAdd: [ID]
  constructionsRemove: [ID]
  document: Upload
  "Местоположения -> Семейство устанавливаемых конструкций в данном месте"
  familyConstruction: ID
  "Наличие земли"
  hasArea: Boolean
  "В архиве"
  isArchive: Boolean
  "Местоположение конструкций, не принадлежащих РТС"
  isNonrtsLocation: Boolean
  "Местоположения -> Юридический адрес"
  legalAddress: ID
  "Местоположения -> Маркетинговый адрес"
  marketingAddress: ID
  "Местоположения -> Почтовый индекс"
  postcode: ID
  "Местоположения -> Целевое назначение местоположения"
  purposeLocation: ID
  "Местоположения -> Статус оформления земельного участка"
  registrationStatusLocation: ID
  "Регистрация договора"
  rentContractCreatedAt: DateTime
  "Дата окончания договора"
  rentContractEnd: DateTime
  "Номер договора"
  rentContractNumber: String
  "Дата начала договора"
  rentContractStart: DateTime
  "Номер постановления от Акимата"
  resolutionNumber: String
  "Дата постановления от Акимата"
  resolutionNumberDate: DateTime
  rowIdx: Int
}

"Данные для создания Модели конструкции"
input CreateModelConstructionInput {
  constructions: [ID]
  formats: [ID]
  title: String
  "Модели -> Подсемейство конструкции"
  underfamily: ID!
}

"Данные для создания Монтажа"
input CreateMountingInput {
  "В архиве"
  archived: Boolean
  "Комментарий"
  comment: String
  "Монтажи -> конструкци"
  construction: ID
  "Монтажи -> стороны конструкций"
  constructionSide: ID
  "Монтажи -> Экипаж"
  crew: ID
  "Монтажи -> Монтируемый Дизайн"
  design: ID
  "Выгружено ранее"
  downloadedEarly: DateTime
  "Дата демонтажа"
  endMounting: DateTime
  "Монтаж выполнен"
  mountingDone: Boolean
  "Уровень приоритетности"
  mountingRange: MountingMountingRangeInput
  "Монтажи -> Ремонтно-монтажная работа"
  mountingTask: ID
  photos: [ID]
  "Предыдущий дизайн"
  previousDesign: ID
  "Монтажи -> Бронирование"
  reservation: ID
  "Дата монтажа"
  startMounting: DateTime
  "Монтажи -> Демонтируемый Дизайн"
  unmountingDesign: ID
  "Демонтаж выполнен"
  unmountingDone: Boolean
}

"Данные для создания Фотоотчёта о монтажа"
input CreateMountingPhotoInput {
  "Дата фотоотчета о монтаже"
  date: DateTime
  "Монтажная работа -> фотоотчет о монтаже"
  mounting: ID!
  "Номер фотографии о монтаже"
  num: String
  photo: Upload
}

"Данные для создания Ремонтно-монтажной работы"
input CreateMountingTaskInput {
  mountings: [ID]
  "Наименование"
  title: String
}

"Данные для создания Уведомления"
input CreateNotificationInput {
  constructionnotification: ID
  "Прочитано"
  read: Boolean
  "Тема"
  topic: String
  "Пользователь"
  user: ID
}

"Данные для создания Помехи"
input CreateObstructionInput {
  constructions: [ID]
  "Помеха"
  title: String!
}

"Данные для создания Контрагента"
input CreatePartnerInput {
  "Контрагенты -> Фактический адрес"
  actualAddress: ID
  "Контрагенты -> Фактический адрес - Почтовый индекс"
  actualAddressPostcode: ID
  advertiserClients: [ID]
  "Контрагенты <-> Связанные рекламодатели"
  advertisers: [ID]
  "Контрагенты <-> Связанные рекламодатели"
  advertisersAdd: [ID]
  "Контрагенты <-> Связанные рекламодатели"
  advertisersCreate: [CreatePartnerInput]
  "Контрагенты <-> Связанные рекламодатели"
  advertisersRemove: [ID]
  "Контрагенты -> Агентская комиссия"
  agencyCommission: CreateAgencyCommissionInput
  agencycommissionSet: [ID]
  "Банк получателя"
  bankRecipient: String
  "БИК"
  bik: String
  "БИН"
  binNumber: String
  "Контрагенты <-> Связанные бренды"
  brands: [ID]
  "Контрагенты <-> Связанные бренды"
  brandsAdd: [ID]
  "Контрагенты <-> Связанные бренды"
  brandsCreate: [CreateBrandInput]
  "Контрагенты <-> Связанные бренды"
  brandsRemove: [ID]
  "Расчетный счет"
  checkingAccount: String
  "Контрагенты -> Тип клиента"
  clientType: ID
  "Комментарий"
  comment: String
  contactPersons: [ID]
  contracts: [ID]
  "Процент скидки на клиента"
  discountClientPercent: Float
  "Процент скидки на налог"
  discountNalogPercent: Float
  "Процент скидки по прайсу"
  discountPricePercent: Float
  "Контрагенты -> Район"
  district: ID
  "Почтовый адрес"
  email: String
  "Иностранный контрагент"
  foreignPartner: Boolean
  "ИИК"
  iik: String
  invoices: [ID]
  "Является владельцем конструкций НОН РТС"
  isNonrtsOwner: Boolean
  "КБЕ"
  kbe: String
  "Контрагенты -> Юридический адрес"
  legalAddress: ID
  "Контрагенты -> Юридический адрес - Почтовый индекс"
  legalAddressPostcode: ID
  "Контрагенты -> Юридическое лицо, получатель агентской комиссси"
  legalEntityPayeeAgencyComission: ID
  "Номер свидетельства о постановке на НДС"
  ndsCertificateNumber: String
  ownedNonrtsConstructions: [ID]
  "Контрагенты -> Тип контрагента"
  partnerType: ID
  projects: [ID]
  projectsAdd: [ID]
  projectsAgencies: [ID]
  projectsCreate: [CreateProjectInput]
  projectsRemove: [ID]
  sendersOfAgencyComission: [ID]
  "Наименование"
  title: String
  "Контрагенты -> Секторы деятельности"
  workingSectors: [ID]
  "Контрагенты -> Секторы деятельности"
  workingSectorsAdd: [ID]
  workingSectorsCreate: [CreateWorkingSectorInput]
  "Контрагенты -> Секторы деятельности"
  workingSectorsRemove: [ID]
}

"Данные для создания Типа контрагента"
input CreatePartnerTypeInput {
  partners: [ID]
  "Тип контрагента"
  title: String!
}

"Данные для создания Права"
input CreatePermissionInput {
  codename: String!
  contentType: ID!
  groupSet: [ID]
  name: String!
  userSet: [ID]
}

"Данные для создания Стоимости рекламного размещения по прайса"
input CreatePlacementPriceInput {
  "Прайсовая стоимость -> Город"
  city: ID
  "Прайсовая стоимость -> Формат"
  format: ID
  "Период"
  period: Int
  "Цена за размещение"
  priceForPlacement: Float
}

"Данные для создания Почтового индекса"
input CreatePostcodeInput {
  actualPostcodePartners: [ID]
  addresses: [ID]
  constructions: [ID]
  "Почтовые индексы -> Район"
  district: ID!
  legalPostcodePartners: [ID]
  locations: [ID]
  "Название"
  title: String
}

"Данные для создания Проекта"
input CreateProjectInput {
  additionalCosts: [ID]
  additionalCostsNonrts: [ID]
  advertPromoCompanies: [ID]
  "Рекламное агентство"
  agency: ID
  "Проекты -> Агентская комиссия"
  agencyCommission: CreateAgencyCommissionInput
  "Проекты -> Менеджер Бэк-оффиса"
  backOfficeManager: ID
  "Бренд"
  brand: ID
  "Клиент"
  client: ID
  "Код"
  code: String
  "Коментарий"
  comment: String
  "Проекты -> Создатель (кто внес данные)"
  creator: ID
  "Процент скидки на клиента"
  discountClientPercent: Float
  "Процент скидки на налог"
  discountNalogPercent: Float
  "Процент скидки по прайсу"
  discountPricePercent: Float
  invoices: [ID]
  "В архиве"
  isArchive: Boolean
  "Порядковый номер проекта"
  numInYear: Int
  projectAppendices: [ID]
  projectCities: [ID]
  reservationPackage: [ID]
  reservations: [ID]
  "Проекты -> Менеджер по продажам"
  salesManager: ID
  "Дата начала"
  startDate: DateTime
  "Наименование"
  title: String
}

"Данные для создания Назначения стороны"
input CreatePurposeSideInput {
  constructionSides: [ID]
  title: String!
}

"Данные для создания Бронирования"
input CreateReservationInput {
  "Заданное значение стоимости доп. расходов"
  additionalSetted: Float
  "Бронирование -> Агентская комиссия"
  agencyCommission: ID
  "Бронирование <-> Приложение к договору"
  appendix: [ID]
  "брендинг"
  branding: Boolean
  "Бронирования -> Сторона конструкции"
  constructionSide: ID
  "Дата начала"
  dateFrom: DateTime!
  "Дата окончания"
  dateTo: DateTime!
  "Заданный процент скидки на налог"
  discountNalogPercentSetted: Float
  "Заданный процент скидки по прайсу"
  discountPricePercentSetted: Float
  "Заданный процент скидки Аренды на клиента"
  discountToClientPercentSetted: Float
  "Распределений на монтаж"
  distributedToMounting: Int
  "Данные о НОН РТС стоимости -> Бронирование"
  estimateNonRts: ID
  "Заданное значение стоимости монтажа"
  mountingSetted: Float
  "Заданная стоимость налога после скидки"
  nalogAfterDiscountSetted: Float
  "Заданное значение стоимости налогов"
  nalogSetted: Float
  "Заданное значение стоимости печати"
  printingSetted: Float
  "Бронирования -> Проект"
  project: ID
  "Заданная стоимость после скидки по прайсу"
  rentByPriceAfterDiscountSetted: Float
  "Заданное значение аренды по прайсу"
  rentByPriceSetted: Float
  "Заданная стоимость Аренды после всех скидок"
  rentToClientAfterDiscountSetted: Float
  "Заданная аренда на клиента"
  rentToClientSetted: Float
  reservationMountings: [ID]
  "Бронирование -> Бронирование пакета"
  reservationPackage: ID
  "Бронирования -> Тип брони"
  reservationType: ID!
}

"Данные для создания Вида бронирования"
input CreateReservationTypeInput {
  "целочисленный ключ"
  ikey: ReservationTypeIkeyInput
  "уровень бронирования"
  level: Int!
  reservation: [ID]
  reservationPackage: [ID]
  "Тип брони"
  title: String
}

"Данные для создания Стороны"
input CreateSideInput {
  advertisingSides: [ID]
  "Буквенный код стороны"
  code: String
  "Стророны -> Формат"
  format: ID!
  "Размер стороны"
  size: String
  "Наименование стороны"
  title: String
}

"Данные для создания Статические, конфигурационных доп. расходов"
input CreateStaticAdditionalCostsInput {
  category: StaticAdditionalCostsCategoryInput
  "Статические, конфигурационные доп. расходы -> Город"
  city: ID
  "Статические, конфигурационные доп. расходы -> Формат"
  format: ID
  "Наименование дополнительного расхода"
  name: String
  "Цена"
  price: Float
}

"Данные для создания Технической проблемы"
input CreateTechProblemsInput {
  "Комментарий к технической проблеме"
  comment: String
  constructions: [ID]
  "Наименование технической проблемы"
  title: String
}

"Данные для создания Подсемейства конструкции"
input CreateUnderFamilyConstructionInput {
  "Подсемейства -> Семейство конструкции"
  family: ID!
  models: [ID]
  "Наименование"
  title: String
}

"Данные для создания Сектора деятельности"
input CreateWorkingSectorInput {
  brands: [ID]
  "Описание"
  description: String!
  partners: [ID]
  "Наименование"
  title: String!
}

"Параметр редактирования агентской комиссии в смете"
input EstimateAgencyComission {
  "Процент агентской комиссии"
  percent: Float
  "Распространяется на доп. расходы"
  toAdditional: Boolean
  "Распространяется на монтаж"
  toMount: Boolean
  "Распространяется на налог"
  toNalog: Boolean
  "Распространяется на печать"
  toPrint: Boolean
  "Распространяется на аренду"
  toRent: Boolean
  "Значение агентской комиссии"
  value: Float
}

"Параметр редактирования элемента сметы НОН РТС"
input EstimateNonrtsArgument {
  "Процент агентской комиссии"
  agencyCommissionPercent: Float
  "Значение агентской комиссии"
  agencyCommissionValue: Float
  "not used"
  appendix: ID
  "Необходим брендинг"
  branding: Boolean
  "Город"
  city: ID
  "Количество"
  count: Int
  "Дата окончания периода"
  endPeriod: DateTime
  "Стоимость покупки доп. расходов"
  incomingAdditional: Float
  "Стоимость покупки монтажа"
  incomingInstallation: Float
  "Стоимость покупки производства"
  incomingManufacturing: Float
  "Стоимость покупки печати"
  incomingPrinting: Float
  "Стоимость покупки аренды"
  incomingRent: Float
  "Стоимость покупки налогов"
  incomingTax: Float
  "not used"
  project: ID
  "Стоимость продажи доп. расхода"
  saleAdditional: Float
  "Стоимость продажи монтажа"
  saleInstallation: Float
  "Стоимость продажи производства"
  saleManufacturing: Float
  "Стоимость продажи печати"
  salePrinting: Float
  "Стоимость продажи аренды"
  saleRent: Float
  "Стоимость продажи налогов"
  saleTax: Float
  "Дата начала периода"
  startPeriod: DateTime
  "Наименоваие услуги"
  title: String
}

"Параметр редактирования элемента сметы Доп. расходы РТС"
input EstimateRtsAdditionalArgument {
  "Агентская комиссия"
  agencyCommission: EstimateAgencyComission
  "not used"
  appendix: ID
  "Идентификатор города"
  city: ID
  "Количество"
  count: Int
  "Процент скидки"
  discountPercent: Float
  "Дата окончания периода"
  endPeriod: DateTime
  "Стоимость"
  price: Float
  "not used"
  project: ID
  "Дата начала периода"
  startPeriod: DateTime
  "Наименоваие услуги"
  title: String
}

"Параметр редактирования элемента сметы Бронирования РТС"
input EstimateRtsReservation {
  "Доп. расходы."
  additionalSetted: Float
  "Агентская комиссия"
  agencyCommission: EstimateAgencyComission
  "Необходим брендинг"
  branding: Boolean
  "Дата начала периода"
  dateFrom: DateTime
  "Дата окончания периода"
  dateTo: DateTime
  "Скидка на налог"
  discountNalogPercentSetted: Float
  "Скидка на клиента"
  discountToClientPercentSetted: Float
  "Монтаж"
  mountingSetted: Float
  "Налог после скидки"
  nalogAfterDiscountSetted: Float
  "Налог"
  nalogSetted: Float
  "Печать"
  printingSetted: Float
  "Аренда на клиента со скидкой"
  rentToClientAfterDiscountSetted: Float
  "Аренда на клиента"
  rentToClientSetted: Float
}

"Данные для обновления (все поля - необязательные)Дополнительных расходов (РТС)"
input PatchAdditionalCostsInput {
  "Дополнительные расходы -> Агентская комиссия"
  agencyCommission: ID
  "Дополнительные расходы НОН РТС -> Приложение"
  appendix: [ID]
  "Категория дополнительного расхода"
  category: AdditionalCostsCategoryInput
  "Дополнительные расходы -> Город"
  city: ID
  "Стоимость после скидки на дополнительный расход"
  costAfterDiscount: Float
  "Количество"
  count: Int
  "Процент скидки на дополнительный расход"
  discountPercent: Float
  "Окончание периода"
  endPeriod: DateTime
  "Цена"
  price: Float
  "Дополнительные расходы -> Проект"
  project: ID
  "Начало периода"
  startPeriod: DateTime
  "Название"
  title: String
}

"Данные для обновления (все поля - необязательные)Адресного справочника"
input PatchAddressesInput {
  actualAddressPartners: [ID]
  "Адрес"
  address: String
  constructionsByActualAdress: [ID]
  constructionsByMaketingAdress: [ID]
  legalAddressPartners: [ID]
  locationsByActualAdress: [ID]
  locationsByMaketingAdress: [ID]
  "Адреса -> Почтовый индекс"
  postcode: ID
}

"Данные для обновления (все поля - необязательные)Рекламной промо-компании"
input PatchAdvertPromoCompanyInput {
  "Рекламная компания -> Город"
  city: ID
  designs: [ID]
  "Рекламная компания -> Проект"
  project: ID
  "Дата начала"
  start: DateTime
  "Название промо-компании"
  title: String
}

"Данные для обновления (все поля - необязательные)Рекламной стороны"
input PatchAdvertisingSideInput {
  "Буквенный код рекламной стороны"
  code: String
  constructionSides: [ID]
  "Рекламные стороны -> Сторона"
  side: ID
  "Наименование рекламной стороны"
  title: String
}

"Данные для обновления (все поля - необязательные)Агентской комиссии"
input PatchAgencyCommissionInput {
  additionalCosts: [ID]
  "Агент для перечисления агентской коммиссии"
  agent: ID
  estimateNonRts: [ID]
  partners: [ID]
  "Процент агентской комисии"
  percent: Float
  projects: [ID]
  reservations: [ID]
  "Агентская комиссия распространяется на доп. расходы"
  toAdditional: Boolean
  "Агентская комиссия распространяется на монтаж"
  toMount: Boolean
  "Агентская комиссия распространяется на налог"
  toNalog: Boolean
  "Агентская комиссия распространяется на маржу НОН РТС"
  toNonrts: Boolean
  "Агентская комиссия распространяется на печать"
  toPrint: Boolean
  "Агентская комиссия распространяется на аренду"
  toRent: Boolean
  "Сумма агентской комиссии"
  value: Float
}

"Данные для обновления (все поля - необязательные)Приложения к договора"
input PatchAppendixInput {
  additionalCosts: [ID]
  additionalCostsNonrts: [ID]
  additionallyAgreement: Upload
  "Номер приложения"
  code: String
  "Приложения к договору -> Договор"
  contract: ID
  "Дата создания приложения"
  createdDate: DateTime
  "Приложения к договору -> Создатель (кто внес данные)"
  creator: ID
  invoices: [ID]
  "В архиве"
  isArchive: Boolean
  "Номер приложения в месяце"
  numInMonth: Int
  packagesReservations: [ID]
  "Срок оплаты"
  paymentDate: DateTime
  "Период приложения - дата окончания размещения"
  periodEndDate: DateTime
  "Период приложения - дата начала размещения"
  periodStartDate: DateTime
  "Приложения к договору -> Проект"
  project: ID
  reservations: [ID]
  "Статус возврата"
  returnStatus: Boolean
  "Приложения к договору -> Менеджер по продажам"
  salesManager: ID
  "Подписант в именительном падеже"
  signatoryOne: String
  "Должность подписанта"
  signatoryPosition: String
  "Подписант в родительном падеже"
  signatoryTwo: String
  "Дата обновления"
  updatedAt: DateTime
}

"Данные для обновления (все поля - необязательные)Изображения бренда"
input PatchBrandImageInput {
  active: Boolean
  "Бренд"
  brand: ID
  img: Upload
}

"Данные для обновления (все поля - необязательные)Бренда"
input PatchBrandInput {
  brandImages: [ID]
  "Код"
  code: String
  "Дата создания"
  createdAt: DateTime
  "Связанные дизайны"
  designs: [ID]
  partners: [ID]
  projects: [ID]
  "Наименование"
  title: String
  "Дата обновления"
  updatedAt: DateTime
  "Сектор деятельности контрагента"
  workingSector: ID
}

"Данные для обновления (все поля - необязательные)Города"
input PatchCityInput {
  additionalCostsNonrts: [ID]
  advertPromoCompanies: [ID]
  "Города -> Страна"
  country: ID
  crews: [ID]
  districts: [ID]
  packages: [ID]
  placementPrices: [ID]
  salesAdditionalCosts: [ID]
  salesManagerOfProjects: [ID]
  staticAdditionalCosts: [ID]
  "Название"
  title: String
}

"Данные для обновления (все поля - необязательные)Типа клиента"
input PatchClientTypeInput {
  "Описание"
  description: String
  partners: [ID]
  "Название"
  title: String
}

"Данные для обновления (все поля - необязательные)Конструкции"
input PatchConstructionInput {
  "Активная или демонтировананя"
  active: Boolean
  "Комментарий"
  backComment: String
  "Инвентарный номер - 1C"
  buhInventNumber: String
  constructionHistorySet: [ID]
  constructionnotificationSet: [ID]
  "Координаты"
  coordinates: String
  "Создать новый маркетинговый адрес с заданным (или незаданным) почтовым кодом postcode: ID"
  createMarketingAddress: String
  "Создать новую помеху с заданным названием: String"
  createObstruction: String
  "Создать новую техническую проблему с заданным названием и комментарием: String"
  createTechProblem: String
  "Дата создания"
  createdAt: DateTime
  "Дата создания"
  creationDate: DateTime
  "Конструкции -> Экипаж"
  crew: ID
  "Сторонам конструкции присвоены специализированные экипажи"
  crewsHasSpecialForSides: Boolean
  formats: [ID]
  "В архиве"
  isArchive: Boolean
  "Конструкция НОН РТС"
  isNonrts: Boolean
  "Местоположения -> Юридический адрес"
  legalAddress: ID
  "Конструкции -> Местоположение"
  location: ID
  "Местоположения -> Маркетинговый адрес"
  marketingAddress: ID
  "Конструкции -> Модель конструкции"
  model: ID
  mountings: [ID]
  "Конструкции -> Владелец НОН РТС"
  nonrtsOwner: ID
  "Коментарий о владельце НОН РТС"
  nonrtsOwnerComment: String
  "Порядковый номер конструкции в районе"
  numInDistrict: Int
  "Конструкции -> Помеха"
  obstruction: ID
  ownedSides: [ID]
  photo: Upload
  "Местоположения -> Почтовый индекс"
  postcode: ID
  "Ссылка на сайт с презентацией конструкции"
  presentationUrl: String
  rowIdx: Int
  "Статус доступности конструкции"
  statusAvailability: Boolean
  "Статус по подключению"
  statusConnection: Boolean
  "Комментарий тех. отдела"
  techComment: String
  "Инвентарный номер - Техотдел"
  techInventNumber: String
  "Номер телефона конструкции"
  techPhoneConstruction: String
  "Конструкция -> Технические проблемы"
  techProblem: [ID]
  "Список комментариев к тех. проблемам"
  techProblemAllComment: String
  "Комментарий к технической проблеме: String"
  techProblemComment: String
  "Дата обновления"
  updatedAt: DateTime
}

"Данные для обновления (все поля - необязательные)Construction notification"
input PatchConstructionNotificationInput {
  "Конструкция"
  construction: ID
  "Дата создания"
  createdAt: DateTime
  "Прочитано"
  read: Boolean
  "Тема"
  topic: String
  "Дата редактирования"
  updatedAt: DateTime
  "Пользователь"
  user: ID
}

"Данные для обновления (все поля - необязательные)Стороны конструкции"
input PatchConstructionSideInput {
  "Стророны конструкции -> Рекламная сторона"
  advertisingSide: ID
  "Статус доступности стороны"
  availabilitySide: Boolean
  "Стророны конструкции -> Конструкция"
  construction: ID
  constructionSideHistorySet: [ID]
  "Дата создания"
  createdAt: DateTime
  "Конструкции -> Экипаж"
  crew: ID
  estimateNonRts: [ID]
  "В архиве"
  isArchive: Boolean
  mountings: [ID]
  "Стророны конструкции -> Пакет"
  package: ID
  "Стророны конструкции -> Назначение стороны"
  purposeSide: ID
  reservation: [ID]
  "Ограничение стороны конструкции по продажам"
  saleConstraint: Boolean
  "Дата обновления"
  updatedAt: DateTime
}

"Данные для обновления (все поля - необязательные)Контактного лица"
input PatchContactPersonInput {
  "E-mail"
  email: String
  "ФИО"
  name: String
  "Контактные лица -> Контрагент"
  partner: ID
  "Телефон"
  phone: String
}

"Данные для обновления (все поля - необязательные)Договора"
input PatchContractInput {
  additionallyAgreementPdf: Upload
  "Документ, на основании которого действует подписант"
  basedOnDocument: String
  "Код"
  code: String
  "Комментарий"
  comment: String
  contractAppendices: [ID]
  contractPdf: Upload
  "Договора -> Тип договора"
  contractType: ID
  "Дата создания"
  createdAt: DateTime
  "Договора -> Создатель (кто внес данные)"
  creator: ID
  "Дата окончания действия"
  end: DateTime
  "Договора -> Инициатор"
  initiator: ID
  invoices: [ID]
  "В архиве"
  isArchive: Boolean
  "Договора -> Контрагент"
  partner: ID
  "Срок оплаты"
  paymentDate: DateTime
  "Дата заключения"
  registrationDate: DateTime
  "Статус возврата"
  returnStatus: Boolean
  "Договора -> Менеджер по продажам"
  salesManager: ID
  "Порядковый номер договора"
  serialNumber: String
  "Подписант в именительном падеже"
  signatoryOne: String
  "Должность подписанта"
  signatoryPosition: String
  "Подписант в родительном падеже"
  signatoryTwo: String
  "Дата начала действия"
  start: DateTime
  "Дата обновления"
  updatedAt: DateTime
}

"Данные для обновления (все поля - необязательные)Типа договора"
input PatchContractTypeInput {
  contracts: [ID]
  "Тип договора"
  name: String
}

"Данные для обновления (все поля - необязательные)Страны"
input PatchCountryInput {
  cities: [ID]
  "Страна"
  title: String
}

"Данные для обновления (все поля - необязательные)Экипажа"
input PatchCrewInput {
  "Экипажи -> Город"
  city: ID
  constructionSides: [ID]
  constructions: [ID]
  mountings: [ID]
  "Имя человека"
  name: String
  "Номер экипажа"
  num: String
  "Номер телефона монтажника"
  phone: String
}

"Данные для обновления (все поля - необязательные)Пользователя"
input PatchCustomUserInput {
  backOfficeManagersOfProjects: [ID]
  changelogSet: [ID]
  constructionHistorySet: [ID]
  constructionSideHistorySet: [ID]
  createdContracts: [ID]
  createdContractsAppendices: [ID]
  createdProjects: [ID]
  "date joined"
  dateJoined: DateTime
  "Почтовый адрес"
  email: String
  "Пользователи -> Должность"
  employeePosition: ID
  "first name"
  firstName: String
  "Пользователи <-> Группы"
  groups: [ID]
  initiatedContracts: [ID]
  "active Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
  isActive: Boolean
  "staff status. Designates whether the user can log into this admin site."
  isStaff: Boolean
  "Наличие прав суперпользователя"
  isSuperuser: Boolean
  "last login"
  lastLogin: DateTime
  "last name"
  lastName: String
  logentrySet: [ID]
  "Ф.И.О."
  name: String
  notificationSet: [ID]
  "password"
  password: String
  "Номер телефона"
  phone: String
  previousPasswords: [ID]
  refreshTokens: [ID]
  salesManagerOfProjects: [ID]
  salesManagerOnContracts: [ID]
  salesManagerOnContractsAppendices: [ID]
  "План по продажам на год"
  salesYearPlan: Float
  status: ID
  "Индивидуальные права данного пользователя."
  userPermissions: [ID]
  "username, Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
  username: String
}

"Данные для обновления (все поля - необязательные)Дизайна"
input PatchDesignInput {
  "Дизайн -> Рекламная компания"
  advertPromoCompany: ID
  "Дизайн в архиве"
  archived: Boolean
  brandsForDesign: [ID]
  designMountings: [ID]
  designUnmountings: [ID]
  img: Upload
  "Текущий дизайн"
  isCurrent: Boolean
  previousDesignMountings: [ID]
  "Дата начала действия дизайна"
  startedAt: DateTime
  "Название дизайна"
  title: String
}

"Данные для обновления (все поля - необязательные)Района"
input PatchDistrictInput {
  "Районы -> Город"
  city: ID
  lastSerialNumbers: ID
  partners: [ID]
  postcodes: [ID]
  "Название"
  title: String
}

"Данные для обновления (все поля - необязательные)Должности"
input PatchEmployeePositionInput {
  "Наименование"
  title: String
  users: [ID]
}

"Данные для обновления (все поля - необязательные)Дополнительного расхода НОН РТС"
input PatchEstimateNonRtsInput {
  "Дополнительные расходы НОН РТС -> Агентская комиссия"
  agencyCommission: ID
  "Дополнительные расходы НОН РТС -> Приложение"
  appendix: [ID]
  "Дополнительные расходы НОН РТС -> Город"
  city: ID
  "Данные о НОН РТС стоимости -> Сторона конструкции"
  constructionSide: ID
  "Количество (НОН РТС)"
  count: Int
  "Конец периода"
  endPeriod: DateTime
  "Входящая стоимость - Доп. расходы"
  incomingAdditional: Float
  "Входящая стоимость - Монтаж"
  incomingInstallation: Float
  "Входящая стоимость - Производство"
  incomingManufacturing: Float
  "Входящая стоимость - Печать"
  incomingPrinting: Float
  "Входящая стоимость - Аренда"
  incomingRent: Float
  "Входящая стоимость - Налог"
  incomingTax: Float
  "Дополнительные расходы НОН РТС -> Проект"
  project: ID
  reservation: ID
  "Стоимость продажи - Доп. расходы"
  saleAdditional: Float
  "Стоимость продажи - Монтаж"
  saleInstallation: Float
  "Стоимость продажи - Производство"
  saleManufacturing: Float
  "Стоимость продажи - Печать"
  salePrinting: Float
  "Стоимость продажи - Аренда"
  saleRent: Float
  "Стоимость продажи - Налог"
  saleTax: Float
  "Начало периода"
  startPeriod: DateTime
  "Тип (наружная реклама, ТВ, радио, метро, другое)"
  title: String
}

"Данные для обновления (все поля - необязательные)Семейства конструкции"
input PatchFamilyConstructionInput {
  locations: [ID]
  "Наименование"
  title: String
  underfamilies: [ID]
}

"Данные для обновления (все поля - необязательные)Формата"
input PatchFormatInput {
  "Код формата"
  code: String
  constructionsForFormat: [ID]
  "Форматы -> Модель конструкции"
  model: ID
  placementPrices: [ID]
  sides: [ID]
  staticAdditionalCosts: [ID]
  "Наименование формата"
  title: String
}

"Данные для обновления (все поля - необязательные)Группы"
input PatchGroupInput {
  customUser: [ID]
  name: String
  permissions: [ID]
}

"Данные для обновления (все поля - необязательные)Счёта"
input PatchInvoiceInput {
  "Счета -> Приложение к договору"
  appendix: ID
  "Выставление АВР"
  avr: Boolean
  "Счета -> Договор"
  contract: ID
  "Способ оплаты клиентом"
  customerPaymentMethod: String
  "Счета -> Контрагент, на котрого выставляется счет"
  partner: ID
  "Оплата не позднее"
  paymentLastDate: DateTime
  "Счета -> Проект"
  project: ID
  "Сумма без НДС"
  sumWithoutNds: Float
  "Общая сумма"
  wholeSum: Float
}

"Данные для обновления (все поля - необязательные)Местоположения"
input PatchLocationInput {
  "Площадь (га)"
  area: Float
  "Номер гос акта на землю"
  areaAct: String
  "Дата гос акта на землю"
  areaActDate: DateTime
  "Кадастровый номер"
  cadastralNumber: String
  "Комментарий"
  comment: String
  constructionRowIdx: Int
  constructions: [ID]
  "Дата создания"
  createdAt: DateTime
  document: Upload
  "Местоположения -> Семейство устанавливаемых конструкций в данном месте"
  familyConstruction: ID
  "Наличие земли"
  hasArea: Boolean
  "В архиве"
  isArchive: Boolean
  "Местоположение конструкций, не принадлежащих РТС"
  isNonrtsLocation: Boolean
  "Местоположения -> Юридический адрес"
  legalAddress: ID
  "Местоположения -> Маркетинговый адрес"
  marketingAddress: ID
  "Местоположения -> Почтовый индекс"
  postcode: ID
  "Местоположения -> Целевое назначение местоположения"
  purposeLocation: ID
  "Местоположения -> Статус оформления земельного участка"
  registrationStatusLocation: ID
  "Регистрация договора"
  rentContractCreatedAt: DateTime
  "Дата окончания договора"
  rentContractEnd: DateTime
  "Номер договора"
  rentContractNumber: String
  "Дата начала договора"
  rentContractStart: DateTime
  "Номер постановления от Акимата"
  resolutionNumber: String
  "Дата постановления от Акимата"
  resolutionNumberDate: DateTime
  rowIdx: Int
  "Дата обновления"
  updatedAt: DateTime
}

"Данные для обновления (все поля - необязательные)Модели конструкции"
input PatchModelConstructionInput {
  constructions: [ID]
  formats: [ID]
  title: String
  "Модели -> Подсемейство конструкции"
  underfamily: ID
}

"Данные для обновления (все поля - необязательные)Монтажа"
input PatchMountingInput {
  "В архиве"
  archived: Boolean
  "Комментарий"
  comment: String
  "Монтажи -> конструкци"
  construction: ID
  "Монтажи -> стороны конструкций"
  constructionSide: ID
  "Монтажи -> Экипаж"
  crew: ID
  "Монтажи -> Монтируемый Дизайн"
  design: ID
  "Выгружено ранее"
  downloadedEarly: DateTime
  "Дата демонтажа"
  endMounting: DateTime
  "Монтаж выполнен"
  mountingDone: Boolean
  "Уровень приоритетности"
  mountingRange: MountingMountingRangeInput
  "Монтажи -> Ремонтно-монтажная работа"
  mountingTask: ID
  photos: [ID]
  "Предыдущий дизайн"
  previousDesign: ID
  "Монтажи -> Бронирование"
  reservation: ID
  "Дата монтажа"
  startMounting: DateTime
  "Монтажи -> Демонтируемый Дизайн"
  unmountingDesign: ID
  "Демонтаж выполнен"
  unmountingDone: Boolean
}

"Данные для обновления (все поля - необязательные)Фотоотчёта о монтажа"
input PatchMountingPhotoInput {
  "Дата фотоотчета о монтаже"
  date: DateTime
  "Монтажная работа -> фотоотчет о монтаже"
  mounting: ID
  "Номер фотографии о монтаже"
  num: String
  photo: Upload
}

"Данные для обновления (все поля - необязательные)Ремонтно-монтажной работы"
input PatchMountingTaskInput {
  mountings: [ID]
  "Наименование"
  title: String
}

"Данные для обновления (все поля - необязательные)Уведомления"
input PatchNotificationInput {
  constructionnotification: ID
  "Дата создания"
  createdAt: DateTime
  "Прочитано"
  read: Boolean
  "Тема"
  topic: String
  "Дата редактирования"
  updatedAt: DateTime
  "Пользователь"
  user: ID
}

"Данные для обновления (все поля - необязательные)Помехи"
input PatchObstructionInput {
  constructions: [ID]
  "Помеха"
  title: String
}

"Данные для обновления (все поля - необязательные)Контрагента"
input PatchPartnerInput {
  "Контрагенты -> Фактический адрес"
  actualAddress: ID
  "Контрагенты -> Фактический адрес - Почтовый индекс"
  actualAddressPostcode: ID
  advertiserClients: [ID]
  "Контрагенты <-> Связанные рекламодатели"
  advertisers: [ID]
  "Контрагенты -> Агентская комиссия"
  agencyCommission: ID
  agencycommissionSet: [ID]
  "Банк получателя"
  bankRecipient: String
  "БИК"
  bik: String
  "БИН"
  binNumber: String
  "Контрагенты <-> Связанные бренды"
  brands: [ID]
  "Расчетный счет"
  checkingAccount: String
  "Контрагенты -> Тип клиента"
  clientType: ID
  "Комментарий"
  comment: String
  contactPersons: [ID]
  contracts: [ID]
  "Дата создания"
  createdAt: DateTime
  "Процент скидки на клиента"
  discountClientPercent: Float
  "Процент скидки на налог"
  discountNalogPercent: Float
  "Процент скидки по прайсу"
  discountPricePercent: Float
  "Контрагенты -> Район"
  district: ID
  "Почтовый адрес"
  email: String
  "Иностранный контрагент"
  foreignPartner: Boolean
  "ИИК"
  iik: String
  invoices: [ID]
  "Является владельцем конструкций НОН РТС"
  isNonrtsOwner: Boolean
  "КБЕ"
  kbe: String
  "Контрагенты -> Юридический адрес"
  legalAddress: ID
  "Контрагенты -> Юридический адрес - Почтовый индекс"
  legalAddressPostcode: ID
  "Контрагенты -> Юридическое лицо, получатель агентской комиссси"
  legalEntityPayeeAgencyComission: ID
  "Номер свидетельства о постановке на НДС"
  ndsCertificateNumber: String
  ownedNonrtsConstructions: [ID]
  "Контрагенты -> Тип контрагента"
  partnerType: ID
  projects: [ID]
  projectsAgencies: [ID]
  sendersOfAgencyComission: [ID]
  "Наименование"
  title: String
  "Дата редактирования"
  updatedAt: DateTime
  "Контрагенты -> Секторы деятельности"
  workingSectors: [ID]
}

"Данные для обновления (все поля - необязательные)Типа контрагента"
input PatchPartnerTypeInput {
  partners: [ID]
  "Тип контрагента"
  title: String
}

"Данные для обновления (все поля - необязательные)Права"
input PatchPermissionInput {
  codename: String
  contentType: ID
  groupSet: [ID]
  name: String
  userSet: [ID]
}

"Данные для обновления (все поля - необязательные)Стоимости рекламного размещения по прайса"
input PatchPlacementPriceInput {
  "Прайсовая стоимость -> Город"
  city: ID
  "Прайсовая стоимость -> Формат"
  format: ID
  "Период"
  period: Int
  "Цена за размещение"
  priceForPlacement: Float
}

"Данные для обновления (все поля - необязательные)Почтового индекса"
input PatchPostcodeInput {
  actualPostcodePartners: [ID]
  addresses: [ID]
  constructions: [ID]
  "Почтовые индексы -> Район"
  district: ID
  legalPostcodePartners: [ID]
  locations: [ID]
  "Название"
  title: String
}

"Данные для обновления (все поля - необязательные)Проекта"
input PatchProjectInput {
  additionalCosts: [ID]
  additionalCostsNonrts: [ID]
  advertPromoCompanies: [ID]
  "Рекламное агентство"
  agency: ID
  "Проекты -> Агентская комиссия"
  agencyCommission: ID
  "Проекты -> Менеджер Бэк-оффиса"
  backOfficeManager: ID
  "Бренд"
  brand: ID
  "Клиент"
  client: ID
  "Код"
  code: String
  "Коментарий"
  comment: String
  "Дата создания"
  createdAt: DateTime
  "Проекты -> Создатель (кто внес данные)"
  creator: ID
  "Процент скидки на клиента"
  discountClientPercent: Float
  "Процент скидки на налог"
  discountNalogPercent: Float
  "Процент скидки по прайсу"
  discountPricePercent: Float
  invoices: [ID]
  "В архиве"
  isArchive: Boolean
  "Порядковый номер проекта"
  numInYear: Int
  projectAppendices: [ID]
  projectCities: [ID]
  reservationPackage: [ID]
  reservations: [ID]
  "Проекты -> Менеджер по продажам"
  salesManager: ID
  "Дата начала"
  startDate: DateTime
  "Наименование"
  title: String
  "Дата обновления"
  updatedAt: DateTime
}

"Данные для обновления (все поля - необязательные)Назначения стороны"
input PatchPurposeSideInput {
  constructionSides: [ID]
  title: String
}

"Данные для обновления (все поля - необязательные)Бронирования"
input PatchReservationInput {
  "Заданное значение стоимости доп. расходов"
  additionalSetted: Float
  "Бронирование -> Агентская комиссия"
  agencyCommission: ID
  "Бронирование <-> Приложение к договору"
  appendix: [ID]
  "брендинг"
  branding: Boolean
  "Бронирования -> Сторона конструкции"
  constructionSide: ID
  "Дата создания"
  creationDate: DateTime
  "Дата начала"
  dateFrom: DateTime
  "Дата окончания"
  dateTo: DateTime
  "Заданный процент скидки на налог"
  discountNalogPercentSetted: Float
  "Заданный процент скидки по прайсу"
  discountPricePercentSetted: Float
  "Заданный процент скидки Аренды на клиента"
  discountToClientPercentSetted: Float
  "Распределений на монтаж"
  distributedToMounting: Int
  "Данные о НОН РТС стоимости -> Бронирование"
  estimateNonRts: ID
  "Заданное значение стоимости монтажа"
  mountingSetted: Float
  "Заданная стоимость налога после скидки"
  nalogAfterDiscountSetted: Float
  "Заданное значение стоимости налогов"
  nalogSetted: Float
  "Заданное значение стоимости печати"
  printingSetted: Float
  "Бронирования -> Проект"
  project: ID
  "Заданная стоимость после скидки по прайсу"
  rentByPriceAfterDiscountSetted: Float
  "Заданное значение аренды по прайсу"
  rentByPriceSetted: Float
  "Заданная стоимость Аренды после всех скидок"
  rentToClientAfterDiscountSetted: Float
  "Заданная аренда на клиента"
  rentToClientSetted: Float
  reservationMountings: [ID]
  "Бронирование -> Бронирование пакета"
  reservationPackage: ID
  "Бронирования -> Тип брони"
  reservationType: ID
}

"Данные для обновления (все поля - необязательные)Вида бронирования"
input PatchReservationTypeInput {
  "целочисленный ключ"
  ikey: ReservationTypeIkeyInput
  "уровень бронирования"
  level: Int
  reservation: [ID]
  reservationPackage: [ID]
  "Тип брони"
  title: String
}

"Данные для обновления (все поля - необязательные)Стороны"
input PatchSideInput {
  advertisingSides: [ID]
  "Буквенный код стороны"
  code: String
  "Стророны -> Формат"
  format: ID
  "Размер стороны"
  size: String
  "Наименование стороны"
  title: String
}

"Данные для обновления (все поля - необязательные)Статические, конфигурационных доп. расходов"
input PatchStaticAdditionalCostsInput {
  category: StaticAdditionalCostsCategoryInput
  "Статические, конфигурационные доп. расходы -> Город"
  city: ID
  "Статические, конфигурационные доп. расходы -> Формат"
  format: ID
  "Наименование дополнительного расхода"
  name: String
  "Цена"
  price: Float
}

"Данные для обновления (все поля - необязательные)Технической проблемы"
input PatchTechProblemsInput {
  "Комментарий к технической проблеме"
  comment: String
  constructions: [ID]
  "Наименование технической проблемы"
  title: String
}

"Данные для обновления (все поля - необязательные)Подсемейства конструкции"
input PatchUnderFamilyConstructionInput {
  "Подсемейства -> Семейство конструкции"
  family: ID
  models: [ID]
  "Наименование"
  title: String
}

"Данные для обновления (все поля - необязательные)Сектора деятельности"
input PatchWorkingSectorInput {
  brands: [ID]
  "Описание"
  description: String
  partners: [ID]
  "Наименование"
  title: String
}

"Спецификация поиска проекта"
input SearchCommercialProjectSpec {
  "Полное соответствие"
  fullmatch: Boolean
  "Код проекта содержит (регистронезависимо)"
  projectCode_Iregex: String
  "Идентификатор проекта"
  projectId: ID
  "Имя проекта содержит (регистронезависимо)"
  projectTitle_Iregex: String
}

"Данные для обновления (все NOT NULL поля - обязательные)Дополнительных расходов (РТС)"
input UpdateAdditionalCostsInput {
  "Дополнительные расходы -> Агентская комиссия"
  agencyCommission: UpdateAgencyCommissionInput
  "Дополнительные расходы НОН РТС -> Приложение"
  appendix: [ID]
  "Категория дополнительного расхода"
  category: AdditionalCostsCategoryInput
  "Дополнительные расходы -> Город"
  city: ID
  "Стоимость после скидки на дополнительный расход"
  costAfterDiscount: Float
  "Количество"
  count: Int
  "Процент скидки на дополнительный расход"
  discountPercent: Float
  "Окончание периода"
  endPeriod: DateTime
  "Цена"
  price: Float
  "Дополнительные расходы -> Проект"
  project: ID
  "Начало периода"
  startPeriod: DateTime
  "Название"
  title: String
}

"Данные для обновления (все NOT NULL поля - обязательные)Адресного справочника"
input UpdateAddressesInput {
  actualAddressPartners: [ID]
  "Адрес"
  address: String!
  constructionsByActualAdress: [ID]
  constructionsByMaketingAdress: [ID]
  legalAddressPartners: [ID]
  locationsByActualAdress: [ID]
  locationsByMaketingAdress: [ID]
  "Адреса -> Почтовый индекс"
  postcode: ID
}

"Данные для обновления (все NOT NULL поля - обязательные)Рекламной промо-компании"
input UpdateAdvertPromoCompanyInput {
  "Рекламная компания -> Город"
  city: ID
  designs: [ID]
  "Рекламная компания -> Проект"
  project: ID!
  "Дата начала"
  start: DateTime
  "Название промо-компании"
  title: String
}

"Данные для обновления (все NOT NULL поля - обязательные)Рекламной стороны"
input UpdateAdvertisingSideInput {
  "Буквенный код рекламной стороны"
  code: String
  constructionSides: [ID]
  "Рекламные стороны -> Сторона"
  side: ID!
  "Наименование рекламной стороны"
  title: String
}

"Данные для обновления (все NOT NULL поля - обязательные)Агентской комиссии"
input UpdateAgencyCommissionInput {
  additionalCosts: [ID]
  "Агент для перечисления агентской коммиссии"
  agent: ID
  estimateNonRts: [ID]
  partners: [ID]
  "Процент агентской комисии"
  percent: Float
  projects: [ID]
  reservations: [ID]
  "Агентская комиссия распространяется на доп. расходы"
  toAdditional: Boolean
  "Агентская комиссия распространяется на монтаж"
  toMount: Boolean
  "Агентская комиссия распространяется на налог"
  toNalog: Boolean
  "Агентская комиссия распространяется на маржу НОН РТС"
  toNonrts: Boolean
  "Агентская комиссия распространяется на печать"
  toPrint: Boolean
  "Агентская комиссия распространяется на аренду"
  toRent: Boolean
  "Сумма агентской комиссии"
  value: Float
}

"Данные для обновления (все NOT NULL поля - обязательные)Приложения к договора"
input UpdateAppendixInput {
  additionalCosts: [ID]
  additionalCostsNonrts: [ID]
  additionallyAgreement: Upload
  "Номер приложения"
  code: String
  "Приложения к договору -> Договор"
  contract: ID
  "Дата создания приложения"
  createdDate: DateTime
  "Приложения к договору -> Создатель (кто внес данные)"
  creator: ID
  invoices: [ID]
  "В архиве"
  isArchive: Boolean
  "Номер приложения в месяце"
  numInMonth: Int
  packagesReservations: [ID]
  "Срок оплаты"
  paymentDate: DateTime
  "Период приложения - дата окончания размещения"
  periodEndDate: DateTime
  "Период приложения - дата начала размещения"
  periodStartDate: DateTime
  "Приложения к договору -> Проект"
  project: ID
  reservations: [ID]
  "Статус возврата"
  returnStatus: Boolean
  "Приложения к договору -> Менеджер по продажам"
  salesManager: ID
  "Подписант в именительном падеже"
  signatoryOne: String
  "Должность подписанта"
  signatoryPosition: String
  "Подписант в родительном падеже"
  signatoryTwo: String
}

"Данные для обновления (все NOT NULL поля - обязательные)Изображения бренда"
input UpdateBrandImageInput {
  active: Boolean
  "Бренд"
  brand: ID
  img: Upload
}

"Данные для обновления (все NOT NULL поля - обязательные)Бренда"
input UpdateBrandInput {
  brandImages: [ID]
  "Код"
  code: String
  "Связанные дизайны"
  designs: [ID]
  partners: [ID]
  projects: [ID]
  "Наименование"
  title: String
  "Сектор деятельности контрагента"
  workingSector: ID
}

"Данные для обновления (все NOT NULL поля - обязательные)Города"
input UpdateCityInput {
  additionalCostsNonrts: [ID]
  advertPromoCompanies: [ID]
  "Города -> Страна"
  country: ID!
  crews: [ID]
  districts: [ID]
  packages: [ID]
  placementPrices: [ID]
  salesAdditionalCosts: [ID]
  salesManagerOfProjects: [ID]
  staticAdditionalCosts: [ID]
  "Название"
  title: String
}

"Данные для обновления (все NOT NULL поля - обязательные)Типа клиента"
input UpdateClientTypeInput {
  "Описание"
  description: String!
  partners: [ID]
  "Название"
  title: String!
}

"Данные для обновления (все NOT NULL поля - обязательные)Конструкции"
input UpdateConstructionInput {
  "Активная или демонтировананя"
  active: Boolean
  "Комментарий"
  backComment: String
  "Инвентарный номер - 1C"
  buhInventNumber: String
  constructionHistorySet: [ID]
  constructionnotificationSet: [ID]
  "Координаты"
  coordinates: String
  "Создать новый маркетинговый адрес с заданным (или незаданным) почтовым кодом postcode: ID"
  createMarketingAddress: String
  "Создать новую помеху с заданным названием: String"
  createObstruction: String
  "Создать новую техническую проблему с заданным названием и комментарием: String"
  createTechProblem: String
  "Дата создания"
  creationDate: DateTime
  "Конструкции -> Экипаж"
  crew: ID
  "Сторонам конструкции присвоены специализированные экипажи"
  crewsHasSpecialForSides: Boolean
  formats: [ID]
  "В архиве"
  isArchive: Boolean
  "Конструкция НОН РТС"
  isNonrts: Boolean
  "Местоположения -> Юридический адрес"
  legalAddress: ID
  "Конструкции -> Местоположение"
  location: ID
  "Местоположения -> Маркетинговый адрес"
  marketingAddress: ID
  "Конструкции -> Модель конструкции"
  model: ID
  mountings: [ID]
  "Конструкции -> Владелец НОН РТС"
  nonrtsOwner: ID
  "Коментарий о владельце НОН РТС"
  nonrtsOwnerComment: String
  "Порядковый номер конструкции в районе"
  numInDistrict: Int
  "Конструкции -> Помеха"
  obstruction: ID
  ownedSides: [ID]
  photo: Upload
  "Местоположения -> Почтовый индекс"
  postcode: ID
  "Ссылка на сайт с презентацией конструкции"
  presentationUrl: String
  rowIdx: Int
  "Статус доступности конструкции"
  statusAvailability: Boolean
  "Статус по подключению"
  statusConnection: Boolean
  "Комментарий тех. отдела"
  techComment: String
  "Инвентарный номер - Техотдел"
  techInventNumber: String
  "Номер телефона конструкции"
  techPhoneConstruction: String
  "Конструкция -> Технические проблемы"
  techProblem: [ID]
  "Конструкция -> Технические проблемы"
  techProblemAdd: [ID]
  "Список комментариев к тех. проблемам"
  techProblemAllComment: String
  "Комментарий к технической проблеме: String"
  techProblemComment: String
  techProblemCreate: [UpdateTechProblemsInput]
  "Конструкция -> Технические проблемы"
  techProblemRemove: [ID]
}

"Данные для обновления (все NOT NULL поля - обязательные)Construction notification"
input UpdateConstructionNotificationInput {
  "Конструкция"
  construction: ID
  "Прочитано"
  read: Boolean
  "Тема"
  topic: String
  "Пользователь"
  user: ID
}

"Данные для обновления (все NOT NULL поля - обязательные)Стороны конструкции"
input UpdateConstructionSideInput {
  "Стророны конструкции -> Рекламная сторона"
  advertisingSide: ID
  "Статус доступности стороны"
  availabilitySide: Boolean
  "Стророны конструкции -> Конструкция"
  construction: ID
  constructionSideHistorySet: [ID]
  "Конструкции -> Экипаж"
  crew: ID
  estimateNonRts: [ID]
  "В архиве"
  isArchive: Boolean
  mountings: [ID]
  "Стророны конструкции -> Пакет"
  package: ID
  "Стророны конструкции -> Назначение стороны"
  purposeSide: ID
  reservation: [ID]
  "Ограничение стороны конструкции по продажам"
  saleConstraint: Boolean
}

"Данные для обновления (все NOT NULL поля - обязательные)Контактного лица"
input UpdateContactPersonInput {
  "E-mail"
  email: String!
  "ФИО"
  name: String!
  "Контактные лица -> Контрагент"
  partner: ID
  "Телефон"
  phone: String!
}

"Данные для обновления (все NOT NULL поля - обязательные)Договора"
input UpdateContractInput {
  additionallyAgreementPdf: Upload
  "Документ, на основании которого действует подписант"
  basedOnDocument: String
  "Код"
  code: String
  "Комментарий"
  comment: String
  contractAppendices: [ID]
  contractAppendicesAdd: [ID]
  contractAppendicesRemove: [ID]
  contractPdf: Upload
  "Договора -> Тип договора"
  contractType: ID
  "Договора -> Создатель (кто внес данные)"
  creator: ID
  "Дата окончания действия"
  end: DateTime
  "Договора -> Инициатор"
  initiator: ID
  invoices: [ID]
  invoicesAdd: [ID]
  invoicesRemove: [ID]
  "В архиве"
  isArchive: Boolean
  "Договора -> Контрагент"
  partner: ID
  "Срок оплаты"
  paymentDate: DateTime
  "Дата заключения"
  registrationDate: DateTime
  "Статус возврата"
  returnStatus: Boolean
  "Договора -> Менеджер по продажам"
  salesManager: ID
  "Порядковый номер договора"
  serialNumber: String
  "Подписант в именительном падеже"
  signatoryOne: String
  "Должность подписанта"
  signatoryPosition: String
  "Подписант в родительном падеже"
  signatoryTwo: String
  "Дата начала действия"
  start: DateTime
}

"Данные для обновления (все NOT NULL поля - обязательные)Типа договора"
input UpdateContractTypeInput {
  contracts: [ID]
  "Тип договора"
  name: String
}

"Данные для обновления (все NOT NULL поля - обязательные)Страны"
input UpdateCountryInput {
  cities: [ID]
  "Страна"
  title: String
}

"Данные для обновления (все NOT NULL поля - обязательные)Экипажа"
input UpdateCrewInput {
  "Экипажи -> Город"
  city: ID
  constructionSides: [ID]
  constructions: [ID]
  mountings: [ID]
  "Имя человека"
  name: String
  "Номер экипажа"
  num: String
  "Номер телефона монтажника"
  phone: String
}

"Данные для обновления (все NOT NULL поля - обязательные)Пользователя"
input UpdateCustomUserInput {
  backOfficeManagersOfProjects: [ID]
  changelogSet: [ID]
  constructionHistorySet: [ID]
  constructionSideHistorySet: [ID]
  createdContracts: [ID]
  createdContractsAppendices: [ID]
  createdProjects: [ID]
  "date joined"
  dateJoined: DateTime
  "Почтовый адрес"
  email: String
  "Пользователи -> Должность"
  employeePosition: ID
  "first name"
  firstName: String
  "Пользователи <-> Группы"
  groups: [ID]
  initiatedContracts: [ID]
  "active Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
  isActive: Boolean
  "staff status. Designates whether the user can log into this admin site."
  isStaff: Boolean
  "Наличие прав суперпользователя"
  isSuperuser: Boolean
  "last login"
  lastLogin: DateTime
  "last name"
  lastName: String
  logentrySet: [ID]
  "Ф.И.О."
  name: String
  notificationSet: [ID]
  "password"
  password: String
  "Номер телефона"
  phone: String
  previousPasswords: [ID]
  refreshTokens: [ID]
  salesManagerOfProjects: [ID]
  salesManagerOnContracts: [ID]
  salesManagerOnContractsAppendices: [ID]
  "План по продажам на год"
  salesYearPlan: Float
  status: ID
  "Индивидуальные права данного пользователя."
  userPermissions: [ID]
  "username, Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
  username: String!
}

"Данные для обновления (все NOT NULL поля - обязательные)Дизайна"
input UpdateDesignInput {
  "Дизайн -> Рекламная компания"
  advertPromoCompany: ID
  "Дизайн в архиве"
  archived: Boolean
  brandsForDesign: [ID]
  designMountings: [ID]
  designUnmountings: [ID]
  img: Upload
  "Текущий дизайн"
  isCurrent: Boolean
  previousDesignMountings: [ID]
  "Дата начала действия дизайна"
  startedAt: DateTime
  "Название дизайна"
  title: String
}

"Данные для обновления (все NOT NULL поля - обязательные)Района"
input UpdateDistrictInput {
  "Районы -> Город"
  city: ID!
  lastSerialNumbers: ID
  partners: [ID]
  postcodes: [ID]
  "Название"
  title: String
}

"Данные для обновления (все NOT NULL поля - обязательные)Должности"
input UpdateEmployeePositionInput {
  "Наименование"
  title: String!
  users: [ID]
}

"Данные для обновления (все NOT NULL поля - обязательные)Дополнительного расхода НОН РТС"
input UpdateEstimateNonRtsInput {
  "Дополнительные расходы НОН РТС -> Агентская комиссия"
  agencyCommission: UpdateAgencyCommissionInput
  "Дополнительные расходы НОН РТС -> Приложение"
  appendix: [ID]
  "Дополнительные расходы НОН РТС -> Город"
  city: ID
  "Данные о НОН РТС стоимости -> Сторона конструкции"
  constructionSide: ID
  "Количество (НОН РТС)"
  count: Int
  "Конец периода"
  endPeriod: DateTime
  "Входящая стоимость - Доп. расходы"
  incomingAdditional: Float
  "Входящая стоимость - Монтаж"
  incomingInstallation: Float
  "Входящая стоимость - Производство"
  incomingManufacturing: Float
  "Входящая стоимость - Печать"
  incomingPrinting: Float
  "Входящая стоимость - Аренда"
  incomingRent: Float
  "Входящая стоимость - Налог"
  incomingTax: Float
  "Дополнительные расходы НОН РТС -> Проект"
  project: ID
  reservation: ID
  "Стоимость продажи - Доп. расходы"
  saleAdditional: Float
  "Стоимость продажи - Монтаж"
  saleInstallation: Float
  "Стоимость продажи - Производство"
  saleManufacturing: Float
  "Стоимость продажи - Печать"
  salePrinting: Float
  "Стоимость продажи - Аренда"
  saleRent: Float
  "Стоимость продажи - Налог"
  saleTax: Float
  "Начало периода"
  startPeriod: DateTime
  "Тип (наружная реклама, ТВ, радио, метро, другое)"
  title: String
}

"Данные для обновления (все NOT NULL поля - обязательные)Семейства конструкции"
input UpdateFamilyConstructionInput {
  locations: [ID]
  "Наименование"
  title: String
  underfamilies: [ID]
}

"Данные для обновления (все NOT NULL поля - обязательные)Формата"
input UpdateFormatInput {
  "Код формата"
  code: String
  constructionsForFormat: [ID]
  "Форматы -> Модель конструкции"
  model: ID!
  placementPrices: [ID]
  sides: [ID]
  staticAdditionalCosts: [ID]
  "Наименование формата"
  title: String
}

"Данные для обновления (все NOT NULL поля - обязательные)Группы"
input UpdateGroupInput {
  customUser: [ID]
  name: String!
  permissions: [ID]
}

"Данные для обновления (все NOT NULL поля - обязательные)Счёта"
input UpdateInvoiceInput {
  "Счета -> Приложение к договору"
  appendix: ID
  "Выставление АВР"
  avr: Boolean
  "Счета -> Договор"
  contract: ID
  "Способ оплаты клиентом"
  customerPaymentMethod: String
  "Счета -> Контрагент, на котрого выставляется счет"
  partner: ID
  "Оплата не позднее"
  paymentLastDate: DateTime
  "Счета -> Проект"
  project: ID
  "Сумма без НДС"
  sumWithoutNds: Float
  "Общая сумма"
  wholeSum: Float
}

"Данные для обновления (все NOT NULL поля - обязательные)Местоположения"
input UpdateLocationInput {
  "Площадь (га)"
  area: Float
  "Номер гос акта на землю"
  areaAct: String
  "Дата гос акта на землю"
  areaActDate: DateTime
  "Кадастровый номер"
  cadastralNumber: String
  "Комментарий"
  comment: String
  constructionRowIdx: Int
  constructions: [ID]
  constructionsAdd: [ID]
  constructionsRemove: [ID]
  document: Upload
  "Местоположения -> Семейство устанавливаемых конструкций в данном месте"
  familyConstruction: ID
  "Наличие земли"
  hasArea: Boolean
  "В архиве"
  isArchive: Boolean
  "Местоположение конструкций, не принадлежащих РТС"
  isNonrtsLocation: Boolean
  "Местоположения -> Юридический адрес"
  legalAddress: ID
  "Местоположения -> Маркетинговый адрес"
  marketingAddress: ID
  "Местоположения -> Почтовый индекс"
  postcode: ID
  "Местоположения -> Целевое назначение местоположения"
  purposeLocation: ID
  "Местоположения -> Статус оформления земельного участка"
  registrationStatusLocation: ID
  "Регистрация договора"
  rentContractCreatedAt: DateTime
  "Дата окончания договора"
  rentContractEnd: DateTime
  "Номер договора"
  rentContractNumber: String
  "Дата начала договора"
  rentContractStart: DateTime
  "Номер постановления от Акимата"
  resolutionNumber: String
  "Дата постановления от Акимата"
  resolutionNumberDate: DateTime
  rowIdx: Int
}

"Данные для обновления (все NOT NULL поля - обязательные)Модели конструкции"
input UpdateModelConstructionInput {
  constructions: [ID]
  formats: [ID]
  title: String
  "Модели -> Подсемейство конструкции"
  underfamily: ID!
}

"Данные для обновления (все NOT NULL поля - обязательные)Монтажа"
input UpdateMountingInput {
  "В архиве"
  archived: Boolean
  "Комментарий"
  comment: String
  "Монтажи -> конструкци"
  construction: ID
  "Монтажи -> стороны конструкций"
  constructionSide: ID
  "Монтажи -> Экипаж"
  crew: ID
  "Монтажи -> Монтируемый Дизайн"
  design: ID
  "Выгружено ранее"
  downloadedEarly: DateTime
  "Дата демонтажа"
  endMounting: DateTime
  "Монтаж выполнен"
  mountingDone: Boolean
  "Уровень приоритетности"
  mountingRange: MountingMountingRangeInput
  "Монтажи -> Ремонтно-монтажная работа"
  mountingTask: ID
  photos: [ID]
  "Предыдущий дизайн"
  previousDesign: ID
  "Монтажи -> Бронирование"
  reservation: ID
  "Дата монтажа"
  startMounting: DateTime
  "Монтажи -> Демонтируемый Дизайн"
  unmountingDesign: ID
  "Демонтаж выполнен"
  unmountingDone: Boolean
}

"Данные для обновления (все NOT NULL поля - обязательные)Фотоотчёта о монтажа"
input UpdateMountingPhotoInput {
  "Дата фотоотчета о монтаже"
  date: DateTime
  "Монтажная работа -> фотоотчет о монтаже"
  mounting: ID!
  "Номер фотографии о монтаже"
  num: String
  photo: Upload
}

"Данные для обновления (все NOT NULL поля - обязательные)Ремонтно-монтажной работы"
input UpdateMountingTaskInput {
  mountings: [ID]
  "Наименование"
  title: String
}

"Данные для обновления (все NOT NULL поля - обязательные)Уведомления"
input UpdateNotificationInput {
  constructionnotification: ID
  "Прочитано"
  read: Boolean
  "Тема"
  topic: String
  "Пользователь"
  user: ID
}

"Данные для обновления (все NOT NULL поля - обязательные)Помехи"
input UpdateObstructionInput {
  constructions: [ID]
  "Помеха"
  title: String!
}

"Данные для обновления (все NOT NULL поля - обязательные)Контрагента"
input UpdatePartnerInput {
  "Контрагенты -> Фактический адрес"
  actualAddress: ID
  "Контрагенты -> Фактический адрес - Почтовый индекс"
  actualAddressPostcode: ID
  advertiserClients: [ID]
  "Контрагенты <-> Связанные рекламодатели"
  advertisers: [ID]
  "Контрагенты <-> Связанные рекламодатели"
  advertisersAdd: [ID]
  "Контрагенты <-> Связанные рекламодатели"
  advertisersCreate: [UpdatePartnerInput]
  "Контрагенты <-> Связанные рекламодатели"
  advertisersRemove: [ID]
  "Контрагенты -> Агентская комиссия"
  agencyCommission: UpdateAgencyCommissionInput
  agencycommissionSet: [ID]
  "Банк получателя"
  bankRecipient: String
  "БИК"
  bik: String
  "БИН"
  binNumber: String
  "Контрагенты <-> Связанные бренды"
  brands: [ID]
  "Контрагенты <-> Связанные бренды"
  brandsAdd: [ID]
  "Контрагенты <-> Связанные бренды"
  brandsCreate: [UpdateBrandInput]
  "Контрагенты <-> Связанные бренды"
  brandsRemove: [ID]
  "Расчетный счет"
  checkingAccount: String
  "Контрагенты -> Тип клиента"
  clientType: ID
  "Комментарий"
  comment: String
  contactPersons: [ID]
  contracts: [ID]
  "Процент скидки на клиента"
  discountClientPercent: Float
  "Процент скидки на налог"
  discountNalogPercent: Float
  "Процент скидки по прайсу"
  discountPricePercent: Float
  "Контрагенты -> Район"
  district: ID
  "Почтовый адрес"
  email: String
  "Иностранный контрагент"
  foreignPartner: Boolean
  "ИИК"
  iik: String
  invoices: [ID]
  "Является владельцем конструкций НОН РТС"
  isNonrtsOwner: Boolean
  "КБЕ"
  kbe: String
  "Контрагенты -> Юридический адрес"
  legalAddress: ID
  "Контрагенты -> Юридический адрес - Почтовый индекс"
  legalAddressPostcode: ID
  "Контрагенты -> Юридическое лицо, получатель агентской комиссси"
  legalEntityPayeeAgencyComission: ID
  "Номер свидетельства о постановке на НДС"
  ndsCertificateNumber: String
  ownedNonrtsConstructions: [ID]
  "Контрагенты -> Тип контрагента"
  partnerType: ID
  projects: [ID]
  projectsAdd: [ID]
  projectsAgencies: [ID]
  projectsCreate: [UpdateProjectInput]
  projectsRemove: [ID]
  sendersOfAgencyComission: [ID]
  "Наименование"
  title: String
  "Контрагенты -> Секторы деятельности"
  workingSectors: [ID]
  "Контрагенты -> Секторы деятельности"
  workingSectorsAdd: [ID]
  workingSectorsCreate: [UpdateWorkingSectorInput]
  "Контрагенты -> Секторы деятельности"
  workingSectorsRemove: [ID]
}

"Данные для обновления (все NOT NULL поля - обязательные)Типа контрагента"
input UpdatePartnerTypeInput {
  partners: [ID]
  "Тип контрагента"
  title: String!
}

"Данные для обновления (все NOT NULL поля - обязательные)Права"
input UpdatePermissionInput {
  codename: String!
  contentType: ID!
  groupSet: [ID]
  name: String!
  userSet: [ID]
}

"Данные для обновления (все NOT NULL поля - обязательные)Стоимости рекламного размещения по прайса"
input UpdatePlacementPriceInput {
  "Прайсовая стоимость -> Город"
  city: ID
  "Прайсовая стоимость -> Формат"
  format: ID
  "Период"
  period: Int
  "Цена за размещение"
  priceForPlacement: Float
}

"Данные для обновления (все NOT NULL поля - обязательные)Почтового индекса"
input UpdatePostcodeInput {
  actualPostcodePartners: [ID]
  addresses: [ID]
  constructions: [ID]
  "Почтовые индексы -> Район"
  district: ID!
  legalPostcodePartners: [ID]
  locations: [ID]
  "Название"
  title: String
}

"Данные для обновления (все NOT NULL поля - обязательные)Проекта"
input UpdateProjectInput {
  additionalCosts: [ID]
  additionalCostsNonrts: [ID]
  advertPromoCompanies: [ID]
  "Рекламное агентство"
  agency: ID
  "Проекты -> Агентская комиссия"
  agencyCommission: UpdateAgencyCommissionInput
  "Проекты -> Менеджер Бэк-оффиса"
  backOfficeManager: ID
  "Бренд"
  brand: ID
  "Клиент"
  client: ID
  "Код"
  code: String
  "Коментарий"
  comment: String
  "Проекты -> Создатель (кто внес данные)"
  creator: ID
  "Процент скидки на клиента"
  discountClientPercent: Float
  "Процент скидки на налог"
  discountNalogPercent: Float
  "Процент скидки по прайсу"
  discountPricePercent: Float
  invoices: [ID]
  "В архиве"
  isArchive: Boolean
  "Порядковый номер проекта"
  numInYear: Int
  projectAppendices: [ID]
  projectCities: [ID]
  reservationPackage: [ID]
  reservations: [ID]
  "Проекты -> Менеджер по продажам"
  salesManager: ID
  "Дата начала"
  startDate: DateTime
  "Наименование"
  title: String
}

"Данные для обновления (все NOT NULL поля - обязательные)Назначения стороны"
input UpdatePurposeSideInput {
  constructionSides: [ID]
  title: String!
}

"Данные для обновления (все NOT NULL поля - обязательные)Бронирования"
input UpdateReservationInput {
  "Заданное значение стоимости доп. расходов"
  additionalSetted: Float
  "Бронирование -> Агентская комиссия"
  agencyCommission: ID
  "Бронирование <-> Приложение к договору"
  appendix: [ID]
  "брендинг"
  branding: Boolean
  "Бронирования -> Сторона конструкции"
  constructionSide: ID
  "Дата начала"
  dateFrom: DateTime!
  "Дата окончания"
  dateTo: DateTime!
  "Заданный процент скидки на налог"
  discountNalogPercentSetted: Float
  "Заданный процент скидки по прайсу"
  discountPricePercentSetted: Float
  "Заданный процент скидки Аренды на клиента"
  discountToClientPercentSetted: Float
  "Распределений на монтаж"
  distributedToMounting: Int
  "Данные о НОН РТС стоимости -> Бронирование"
  estimateNonRts: ID
  "Заданное значение стоимости монтажа"
  mountingSetted: Float
  "Заданная стоимость налога после скидки"
  nalogAfterDiscountSetted: Float
  "Заданное значение стоимости налогов"
  nalogSetted: Float
  "Заданное значение стоимости печати"
  printingSetted: Float
  "Бронирования -> Проект"
  project: ID
  "Заданная стоимость после скидки по прайсу"
  rentByPriceAfterDiscountSetted: Float
  "Заданное значение аренды по прайсу"
  rentByPriceSetted: Float
  "Заданная стоимость Аренды после всех скидок"
  rentToClientAfterDiscountSetted: Float
  "Заданная аренда на клиента"
  rentToClientSetted: Float
  reservationMountings: [ID]
  "Бронирование -> Бронирование пакета"
  reservationPackage: ID
  "Бронирования -> Тип брони"
  reservationType: ID!
}

"Данные для обновления (все NOT NULL поля - обязательные)Вида бронирования"
input UpdateReservationTypeInput {
  "целочисленный ключ"
  ikey: ReservationTypeIkeyInput
  "уровень бронирования"
  level: Int!
  reservation: [ID]
  reservationPackage: [ID]
  "Тип брони"
  title: String
}

"Данные для обновления (все NOT NULL поля - обязательные)Стороны"
input UpdateSideInput {
  advertisingSides: [ID]
  "Буквенный код стороны"
  code: String
  "Стророны -> Формат"
  format: ID!
  "Размер стороны"
  size: String
  "Наименование стороны"
  title: String
}

"Данные для обновления (все NOT NULL поля - обязательные)Статические, конфигурационных доп. расходов"
input UpdateStaticAdditionalCostsInput {
  category: StaticAdditionalCostsCategoryInput
  "Статические, конфигурационные доп. расходы -> Город"
  city: ID
  "Статические, конфигурационные доп. расходы -> Формат"
  format: ID
  "Наименование дополнительного расхода"
  name: String
  "Цена"
  price: Float
}

"Данные для обновления (все NOT NULL поля - обязательные)Технической проблемы"
input UpdateTechProblemsInput {
  "Комментарий к технической проблеме"
  comment: String
  constructions: [ID]
  "Наименование технической проблемы"
  title: String
}

"Данные для обновления (все NOT NULL поля - обязательные)Подсемейства конструкции"
input UpdateUnderFamilyConstructionInput {
  "Подсемейства -> Семейство конструкции"
  family: ID!
  models: [ID]
  "Наименование"
  title: String
}

"Данные для обновления (все NOT NULL поля - обязательные)Сектора деятельности"
input UpdateWorkingSectorInput {
  brands: [ID]
  "Описание"
  description: String!
  partners: [ID]
  "Наименование"
  title: String!
}


"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"The `Decimal` scalar type represents a python Decimal."
scalar Decimal

"""
Allows use of a JSON String for input / output from the GraphQL schema.

Use of this type is *not recommended* as you lose the benefits of having a defined, static
schema (one of the key benefits of GraphQL).
"""
scalar JSONString

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

"""
Errors messages and codes mapped to
fields or non fields errors.
Example:
{
field_name: [
{
"message": "error message",
"code": "error_code"
            }
],
other_field: [
{
"message": "error message",
"code": "error_code"
            }
],
nonFieldErrors: [
{
"message": "error message",
"code": "error_code"
            }
]
}
"""
scalar ExpectedErrorType

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

"""
Create scalar that ignores normal serialization/deserialization, since
that will be handled by the multipart request spec
"""
scalar Upload
